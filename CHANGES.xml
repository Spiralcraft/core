<scm:Change.list
  xmlns:scm="class:/spiralcraft/scm/meta/"
  >
  
  <scm:Change>
    <revision>0.4.8
    </revision>
    
    <authorId>miketoth
    </authorId>
    
    <date>2010-05-01
    </date>
    
    <notes>
      <scm:Note>VFS mirroring implementation
      </scm:Note>
      <scm:Note>spiralcraft.data enhancements to support VFS mirroring
        architecture
      </scm:Note>      
      <scm:Note>spiralcraft.lang enhancements to support VFS mirroring
        architecture
      </scm:Note>      
      <scm:Note>VFS enhancements for Volume management and 
        Resource metadata. 
      </scm:Note> 
      <scm:Note>VFS refactoring pass to better organize interfaces.
      </scm:Note>
      <scm:Note>Memory optimization pass.
      </scm:Note> 
      <scm:Note>Enhancements for evaluating expressions from the command line
      </scm:Note> 
      <scm:Note>A StandardPrefixResolver implementation has been promoted
        from SaxPrefixResolver and moved to common/namespace. 
      </scm:Note>
      <scm:Note>The "FocusChainObject" interface has been renamed to
        "Contextual". The ThreadedFocusChainObject interface has been replaced
        with a different interface ThreadContextual.
      </scm:Note>
      <scm:Note>spiralcraft.builder enhancements to facilitate the repeated
        use of a single Assembly as a factory to apply structure to multiple 
        pre-constructed objects.
      </scm:Note>      
    </notes>
    
    <details>
      
      <scm:Change>
        <notes>
          <scm:Note>The "FocusChainObject" interface has been renamed to
            "Contextual". The ThreadedFocusChainObject interface has been 
            replaced with a different interface ThreadContextual.
          </scm:Note>      
          <scm:Note>New ThreadContextual interface to represent Contextual
            implementations that publish Thread-specific references.
          </scm:Note>      
        </notes>
        
        <path>source/spiralcraft
        </path>
        
        <resources>
          <URI>lang/Contextual.java
          </URI>
          <URI>lang/FocusChainObject.java
          </URI>
          <URI>lang/ThreadContextual.java
          </URI>
          <URI>lang/ThreadedFocusChainObject.java
          </URI>
          <URI>data/Space.java
          </URI>
          <URI>data/editor/TupleEditor.java
          </URI>
          <URI>data/flatfile/FieldMapping.java
          </URI>
          <URI>data/flatfile/RecordFormat.java
          </URI>
          <URI>data/persist/AbstractXmlObject.java
          </URI>
          <URI>data/persist/PersistentReference.java
          </URI>
          <URI>data/sax/XmlDataRenderer.java
          </URI>
          <URI>data/spi/AbstractStore.java
          </URI>
          <URI>data/util/RelationalMap.java
          </URI>
          <URI>data/rest/RestClient.java
          </URI>
          <URI>data/rest/RestService.java
          </URI>
          <URI>lang/Operation.java
          </URI>
          <URI>lang/parser/ObjectLiteralNode.java
          </URI>
          <URI>lang/spi/ViewCache.java
          </URI>
          <URI>sax/ElementRenderer.java
          </URI>
          <URI>security/auth/Authenticator.java
          </URI>
          <URI>security/auth/AuthModule.java
          </URI>
          <URI>security/spi/CredentialValidator.java
          </URI>
          <URI>task/Scenario.java
          </URI>
          <URI>task/TaskRunner.java
          </URI>
          <URI>task/Reference.java
          </URI>
        </resources>
      </scm:Change>
      
      
      <scm:Change>
        <notes>
          <scm:Note>A StandardPrefixResolver implementation has been promoted
            from SaxPrefixResolver and moved to common/namespace. 
          </scm:Note>

        </notes>
        
        <path>source/spiralcraft
        </path>

        <resources>
          <URI>builder/PropertySpecifier.java
          </URI>
          <URI>common/namespace/StandardPrefixResolver.java
          </URI>
          <URI>sax/Node.java
          </URI>
          <URI>sax/ParseTree.java
          </URI>
          <URI>sax/SaxPrefixResolver.java
          </URI>
        </resources>
      
      </scm:Change>

      <scm:Change>
        <notes>
          <scm:Note>Enhancements for evaluating expressions from the
            command line
          </scm:Note>
          <scm:Note>Error message for empty non-boolean configuration option
            in BeanArguments
          </scm:Note>
          <scm:Note>Executor provides Namespace resolution as part of its
            context
          </scm:Note>
          <scm:Note>Added log.Level.isInfo() for convenience writing Log 
            related code.
          </scm:Note>
          <scm:Note>TaskRunner outputs command results if not null.
          </scm:Note>
        </notes>
      
        <path>source
        </path>

        <resources>
          <URI>spiralcraft/exec/BeanArguments.java
          </URI>
          <URI>spiralcraft/exec/Executor.java
          </URI>
          <URI>spiralcraft/log/Level.java
          </URI>
          <URI>spiralcraft/task/TaskRunner.java
          </URI>
          <URI>META-INF/spiralcraft.env/eval.env.xml
          </URI>
        </resources>
      </scm:Change>      
    
      <scm:Change>
        <notes>
          <scm:Note>spiralcraft.builder enhancements to facilitate the repeated
            use of a single Assembly asa factory to apply structure to multiple 
            pre-constructed objects.
          </scm:Note>
          <scm:Note>Assembly.setDefaultInstance() is no longer public- a 
            pre-existing object is specified via a new required single parameter
            for the "resolve" method.
          </scm:Note>

        </notes>
        
        <path>source/spiralcraft
        </path>
        <resources>
          <URI>builder/Assembly.java
          </URI>
          <URI>builder/AssemblyClass.java
          </URI>
          <URI>builder/PropertyBinding.java
          </URI>
          <URI>builder/BuilderChannel.java
          </URI>
        </resources>
      
      </scm:Change>
      
      <scm:Change>
        <notes>
          <scm:Note>spiralcraft.lang enhancements to support VFS mirroring
            architecture
          </scm:Note>
          <scm:Note>Syntax to express array types of arbitrary nesting levels
            using "[@ns:type]" + "[]"*
          </scm:Note>
          <scm:Note>RelationalNode- ( &lt;,&gt;,etc,.. ) will return null
            when either operator is null, due to Comparable.compareTo() being
            undefined (and unreliable) against a null argument.
          </scm:Note>
          <scm:Note>spiralcraft.lang "Tuple" has now been more appropriately 
            named "Struct" to differentiate them from the spiralcraft.data Tuple.
          </scm:Note>
          <scm:Note>New functions Concatenate, Max, Min, and Tree
          </scm:Note>          
          <scm:Note>CollectionDecorator implementations must support
            addAll(dest,source) where source is type compatible with dest, in
            order to avoid excessive Iteration as a least-common-denominator
            approach.
          </scm:Note>
          <scm:Note>New Operation class permits use of a 
            spiralcraft.builder .assy as a type in an object-literal
            language construct by extending Operation and specifying an
            arbitrary Expression to satisfy the ChannelFactory contract.
          </scm:Note>      
          <scm:Note>ArrayReflector determines that 2 array reflectors are
            compatible if they have the same content type. Corner case 
            re. array with "void" content better defined.
          </scm:Note>  
          <scm:Note>BeanReflector constructs interface Proxies via the use of a
            spiralcraft.builder Assembly
          </scm:Note>       
          <scm:Note>ClosureFocus 2-arg constructor does not require
            Focus chain to match primary input type.
          </scm:Note>       
        </notes>
        
        <path>source/spiralcraft
        </path>
        
        <resources>
          <URI>lang/parser/Struct.java
          </URI>
          <URI>lang/parser/StructField.java
          </URI>
          <URI>lang/parser/StructNode.java
          </URI>
          <URI>lang/parser/Tuple.java
          </URI>
          <URI>lang/parser/TupleField.java
          </URI>
          <URI>lang/parser/TupleNode.java
          </URI>
          <URI>lang/parser/ExpressionParser.java
          </URI>
          <URI>lang/parser/TypeFocusNode.java
          </URI>
          <URI>lang/parser/RelationalNode.java
          </URI>
          <URI>lang/parser/RelationalNode.java
          </URI>
          <URI>lang/functions/Concatenate.java
          </URI>
          <URI>lang/functions/Min.java
          </URI>
          <URI>lang/functions/Max.java
          </URI>
          <URI>lang/functions/Tree.java
          </URI>
          <URI>lang/CollectionDecorator.java
          </URI>
          <URI>lang/reflect/ArrayReflector.java
          </URI>
          <URI>lang/reflect/BeanReflector.java
          </URI>
          <URI>lang/spi/ArrayListDecorator.java
          </URI>
          <URI>lang/spi/GenericCollectionDecorator.java
          </URI>
          <URI>lang/spi/GenericListDecorator.java
          </URI>
          <URI>lang/spi/ClosureFocus.java
          </URI>
          <URI>lang/spi/IterationDecorator.java
          </URI>
        </resources>
      </scm:Change>
      
      
      <scm:Change>
        <notes>
          <scm:Note>spiralcraft.data enhancements to support VFS mirroring
            architecture
          </scm:Note>
          <scm:Note>Improved support for converting Tuple based interface
            Proxies to and from data representations and dispatching Proxy
            methods to high level implementations.
          </scm:Note>
          <scm:Note>Added spiralcraft.lang operations to Externalize
            / Internalize object data. These operations are now supported
            using Type.getExternalizer()
          </scm:Note>
          <scm:Note>Improve construction support for all composite data types 
            by allowing Types to provide constructors and allowing the
            automatic construction of Aggregates from any Iterable data.
          </scm:Note>          
        </notes>
        
        <path>source/spiralcraft
        </path>
        
        <resources>
          <URI>data/Type.java
          </URI>
          <URI>data/core/AbstractAggregateType.java
          </URI>
          <URI>data/core/TypeImpl.java
          </URI>
          <URI>data/lang/TupleDelegate.java
          </URI>
          <URI>data/lang/AggregateConstructorChannel.java
          </URI>
          <URI>data/lang/AggregateReflector.java
          </URI>
          <URI>data/lang/TupleReflector.java
          </URI>
          <URI>data/lang/ToDataTranslator.java
          </URI>
          <URI>data/lang/ToStringTranslator.java
          </URI>
          <URI>data/task/Internalize.java
          </URI>
          <URI>data/task/Externalize.java
          </URI>
          <URI>data/reflect/AssemblyType.java
          </URI>
          <URI>lang/spi/ReverseTranslator.java
          </URI>
          
        </resources>
      
      </scm:Change>
      
      <scm:Change>
      
        <notes>
          <scm:Note>VFS mirroring implementation
          </scm:Note>
          <scm:Note>VFS enhancements for Volume management and 
            Resource metadata. 
          </scm:Note> 
          <scm:Note>ContextResource resolution mechanism moved to a function
            of ContextResourceMap. FileSpace, Authority and Graft mechanisms
            created to provide modularized control over contextually
            associated resources.
          </scm:Note>
          <scm:Note>CommandScheduler fix to abort run() when component 
            is stopped after event is fired.
          </scm:Note>                
          <scm:Note>Path is now a managed spiralcraft.data primitive type
          </scm:Note>                
          <scm:Note>IteratorChain and IteratorStack support streaming 
            Iteration by permitting the queuing and stacking of Iterators
            during iteration.
          </scm:Note>                
          <scm:Note>Enhance support for spiralcraft.lang path manipulation: 
            Path supports 
            static create() method to create a standard '/' delimited path, and
            is also Iterable.
          </scm:Note>
          <scm:Note>New utility method URIUtil.ensureTrailingSlash(URI)
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft
        </path>
        <resources>
          <URI>vfs/context/ContextResource.java
          </URI>
          <URI>vfs/context/ContextResourceFactory.java
          </URI>
          <URI>vfs/context/ContextResourceMap.java
          </URI>
          <URI>vfs/context/Authority.java
          </URI>
          <URI>vfs/context/FileSpace.java
          </URI>
          <URI>vfs/context/Graft.java
          </URI>
          <URI>vfs/context/Mirror.java
          </URI>
          <URI>vfs/context/Redirect.java
          </URI>
          <URI>vfs/context/MirrorSubscriber.assy.xml
          </URI>
          <URI>vfs/meta/Entry.java
          </URI>
          <URI>vfs/meta/ResourceToEntry.java
          </URI>
          <URI>vfs/meta/TreeSnapshot.java
          </URI>
          <URI>command/CommandScheduler.java
          </URI>
          <URI>data/types/standard/PathType.java
          </URI>
          <URI>vfs/file/FileResource.java
          </URI>
          <URI>util/IteratorChain.java
          </URI>
          <URI>util/IteratorStack.java
          </URI>
          <URI>util/Path.java
          </URI>
          <URI>util/URIUtil.java
          </URI>
        </resources>
        
        
      </scm:Change>
      
      
      <scm:Change>
        <notes>
          <scm:Note>VFS refactoring pass to better organize interfaces
          </scm:Note>
          <scm:Note>spiralcraft.vfs.ByteArrayResource is now
            spiralcraft.vfs.util.ByteArrayResource
          </scm:Note>
          <scm:Note>spiralcraft.vfs.AbstractResource is now 
            spiralcraft.vfs.spi.AbstractResource
          </scm:Note>
          <scm:Note>Resource iface adds getChildren() for fluency
          </scm:Note>
          <scm:Note>Resource iface adds setLastModified()
          </scm:Note>
          <scm:Note>Container iface adds listChildren(ResourceFilter)
          </scm:Note>
          <scm:Note>VfsUtil is obsolete
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/
        </path>
        
        <resources>
          <URI>vfs/Resource.java
          </URI>
          <URI>vfs/spi/AbstractResource.java
          </URI>
          <URI>vfs/jar/JarFileResource.java
          </URI>
          <URI>vfs/file/FileResource.java
          </URI>
          <URI>vfs/url/URLResource.java
          </URI>
          <URI>vfs/classpath/ClasspathResource.java
          </URI>
          <URI>vfs/util/ByteArrayResource.java
          </URI>
          <URI>vfs/util/ResourceWrapper.java
          </URI>
          <URI>vfs/ByteArrayResource.java
          </URI>
          <URI>vfs/VfsUtil.java
          </URI>
        </resources>
      </scm:Change>
      
      <scm:Change>
        <notes>
          <scm:Note>Enclose CalculatedField in ClosureChannel to ensure
            that the Expression is evaluated against a cached thread local
            context as is QueryField and KeyField.
          </scm:Note> 
        </notes>
        
        <path>source/spiralcraft/
        </path>
        
        <resources>
          <URI>data/core/CalculatedFieldImpl.ajva
          </URI>
          <URI>lang/spi/ClosureChannel.java
          </URI>
        </resources>
      </scm:Change>
        
      <scm:Change>
        <notes>
          <scm:Note>Ensure that field bindings are properly cached in
            their source channels.
          </scm:Note> 
          <scm:Note>Don't automatically cache resolved Expressions in Focus
            implementations, as it may be redundant, and may increase memory
            usage for high fan-out trees at at the end of subtype expansions. 
            BaseFocus.cacheChannels is an optimization flag  that defaults to
            false. 
          </scm:Note> 
        </notes>
        
        <path>source/spiralcraft/
        </path>

        <resources>
          <URI>lang/BaseFocus.java
          </URI>
          <URI>data/lang/TupleReflector.java
          </URI>
          <URI>query/Join.java
          </URI>
          <URI>query/EquiJoin.java
          </URI>
          <URI>query/Projection.java
          </URI>
          <URI>query/Query.java
          </URI>
          <URI>query/ReferenceQuery.java
          </URI>
          <URI>query/Scan.java
          </URI>
          <URI>query/Selection.java
          </URI>
          <URI>query/SetFilter.java
          </URI>
          <URI>query/UnionBinding.java
          </URI>
          <URI>spi/BaseExtentQueryable.java
          </URI>
        </resources>

            
      </scm:Change>
    </details>
  </scm:Change>
    
  <scm:Change>
    <revision>0.4.7.4
    </revision>
    
    <authorId>miketoth
    </authorId>
    
    <date>2010-03-29
    </date>
    
    <notes>
      <scm:Note>Fix issue where query of heterogeneous base type would
        incorrectly optimize, resulting in improper sort results
      </scm:Note> 
    </notes>
      
    <details>
      <scm:Change>
        <notes>
          <scm:Note>Fix issue where query of heterogeneous base type would
        incorrectly optimize, resulting in improper sort results.
          </scm:Note> 
          <scm:Note>Delegated merge function to the query itself by
            adding an isMergeable() and merge() functions.
          </scm:Note>
          <scm:Note>UnionBinding accepts source channels for 
            use as Distinct utility.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/data/
        </path>
        
        <resources>
          <URI>Space.java
          </URI>
          <URI>query/Concatenation.java
          </URI>
          <URI>query/Join.java
          </URI>
          <URI>query/EquiJoin.java
          </URI>
          <URI>query/Projection.java
          </URI>
          <URI>query/Query.java
          </URI>
          <URI>query/ReferenceQuery.java
          </URI>
          <URI>query/Scan.java
          </URI>
          <URI>query/Selection.java
          </URI>
          <URI>query/SetFilter.java
          </URI>
          <URI>query/UnionBinding.java
          </URI>
          <URI>spi/BaseExtentQueryable.java
          </URI>
        </resources>

            
      </scm:Change>
    </details>
  </scm:Change>

  <scm:Change>
    <revision>0.4.7.3
    </revision>
    
    <authorId>miketoth
    </authorId>
    
    <date>2010-03-27
    </date>
    
    <notes>
      <scm:Note>Fixed synchronization logic bug in XmlStore locking code.
      </scm:Note> 
    </notes>
      
    <details>
      <scm:Change>
        <notes>
          <scm:Note>Fixed synchronization logic bug in XmlStore locking code.
          </scm:Note> 

        </notes>
        
        <path>source/spiralcraft/data/xml/XmlQueryable.java
        </path>

            
      </scm:Change>
    </details>
  </scm:Change>

  <scm:Change>
    <revision>0.4.7.2
    </revision>
    
    <authorId>miketoth
    </authorId>
    
    <date>2010-03-26
    </date>
    
    <notes>
      <scm:Note>Performance optimizations in common spiralcraft.lang and
        spiralcraft.data operations
      </scm:Note> 
      <scm:Note>spiralcraft.builder can now define variables in the 
        common ContextDictionary string substitution mechanism.
        "spiralcraft.builder.dir"
        and "spiralcraft.builder.dir.URI" are automatically defined to refer to 
        the location of the assembly definition file where the property is
        used.
      </scm:Note> 
      <scm:Note>Misc debugging enhancements
      </scm:Note> 
    </notes>
      
    <details>
      <scm:Change>
        <notes>
          <scm:Note>spiralcraft.builder can now define variables in the 
            common ContextDictionary string substitution mechanism.
            "spiralcraft.builder.dir"
            and "spiralcraft.builder.dir.URI" are automatically defined to refer
            to 
            the location of the assembly definition file where the property is
            used.
          </scm:Note> 
          <scm:Note>ContextDictionary can now use an external definition
            map and supports a local override mode where locally defined
            properties take precedence over globally defined properties.
          </scm:Note>

        </notes>
        
        <path>source/spiralcraft
        </path>

        <resources>
          <URI>builder/Assembly.java
          </URI>
          <URI>builder/AssemblyClass.java
          </URI>
          <URI>builder/AssemblyLoader.java
          </URI>
          <URI>builder/PropertyBinding.java
          </URI>
          <URI>builder/PropertySpecifier.java
          </URI>
          <URI>util/ContextDictionary.java
          </URI>
          <URI>util/URIUtil.java
          </URI>
        </resources>
            
      </scm:Change>

      <scm:Change>
        <notes>
          <scm:Note>Misc debugging enhancements
          </scm:Note> 

          <scm:Note>Added debugLevel variables for XmlTypeFactory and Loader
            to trace class and type loading process.
          </scm:Note>

        </notes>
        
        <path>source/spiralcraft
        </path>

        <resources>
          <URI>data/xml/XmlTypeFactory.java
          </URI>
          <URI>classloader/Loader.java
          </URI>
        </resources>
            
      </scm:Change>
      
      <scm:Change>
        <notes>
          <scm:Note>Performance optimizations in common spiralcraft.lang and
            spiralcraft.data operations
          </scm:Note> 

          <scm:Note>Generally optimized direct queries against base extents
            by delegating to each subtype extent and concatenating the results.
          </scm:Note>
          <scm:Note>Replaced Union with Concatenation for base extent scans.
          </scm:Note>

          <scm:Note>Enclosed the upstream context of KeyField and QueryField
            implementations to eliminate unnecessary loading of
            iterative query execution.
          </scm:Note> 
          <scm:Note>Added additional constructor to ClosureFocus for 
            subject channel to enclose.
          </scm:Note> 

          <scm:Note>Ensure that UnionBinding and ConcatenationBinding
            respect design contract for use of Queryable and Focus params in
            constructor. Ensure that Concatenation resolves own type
            appropriately. 
          </scm:Note> 
          
          <scm:Note>ConcatenationBinding accepts Type in utility
            constructor.
          </scm:Note>

        </notes>
        
        <path>source/spiralcraft
        </path>

        <resources>
          <URI>data/core/KeyField.java
          </URI>
          <URI>data/core/QueryField.java
          </URI>
          <URI>lang/spi/ClosureFocus.java
          </URI>
          
          <URI>data/spi/BaseExtentQueryable.java
          </URI>
          
          <URI>data/Space.java
          </URI>
          <URI>data/query/Concatenation.java
          </URI>
          <URI>data/query/ConcatenationBinding.java
          </URI>
          <URI>data/query/UnionBinding.java
          </URI>


        </resources>
            
      </scm:Change>

     </details>
  </scm:Change>
  
  
  <scm:Change>
    <revision>0.4.7.1
    </revision>
    
    <authorId>miketoth
    </authorId>
    
    <date>2010-03-19
    </date>
    
    <notes>
      <scm:Note>Ensure that @top meta operation uses ListDecorator when
        available
      </scm:Note> 
      <scm:Note>Standardize on UTF-8 XML encoding for internal type defs
      </scm:Note>
    </notes>
      
    <details>
      
      <scm:Change>
        <notes>
          <scm:Note>Ensure that @top meta operation uses ListDecorator when
           available
          </scm:Note>
          <scm:Note>Don't allow AggregateReflector to throw IndexO.O.B
            exception
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/lang/spi/AbstractReflector.java
        </path>
        
        <resources>
          <URI>lang/spi/AbstractReflector.java
          </URI>
          <URI>data/lang/AggregateReflector.java
          </URI>
        </resources>
            
      </scm:Change>

      <scm:Change>
        <notes>
          <scm:Note>Standardize on UTF-8 XML encoding for internal type defs
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/
        </path>
        
        <resources>
          <URI>data/spi/Sequence.type.xml
          </URI>
          <URI>security/Login.type.xml
          </URI>
        </resources>
      
      </scm:Change>
    </details>
  </scm:Change>

  <scm:Change>
    <revision>0.4.7
    </revision>
    
    <authorId>miketoth
    </authorId>
    
    <date>2010-03-16
    </date>
    
    <notes>
      <scm:Note>Allow rolling enlistment during transaction prepare stage
        (fix ConcurrentAccessException during prepare)
      </scm:Note> 
      <scm:Note>Fixes for variable-credential authentication
      </scm:Note>
    </notes>
      
    <details>
      
      <scm:Change>
        <notes>
          <scm:Note>Allow for rolling enslistment during transaction prepare
            stage (fix ConcurrentAccessException during prepare)
          </scm:Note>
          <scm:Note>New RollingIterable class allows for elements to be added
            to an Iterable during iteration.
          </scm:Note>
          <scm:Note>Catch all RuntimeExceptions during transaction events
            and convert them to TransactionExceptions
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/
        </path>
        
        <resources>
          <URI>data/transaction/Transaction.java
          </URI>
          <URI>util/RollingIterable.java
          </URI>
        </resources>
      
      </scm:Change>

      <scm:Change>
        <notes>
          <scm:Note>Fixes for variable-credential authentication 
          </scm:Note>
          <scm:Note>Added update and reset method to make LoginEntry credential 
            update atomic and fix issue where old credentials interfered with
            new login attempts using different credential types.
          </scm:Note>
          <scm:Note>Assume that password digest is encoded as hex in the login
            digestpass field to allow for more straightforward usage
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/security/
        </path>
        
        <resources>
          <URI>auth/LoginEntry.java
          </URI>
          <URI>spi/PasswordDataAuthModule.assy.xml
          </URI>
        
        </resources>
      
      </scm:Change>

    </details>
  </scm:Change>

  <scm:Change>
    <revision>0.4.6
    </revision>
    
    <authorId>miketoth
    </authorId>
    
    <date>2010-03-05
    </date>
    
    <notes>
      <scm:Note>Implement bidirectional relational mapping to map between
        candidate keys in a relation.
      </scm:Note> 
      <scm:Note>Complete authentication using password hash
      </scm:Note> 
      <scm:Note>Fix DataAuthenticator, which broke in refactor though
        deprecated anyway.
      </scm:Note> 
      <scm:Note>Enhancements and fixes to spiralcraft.lang: handling of
        primitive Java types, implementation of @size for
        anything that supports CollectionDecorator, fixed Tuple field
        assignment.
      </scm:Note> 
      <scm:Note>Enhanced debugging of spiralcraft.builder instantiation
        process.
      </scm:Note> 
      <scm:Note>Fixed spurious "waiting for pool" messages when using 
        the Scheduler.
      </scm:Note> 
      <scm:Note>Changed default text log format to 2 lines to be more readable
      </scm:Note> 
    </notes>
      
    <details>
      
      <scm:Change>
        <notes>
          <scm:Note>Implement bidirectional relational mapping to map between
            candidate keys in a relation.
          </scm:Note> 
        </notes>
        
        <path>source/spiralcraft/data
        </path>
        
        <resources>
          <URI>query/EquiJoin.java
          </URI>
          <URI>util/RelationalMap.java
          </URI>
        </resources>
      
      </scm:Change>
      <scm:Change>
        <notes>
          <scm:Note>Complete authentication using password hash
          </scm:Note> 
          <scm:Note>Provide option to validate a digest password with no
            challenge against a cleartext database for test purposes.
          </scm:Note>           
          <scm:Note>Ensure that all digests are based on UTF-8 text
            encodings. 
          </scm:Note>           
          <scm:Note>Allow AuthSession clients to obtain the realmName to
            support external digest credential generation.
          </scm:Note>           
          <scm:Note>Standardize on "saltedDigest" term to refer to the 
            stable password digest salted with shared tokens. This affects
            clients of LoginEntry.
          </scm:Note>           
          <scm:Note>Fix DataAuthenticator, which is broke in refactor though
            deprecated anyway.
          </scm:Note> 
          <scm:Note>Standardize on new HexCodec class for encoding binary
            data to hexadecimal.
          </scm:Note> 
          <scm:Note>Provide String conversion ops for byte[] to base64,
            byte[] to hex, and character[] to String
          </scm:Note> 
        </notes>

        <path>source/spiralcraft/
        </path>
      
        <resources>
          <URI>security/auth/LoginEntry.java
          </URI>
          <URI>security/auth/AuthSessiony.java
          </URI>
          <URI>security/auth/LoginEntry.java
          </URI>
          <URI>security/spi/DataAuthenticator.java
          </URI>
          <URI>security/spi/PasswordDataAuthModule.assy.xml
          </URI>
          <URI>codec/text/HexCodec.java
          </URI>
          <URI>util/crypt/Digester.java
          </URI>
          <URI>util/string/ByteArrayToBase64.java
          </URI>
          <URI>util/string/ByteArrayToHex.java
          </URI>
          <URI>util/string/StringConverter.java
          </URI>
          
        </resources>
      
      </scm:Change>
      
      <scm:Change>
      
        <notes>
          <scm:Note>Changed default text log format to 2 lines to be more 
            readable
          </scm:Note> 
        </notes>
      
        <path>source/spiralcraft/log/DefaultFormatter.java
        </path>
      
      </scm:Change>
      
      <scm:Change>
        <notes>
          <scm:Note>Fixed spurious "waiting for pool" messages when using 
            the Scheduler.
          </scm:Note>       
          <scm:Note>Set start flag early so pool has an opportunity
            to fill to its minimum level before returning from start().
          </scm:Note>       
        
        </notes>
        
        <path>source/spiralcraft/pool/Pool.java
        </path>
      </scm:Change>

      <scm:Change>
        <notes>
          <scm:Note>Enhancements and fixes to spiralcraft.lang
          </scm:Note>
          <scm:Note>Handling of primitive Java types.
          </scm:Note>
          <scm:Note>Fixed Tuple field assignment
          </scm:Note>
          <scm:Note>Implement @size for anything that supports
            CollectionDecorator.
          </scm:Note>
          <scm:Note>Construction of primitive arrays supported
          </scm:Note>
          <scm:Note>Fixed some BeanReflector.isAssignableFrom() issues handling
            primitives. 
          </scm:Note>
          <scm:Note>Primitives can now be resolved by a type URI- eg. class:/int
          </scm:Note>
        </notes>
          
        <path>source/spiralcraft/
        </path>
     
        <resources>
          <URI>beans/BeanInfoCache.java
          </URI>
          <URI>lang/spi/PrimitiveArrayConstructorChannel.java
          </URI>
          <URI>lang/reflect/BeanReflector.java
          </URI>
          <URI>lang/parser/SubscriptNode.java
          </URI>
          <URI>lang/spi/ArrayConstructorChannel.java
          </URI>
        </resources>
      
      </scm:Change>

      <scm:Change>
        <notes>
          <scm:Note>Enhanced debugging of spiralcraft.builder 
            instantiation process.
          </scm:Note>
          <scm:Note>PropertySpecifier now has a debugLevel property.
          </scm:Note>
        
        </notes>
        
        <path>source/spiralcraft/builder/
        </path>
     
        <resources>
          <URI>AssemblyLoader.java
          </URI>
          <URI>PropertyBinding.java
          </URI>
          <URI>PropertySpecifier.java
          </URI>
        </resources>
     
      </scm:Change>

    </details>
  </scm:Change>

  <scm:Change>
    <revision>0.4.5.2
    </revision>
    
    <authorId>miketoth
    </authorId>
    
    <date>2010-02-25
    </date>
    
    <notes>
      <scm:Note>Fix NPE in Union query when using no-arg constructor due to 
        Type not getting resolved from sources. Ensure that Fetch calls
        query.resolve().
      </scm:Note> 
      
      <path>source/spiralcraft/data/
      </path>
      
      <resources>
        <URI>query/Union.java
        </URI>
        <URI>task/Fetch.java
        </URI>
      </resources>
    
    </notes>
  </scm:Change>

  <scm:Change>
    <revision>0.4.5.1
    </revision>
    
    <authorId>miketoth
    </authorId>
    
    <date>2010-02-24
    </date>
    
    <notes>
      <scm:Note>Fix for NPE in Union query when querying an abstract base
        type.
      </scm:Note> 
      
      <scm:Note>Remove extraneous logging inadvertently left in 
        spiralcraft.builder.PropertyBinding
      </scm:Note> 

      <scm:Note>New spiralcraft.app package (incomplete) for common
        component model factored from the component model aspect of 
        spiralcraft-textgen.
      </scm:Note> 
    
    </notes>
    
    <detail>
      <scm:Change>
        <notes>
          <scm:Note>Fix for NPE in Union query and AbstractStore when querying 
            an abstract base type due to issue where Focus is not passed
            through.
          </scm:Note> 
        </notes>
        
        <path>source/spiralcraft/data
        </path>
        
        <resources>
          <URI>query/Union.java
          </URI>
          <URI>query/UnionBinding.java
          </URI>
          <URI>spi/AbstractStore.java
          </URI>
        </resources>
      
      </scm:Change>
    
    
      <scm:Change>
        <notes>
          <scm:Note>Remove extraneous logging inadvertently left in 
            spiralcraft.builder.PropertyBinding
          </scm:Note> 
        </notes>
        
        <path>source/spiralcraft/builder/PropertyBinding.java
        </path>
      
      </scm:Change>

      <scm:Change>
        <notes>
          <scm:Note>
            Added isConfig(),isDebug(),isTrace(),isFine() convenience 
            methods to log.Level class.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/log/Level.java
        </path>
      
      </scm:Change>
      
      <scm:Change>
        <notes>
          <scm:Note>
            New spiralcraft.app package (incomplete) for common
            component model factored from the component model aspect of 
            spiralcraft-textgen.    
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/app
        </path>
        
        <resources>
          <URI>Component.java
          </URI>
          <URI>Container.java
          </URI>
          <URI>Event.java
          </URI>
          <URI>EventHandler.java
          </URI>
          <URI>InitializeMessage.java
          </URI>
          <URI>Message.java
          </URI>
          <URI>MessageContext.java
          </URI>
          <URI>MessageHandler.java
          </URI>
          <URI>MessageHandlerChain.java
          </URI>
          <URI>State.java
          </URI>
          <URI>StateFrame.java
          </URI>
          <URI>components/Iterate.java
          </URI>
          <URI>components/IterationState.java
          </URI>
          <URI>spi/AbstractComponent.java
          </URI>
          <URI>spi/AbstractContainer.java
          </URI>
          <URI>spi/MessageHandlerState.java
          </URI>
          <URI>spi/SimpleState.java
          </URI>
          <URI>spi/ValueState.java
          </URI>
        
        </resources>
      </scm:Change>
    </detail>
  </scm:Change>
  
  
  <scm:Change>
    <revision>0.4.5
    </revision>
    
    <authorId>miketoth
    </authorId>
    
    <date>2010-02-19
    </date>
    
    <notes>
      <scm:Note>Implementation of Reduce functionality (ie. reducing sets
        using aggregate functions) and associated spiralcraft.lang 
        enhancements.
      </scm:Note>
      
      <scm:Note>Security enhancements to support token hashing schemes for
        secure transmission and storage of passwords and password hashes.
      </scm:Note>

      <scm:Note>Minor updates and bug fixes to support spiralcraft-launcher
        enhancements and spiralcraft-sql refresh.
      </scm:Note>
    
    </notes>
    
    <detail>
    
      <scm:Change>
        <notes>
          <scm:Note>
            Implementation of reduce functionality (ie. reducing sets
            using aggregate functions) and associated spiralcraft.lang 
            enhancements. Associated minor updates to spiralcraft.data
            query functionality to take advantage of reduce ops.
          </scm:Note>
          <scm:Note>
            ArrayUtil has new functions concat(T[],Collection) to add the 
            contents of a collection to an Array and asKey(T[]) to use
            the array as a "key"- an immutable object that can be
            compared for equality to other instances returned from the same
            function.
          </scm:Note>
          <scm:Note>
            ClassUtil deals with primitive equivalence of Void.TYPE and
            Void.class
          </scm:Note>
          <scm:Note>Don't make reflectors define map or reduce.
          </scm:Note>
          <scm:Note>Collections must now support addAll(Iterator) to
            enable efficient adds to immutable representations (ie. arrays)
          </scm:Note>
          <scm:Note>Generic list operations on Iterables. Obsoletes 
            CollectionSelectChannel.
          </scm:Note>
          <scm:Note> IterableChain  provides Iteration over multiple sources. 
          </scm:Note>
          <scm:Note>Reflector.getCommonType() no longer throws exception and
            now returns null when no common type exists.
          </scm:Note>
          <scm:Note>Type coercion introduced into Logical expressions to
            permit some number comparison operations (ie. float to Double)
            by using Number class conversions. Factored Translator interface
            for logical expressions (LogicalNode) into inner class so 
            implementation can be chosen at bind-time.
          </scm:Note>
          <scm:Note>Changed NumericOpNode to BinaryOpNode because we deal
            with intrinsic Strings and List ops internally.
          </scm:Note>
          <scm:Note>List literals are now read as Tuples, to avoid
            redundancy
          </scm:Note>
          <scm:Note>Disambiguate between an array subscript and an
            object literal in a FocusRelativeExpression
          </scm:Note>
          <scm:Note>Added Reduce functionality (aggregate functions) using
            $[ expr ] operator.
          </scm:Note>          
          <scm:Note>AggregateProjectNode is now MapReduceNode due to
            addition of Reduce functionality.
          </scm:Note>
          <scm:Note>Define Tuple equality and allow fields to be
            examined.
          </scm:Note>
          <scm:Note>Projection query now integrates 1-m queries.
          </scm:Note>
          <scm:Note>Collect task provides results.
          </scm:Note>
          <scm:Note>Fetch task provides result reflector from bound query
          </scm:Note>
        </notes>
      
        <path>source/spiralcraft/
        </path>
        
        <resources>
          <URI>util/ArrayUtil.java
          </URI>
          <URI>util/lang/ClassUtil.java
          </URI>
          <URI>util/IterableChain.java
          </URI>
          <URI>lang/Reflector.java
          </URI>
          <URI>lang/CollectionDecorator.java
          </URI>
          <URI>lang/spi/GenericCollectionDecorator.java
          </URI>
          <URI>lang/spi/GenericListDecorator.java
          </URI>
          <URI>lang/spi/IterableIndexTranslator.java
          </URI>
          <URI>lang/spi/IterableRangeChannel.java
          </URI>
          <URI>lang/spi/IterableSelectChannel.java
          </URI>
          <URI>lang/spi/AbstractReflector.java
          </URI>
          <URI>lang/spi/ArrayConstructorChannel.java
          </URI>
          <URI>lang/spi/ArrayListDecorator.java
          </URI>
          <URI>lang/spi/CollectionSelectChannel.java
          </URI>
          <URI>lang/spi/IterationProjector.java
          </URI>
          <URI>lang/spi/ViewCache.java
          </URI>
          <URI>lang/spi/ViewState.java
          </URI>
          <URI>lang/spi/StateScope.java
          </URI>
          <URI>lang/parser/AggregateProjectNode.java
          </URI>
          <URI>lang/parser/MapReduceNode.java
          </URI>
          <URI>lang/parser/LogicalNode.java
          </URI>
          <URI>lang/parser/LogicalNegateNode.java
          </URI>
          <URI>lang/parser/RelationalNode.java
          </URI>
          <URI>lang/parser/EqualityNode.java
          </URI>
          <URI>lang/parser/ExclusiveOrNode.java
          </URI>
          <URI>lang/parser/ConditionalNode.java
          </URI>
          <URI>lang/parser/LogicalAndNode.java
          </URI>
          <URI>lang/parser/LogicalOrNode.java
          </URI>
          <URI>lang/parser/NumericOpNode.java
          </URI>
          <URI>lang/parser/BinaryOpNode.java
          </URI>
          <URI>lang/parser/Node.java
          </URI>
          <URI>lang/parser/ExpressionParser.java
          </URI>
          <URI>lang/parser/Tuple.java
          </URI>
          <URI>lang/parser/TupleField.java
          </URI>
          <URI>lang/parser/TupleNode.java
          </URI>
          <URI>lang/reflect/BeanReflector.java
          </URI>
          <URI>lang/reflect/ArrayReflector.java
          </URI>
          <URI>lang/reflect/IterableLengthTranslator.java
          </URI>
          <URI>lang/reflect/IterableReflector.java
          </URI>
          <URI>data/EditableAggregate.java
          </URI>
          <URI>data/spi/EditableArrayListAggregate.java
          </URI>
          <URI>data/spi/EditableKeyedListAggregate.java
          </URI>
          <URI>data/session/BufferAggregate.java
          </URI>
          <URI>data/lang/AggregateReflector.java
          </URI>
          <URI>data/query/Projection.java
          </URI>
          <URI>data/task/Collect.java
          </URI>
          <URI>data/task/Fetch.java
          </URI>
                
        </resources>
      </scm:Change>

      <scm:Change>
        <notes>
          <scm:Note>Security enhancements to support token hashing schemes for
            secure transmission and storage of passwords and password hashes.
          </scm:Note>
          <scm:Note>Changed cryptpass to digestpass in Login.type.xml
          </scm:Note>
          <scm:Note>AuthSession: Changed opaqueDigest to saltedDigest, 
            and added digest
            method to provide for repeated applications on externally
            salted digests.
          </scm:Note>
          <scm:Note>Added a ChallengeCredential to the LoginEntry and to
            authentication logic. The Challenge is used by the password
            authenticator to re-digest the password hash and may be  
            associated with an application specific expiration mechanism.
          </scm:Note>
          <scm:Note>Added a CredentialValidator interface to deal with
            various credential presentation scenarios in a more declarative 
            fashion.
          </scm:Note>
          <scm:Note>Obsoleted PasswordDataAuthModule.java in favor of
            PasswordDataAuthModule.assy.xml by making DataAuthModule
            more fully configurable
          </scm:Note>
        </notes>
      
        <path>source/spiralcraft</path>
        
        <resources>
          <URI>security/Login.type.xml
          </URI>
          <URI>security/auth/AuthSession.java
          </URI>
          <URI>security/auth/ChallengeCredential.java
          </URI>
          <URI>security/auth/LoginEntry.java
          </URI>
          <URI>security/spi/BasicCredentialValidator.java
          </URI>
          <URI>security/spi/DataAuthModule.java
          </URI>
          <URI>security/spi/PasswordDataAuthModule.java
          </URI>
          <URI>security/spi/PasswordDataAuthModule.assy.xml
          </URI>
        </resources>
      </scm:Change>
      
      
      <scm:Change>
      
        <notes>
          <scm:Note>Provide "task" built-in to run TaskRunner
          </scm:Note>
        </notes>
    
        <path>source/META-INF/spiralcraft.env/task.env.xml
        </path>
        
      </scm:Change>     

      <scm:Change>
      
        <notes>
          <scm:Note>Provide timeout options and timeout exception for
            Pool: Pool.maxStartupMs, Pool.maxCheckoutMs
          </scm:Note>
          <scm:Note>checkout() now throws InterruptedException if 
            checkout timeout is exceeded
          </scm:Note>
        </notes>
    
        <path>source/spiralcraft/
        </path>
        
        <resources>
          <URI>pool/Pool.java
          </URI>
          <URI>pool/ThreadPool.java
          </URI>
          <URI>time/Scheduler.java
          </URI>
        
        </resources>
    
      </scm:Change>     

      <scm:Change>
      
        <notes>
          <scm:Note>Provide a list of primary queryables (queryables for
            explicitly managed types)
          </scm:Note>
        </notes>
    
        <path>source/spiralcraft/data/spi/AbstractStore.java
        </path>
    
      </scm:Change>     

      <scm:Change>
      
        <notes>
          <scm:Note>Throw meaningful exception when attempt to instantiate
            an abstract class fails.
          </scm:Note>
        </notes>
    
        <path>source/spiralcraft/data/reflect/ReflectionType.java
        </path>
    
      </scm:Change>     

      <scm:Change>
      
        <notes>
          <scm:Note>Fix bug in exception text when reporting unmapped
            namespace.
          </scm:Note>
        </notes>
    
        <path>source/spiralcraft/builder/AssemblyLoader.java
        </path>
    
      </scm:Change>     

      <scm:Change>
      
        <notes>
          <scm:Note>Added "description" property to Field and Type
          </scm:Note>
          <scm:Note>KeyField is Transient
          </scm:Note>
          <scm:Note>Don't persist transient fields
          </scm:Note>
        </notes>
    
        <path>source/spiralcraft/data
        </path>
    
        <resources>
          <URI>Field.java
          </URI>
          <URI>core/KeyField.java
          </URI>
          <URI>sax/DataWriter.java
          </URI>
          <URI>Type.java
          </URI>
          <URI>core/FieldImpl.java
          </URI>
          <URI>core/TypeImpl.java
          </URI>
          <URI>core/AbstractAggregateType.java
          </URI>
        </resources>
    
      </scm:Change>     
       
      <scm:Change>
      
        <notes>
          <scm:Note>
            Added ArrayUtil.format(array,separator,beginDelimiter,endDelimiter)
          </scm:Note>
        </notes>
    
        <path>source/spiralcraft/util/ArrayUtil.java
        </path>
        
      </scm:Change>      

    </detail>
  </scm:Change>

  <scm:Change>
    <revision>0.4.4.2
    </revision>
    
    <authorId>miketoth
    </authorId>
    
    <date>2010-02-03
    </date>
    
    <notes>
      <scm:Note>Avoid setting Snapshot transactionId to 0, because 0
        is defined to always generate a snapshot.
      </scm:Note>
      <scm:Note>Enhance debugging for ContextResourceMap
      </scm:Note>
    </notes>
    
    <path>source/spiralcraft
    </path>
    
    <resources>
      <URI>data/xml/XmlStore.java</URI>
      <URI>vfs/context/ContextResource.java</URI>
      <URI>vfs/context/ContextResourceMap.java</URI>
    </resources>
  </scm:Change>

  <scm:Change>
    <revision>0.4.4.1
    </revision>
    
    <authorId>miketoth
    </authorId>
    
    <date>2010-02-03
    </date>
    
    <notes>
    
      <scm:Note>Change XmlStore Subscriber whenX to only use absolute
        uris
      </scm:Note>
      <scm:Note>Suppress debug messages from XmlStore
      </scm:Note>
      <scm:Note>Default subscriber debug to false
      </scm:Note>
      <scm:Note>ParseXML has ignoreNull option to buffer input and return
        null if empty
      </scm:Note>
      <scm:Note>Enhance debugging for ContextResourceMap
      </scm:Note>
    </notes>
    
    <path>source/spiralcraft
    </path>
    
    <resources>
      <URI>data/sax/ParseXml.java</URI>
      <URI>data/xml/XmlStore.java</URI>
      <URI>data/xml/Subscriber.java</URI>
      <URI>vfs/context/ContextResource.java</URI>
      <URI>vfs/context/ContextResourceMap.java</URI>
    </resources>
  </scm:Change>

  <scm:Change>
    <revision>0.4.4
    </revision>
    
    <authorId>miketoth
    </authorId>
    
    <date>2010-02-03
    </date>
    
    <notes>
    
      <scm:Note>New XmlStore slave mode subscribes to a master
      </scm:Note>
      <scm:Note>Support for Java interface fascades backed by Tuples to
        facilitate Java programming against data Types.
      </scm:Note>
      <scm:Note>Achieved generalized XML object transport for both
        Java and data types.
      </scm:Note>
      <scm:Note>Redefine CollectionDecorator.add() to return the modified
        collection, allowing support for immutable collection implementations
        such as arrays.
      </scm:Note>
      <scm:Note>In spiralcraft.builder assembly definitions (.assy.xml files),
        provide better support for creating collections of primitives and
        other string-encodable objects by
        treating the text values of multiple property elements with the same 
        name into a collection of text values for the field.
      </scm:Note>
      <scm:Note>Initial implementation of JournalTuple, for  
        multiversion concurrency control.
      </scm:Note>
      <scm:Note>Initial implementation of StateScope, to manage transaction
        boundaries to track the running state of stateful functions.
      </scm:Note>

    </notes>
    
    <detail>
    
      <scm:Change>
        <notes>
          <scm:Note>New XmlStore master/slave capability provides remote
            replication
          </scm:Note>
          <scm:Note>XmlStore and XmlQueryable integrate with local 2PC
            transaction mechanism.
          </scm:Note>
          <scm:Note>XmlStore transactionalizes sequence allocation
          </scm:Note>
          <scm:Note>Transactions now properly support nesting levels PROPOGATE
            and ISOLATE, and provide sensible transaction id sequences 
            seeded with the system time. Transaction context is now maintained
            until all branches have completed, ensuring that completing 
            branches have access to the contextual Transaction id.
          </scm:Note>
          <scm:Note>Fetch task accepts an explicit queryable object in
            a new constructor (Queryable,Query)
          </scm:Note>
          <scm:Note>Achieved generalized XML object transport for both
            Java and data types.
          </scm:Note>
          <scm:Note>New XmlDataRenderer wraps DataWriter in a general
            purpose Renderer interface
          </scm:Note>
          <scm:Note>DataWriter can now write to a Writer and not just an
            OutputStream.
          </scm:Note>
          <scm:Note>ParseXml and QueryXml tasks now generate a Command
            result if the type property is defined.
          </scm:Note>
          <scm:Note>When using the "ref" attribute for aggregates, DataHandler
            upgrades the frame type to the actual type of the value read
            from the referenced resource. 
          </scm:Note>
          <scm:Note>AttributeBinding and underlying DictionaryBinding provide
             (name,Expression) constructor
          </scm:Note>
          <scm:Note>Space provides access to Stores by name
          </scm:Note>        
          <scm:Note>New CommandScheduler class to run Commands periodically.
            Required new Scheduler.cancel(Runnable) method for Lifecycle.
            contract.
          </scm:Note>
          <scm:Note>Better thread identification for Scheduler and Pool.
          </scm:Note>
          <scm:Note>A Scenario late-binds the command result reflector as it may
            be derived from something in the context. This is facilitated
            by GenericReflector providing ability to enhance using a 
            client-supplied ChannelFactory.
          </scm:Note>
          <scm:Note>Scenarios now all provide conditional execution using
            whenX.
          </scm:Note>
          <scm:Note>Scenarios bind the local context channel before bindImports
            to allow bindImports to be aware of the context Reflector. 
          </scm:Note>
          <scm:Note>New Eval Scenario allows for arbitrary Expression
            evaluation, puts result in chain context as well as returning.
          </scm:Note>          
          <scm:Note>"If" Scenario gets constructors, uses Binding instead of
            Expression.
          </scm:Note>
          <scm:Note>KeyedList provides a default constructor.
          </scm:Note>
          
        </notes>
      
        <path>source/spiralcraft
        </path>
        
        <resources>
          <URI>data/Space.java
          </URI>
          <URI>data/access/Store.java
          </URI>
          <URI>data/access/Snapshot.java
          </URI>
          <URI>data/spi/AbstractStore.java
          </URI>
          <URI>data/xml/XmlStore.java
          </URI>
          <URI>data/xml/XmlQueryable.java
          </URI>
          <URI>data/xml/Subscriber.assy.xml
          </URI>
          <URI>data/sax/AttributeBinding.java
          </URI>
          <URI>data/sax/DataHandler.java
          </URI>
          <URI>data/sax/DataWriter.java
          </URI>
          <URI>data/sax/ParseXml.java
          </URI>
          <URI>data/sax/QueryXml.java
          </URI>
          <URI>data/sax/XmlDataRenderer.java
          </URI>
          <URI>data/task/Fetch.java
          </URI>
          <URI>data/transaction/Transaction.java
          </URI>
          <URI>command/CommandScheduler.java
          </URI>
          <URI>lang/spi/GenericReflector.java
          </URI>
          <URI>task/Scenario.java
          </URI>
          <URI>task/TaskCommand.java
          </URI>
          <URI>task/If.java
          </URI>
          <URI>task/Eval.java
          </URI>
          <URI>time/Scheduler.java
          </URI>
          <URI>pool/ThreadPool.java
          </URI>
          <URI>util/KeyedList.java
          </URI>
        </resources>
      </scm:Change>

      <scm:Change>
        <notes>
          <scm:Note>Removed unnecessary generic type parameter
          </scm:Note>
        </notes>
      
        <path>source/spiralcraft
        </path>
        
        <resources>
          <URI>lang/spi/AbstractFunctorChannel.java
          </URI>
          <URI>command/CommandFunctorChannel.java
          </URI>
        </resources>
      </scm:Change>
      
      <scm:Change>
        <notes>
          <scm:Note>Support for Java interface fascades backed by Tuples to
            facilitate Java programming against data Types.
          </scm:Note>
          <scm:Note>Requires additional support for handling situations where
            "raw" DataComposite types are exposed by Java classes.
          </scm:Note>          
          <scm:Note>DataTypeModel allows for "data" scheme to disambiguate
            between Java class reflectors and the reflectors for their derived
            data Types- eg. "data:class:/mypkg/MyType"
          </scm:Note>
          <scm:Note>spiralcraft.lang name resolution no longer relies on
            URI.resolve(), because it doesn't work for "wrapper" schemes.
          </scm:Note>
          <scm:Note>TypeImpl.fromData() now passes through DataComposites if
            there is no associated native class. 
          </scm:Note>
          <scm:Note>TypeResolver.resolveSafeFromClass(Class) convenience method
            to provide a Type object from a fascade interface
          </scm:Note>
          <scm:Note>Indexable interface helps subscript and size Aggregates
            returned by Java code.
          </scm:Note>
          <scm:Note>BeanReflector supports new Indexable interface and "long"
            values as indexes.
          </scm:Note>
          <scm:Note>BeanReflector and MethodTranslator use java.lang.Object
            as collection component type when type parameter cannot be 
            interpreted.
          </scm:Note>
          <scm:Note>BufferAggregate.get() no longer throws DataException (to
            conform to Indexable interface)
          </scm:Note>
          <scm:Note>ArrayIndexChannel returns null instead of throwing an
            ArrayIndexOutOfBounds exception
          </scm:Note>
          <scm:Note>TranslatorChannel dumps signatures when resolve fails
          </scm:Note>
          <scm:Note>AggregateIndexTranslator and AggregateListDecorator 
            converts DataException to RuntimeException
          </scm:Note>
          <scm:Note>ReflectionType will create a TupleDelegate when asked
            to create a Java interface via the fromData() method.
          </scm:Note>
          <scm:Note>Proxy method mapping is incomplete.
          </scm:Note>
          <scm:Note>TupleDelegate is now more useful for constructing Java
            interface fascades backed by Tuples. TupleDelegate can now be 
            constructed with a client-supplied backing Tuple, and now has a getter
            to provide access to the backing Tuple. 
          </scm:Note>
          <scm:Note>More informative TypeMismatchException
          </scm:Note>
          <scm:Note>More informative exception when Focus subject is null
          </scm:Note>
          <scm:Note>AnyType.TYPE_URI
          </scm:Note>
          <scm:Note>Void.class is now treated as a wildcard parameter 
            like Void.TYPE when resolving methods in ClassUtilities. 
            MethodResolver exception enhanced.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/
        </path>
        
        <resources>
          <URI>data/Aggregate.java
          </URI>
          <URI>data/TypeMismatchException.java
          </URI>
          <URI>data/TypeResolver.java
          </URI>
          <URI>data/core/TypeImpl.java
          </URI>
          <URI>data/lang/TupleDelegate.java
          </URI>
          <URI>data/lang/AggregateReflector.java
          </URI>
          <URI>data/session/BufferAggregate.java
          </URI>
          <URI>data/reflect/ReflectionType.java
          </URI>
          <URI>data/types/standard/AnyType.java
          </URI>
          <URI>common/Indexable.java
          </URI>
          <URI>lang/reflect/BeanReflector.java
          </URI>
          <URI>lang/reflect/MethodTranslator.java
          </URI>
          <URI>lang/spi/ArrayIndexChannel.java
          </URI>
          <URI>lang/parser/Node.java
          </URI>
          <URI>util/lang/ClassUtilities.java
          </URI>
          <URI>util/lang/MethodResolver.java
          </URI>
        </resources>
      </scm:Change>
    
      <scm:Change>
        <notes>
          <scm:Note>In spiralcraft.builder assembly definitions (.assy.xml files),
            provide better support for creating collections of primitives and
            other string-encodable objects by
            treating the text values of multiple property elements with the same 
            name into a collection of text values for the field.
          </scm:Note>
          <scm:Note>This currently only works for properties defined in the
            same file. We still need to implement append/insert
            behavior for overridden properties.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/builder/
        </path>
        
        <resource>
          <URI>AssemblyClass.java
          </URI>
          <URI>PropertyBinding.java
          </URI>
          <URI>PropertySpecifier.java
          </URI>
        </resource>
      </scm:Change>
      
      
      <scm:Change>
        <notes>
          <scm:Note>Initial implementation of JournalTuple, for  
            multiversion concurrency control (incomplete).
          </scm:Note>
          <scm:Note>AbstractTuple and ArrayTuple provide
             for DeltaTuple construction chain
          </scm:Note>
          <scm:Note>Added getTransactionId() and getVersion() to JournalTuple
          </scm:Note>
          <scm:Note>DeltaTuple.getBaseExtent() returns covariant DeltaTuple.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/data/
        </path>
        
        <resource>
          <URI>DeltaTuple.java
          </URI>
          <URI>JournalTuple.java
          </URI>
          <URI>spi/AbstractTuple.java
          </URI>
          <URI>spi/ArrayTuple.java
          </URI>
          <URI>spi/ArrayDeltaTuple.java
          </URI>
          <URI>spi/ArrayJournalTuple.java
          </URI>
          <URI>session/BufferTuple.java
          </URI>
          <URI>lang/BoundTuple.java
          </URI>
        </resource>
      </scm:Change>
      
      
      
      <scm:Change>
        <notes>
          <scm:Note>Redefine CollectionDecorator.add() to return the modified
            collection, allowing support for immutable collection implementations
            such as arrays.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/
        </path>
        
        <resource>
          <URI>lang/CollectionDecorator.java
          </URI>
          <URI>lang/spi/ArrayListDecorator.java
          </URI>
          <URI>lang/spi/GenericCollectionDecorator.java
          </URI>
          <URI>lang/spi/GenericListDecorator.java
          </URI>
          <URI>lang/spi/ListRangeChannel.java
          </URI>
          <URI>lang/util/DictionaryBinding.java
          </URI>
          <URI>data/lang/AggregateReflector.java
          </URI>
        </resource>
      </scm:Change>
      
      <scm:Change>
        <notes>
          <scm:Note>Initial implementation of StateScope, to manage transaction
            boundaries to track the running state of stateful functions
            (incomplete)
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/lang/StateScope.java
        </path>

      </scm:Change>
      
      <scm:Change>
        <notes>
          <scm:Note>Misc lang/spi enhancements
          </scm:Note>
          <scm:Note>ThreadLocalChannel can incorporate its source with
            new no-arg push() method allowing generic Channel type to stay
            encapsulated. ClosureFocus now uses this method instead of
            rolling its own. 
          </scm:Note>
          <scm:Note>GenericReflector now has a single-arg constructor which
            allows the GenericReflector to adopt the same typeURI as its
            delegate, for the common cases where the GenericReflector instance 
            is not public.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/lang/spi
        </path>
        
        <resource>
          <URI>ClosureFocus.java
          </URI>
          <URI>ThreadLocalChannel.java
          </URI>
          <URI>GenericReflector.java
          </URI>
        </resource>
      </scm:Change>
    </detail>
  </scm:Change>

  <scm:Change>
    <revision>0.4.3
    </revision>
    
    <authorId>miketoth
    </authorId>
    
    <date>2010-01-24
    </date>
    
    <notes>
      <scm:Note>spiralcraft.security.auth Authentication system now provides
        generic mechanisms for communicating associations between 
        local accounts and contextual credentials managed by secondary
        providers.
      </scm:Note>
      <scm:Note>spiralcraft.data.reflect Types (ie. Java class bridge)
        now resolve AssemblyClass instances.
      </scm:Note>
      <scm:Note>spiralcraft.lang enhancements- multi-Expression subcontexts:
        expr{ expr1, expr2, exprReturn } and Expression literals: `expr`
      </scm:Note>
      <scm:Note>Enhance data tasks Edit and Fetch for use as Object Literal
        Functors.
      </scm:Note>
      <scm:Note>Simplify resolution of DataSession channels 
      </scm:Note>
      <scm:Note>TaskMethod implementation of data Method provides the option to
        execute the command and return the result, which will be the
        default case whenever returnType is specified.
      </scm:Note>
      <scm:Note>Moved spiralcraft.task.Session to spiralcraft.data.task.Session
        because that's where all the other spiralcraft.data specific tasks are.
      </scm:Note>
      <scm:Note>Misc fixes
      </scm:Note>
    </notes>
    
    <detail>
      <scm:Change>
        <notes>
          <scm:Note>Add methods to bean signature list
          </scm:Note>
          <scm:Note>Signature now prints method parameters cleanly
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/lang/
        </path>
        
        <resource>
          <URI>Signature.java
          </URI>
          <URI>reflect/BeanReflector.java
          </URI>
        </resource>
      </scm:Change>

      <scm:Change>
        <notes>
          <scm:Note>Moved spiralcraft.task.Session to
            spiralcraft.data.task.Session because that's where all the other
            spiralcraft.data specific tasks are.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/
        </path>
        
        <resources>
          <URI>task/Session.java
          </URI>
          <URI>data/task/Session.java
          </URI>
        </resources>
      </scm:Change>
      
      <scm:Change>
        <notes>
          <scm:Note>Fix bug when saving outside of a transaction context
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/data/session/BufferTuple.java
        </path>
      </scm:Change>

      <scm:Change>
        <notes>
          <scm:Note>Simplify resolution of DataSession channels
          </scm:Note>
          <scm:Note>Static method DataSession.findChannel to look in Focus 
            chain and extract the channel that provides the DataSession.
          </scm:Note>
          <scm:Note>TupleConstructorChannel.java now creates buffers as long
            as there is a DataSession in context.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/data/
        </path>
        
        <resources>
          <URI>session/BufferChannel.java
          </URI>
          <URI>session/DataSession.java
          </URI>
          <URI>rest/RestService.java
          </URI>
          <URI>lang/TupleConstructorChannel.java
          </URI>
          <URI>editor/EditorBase.java
          </URI>
          
        </resources>
      </scm:Change>

      <scm:Change>
        <notes>
          <scm:Note>Enhance data tasks Edit and Fetch and Selection query for
            use as Object Literal Functors.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/data/
        </path>
        
        <resources>
          <URI>task/Edit.java
          </URI>
          <URI>task/Fetch.java
          </URI>
          <URI>query/Selection.java
          </URI>
        </resources>
      </scm:Change>
      
      <scm:Change>
        <notes>
          <scm:Note>spiralcraft.security.auth Authentication system now provides
            generic mechanisms for communicating associations between 
            local accounts and contextual credentials managed by secondary
            providers.
          </scm:Note>
          <scm:Note>Added methods AuthSession.associateLogin(String moduleName)
            and AuthSession.getAccountId() and AuthModule.Session
            counterparts and implementations.
          </scm:Note>
          <scm:Note>DataAuthModule now creates a DataSession for use by
            data manipulation objects during credential management
            transactions (ie. associateLogin()). This required making
            DataSession.setFocus() public.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/
        </path>
        
        <resources>
          <URI>security/auth/AuthModule.java
          </URI>
          <URI>security/auth/AuthSession.java
          </URI>
          <URI>security/spi/DataAuthModule.java
          </URI>
          <URI>data/session/DataSession.java
          </URI>
        </resources>
      
      </scm:Change>
      
      <scm:Change>
        <notes>
          <scm:Note>Fix bug reconstructing URI in URIUtil.replaceRawQuery()
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/util/URIUtil.java
        </path>
      </scm:Change>
    
      <scm:Change>
        <notes>
          <scm:Note>Enforce requirement that Functors be referenced from constant
            Channels to preserve the integrity of the Channel graph.
          </scm:Note>
          <scm:Note>ThreadLocalChannel keeps stack trace of initializer chain to
            assist in resolving context when encountering 
            "ThreadLocal not initialized".
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/lang/
        </path>
        
        <resources>
          <URI>reflect/BeanReflector.java
          </URI>
          <URI>spi/ThreadLocalChannel.java
          </URI>
        </resources>
      </scm:Change>
      
      <scm:Change>
        <notes>
          <scm:Note>Fixed error where two XmlStore transactions
           occurring in the same millisecond would try to use the same
             temporary filename, resulting in a failure. Added a sequential
            differentiator to the filename. 
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/data/xml/XmlQueryable.java
        </path>
      </scm:Change>
      
      <scm:Change>
        <notes>
          <scm:Note>spiralcraft.lang enhancements- multi-Expression subcontexts:
            expr{ expr1, expr2, exprReturn } and Expression literals: `expr`
          </scm:Note>
          <scm:Note>multi-Expression subcontexts allow multiple expressions in
            a subcontext block and evaluate to the value of the last expression
            in the block. 
          </scm:Note>
          <scm:Note>If the source of a subcontext block is a FocusChannel, as 
            is the case
            when an ObjectLiteralNode is a FocusChainObject, the subcontext
            will bind to the Focus from the FocusChannel. 
          </scm:Note>
          <scm:Note>Expression literals allow for the creation of in-line
             Expressions which can be passed as objects to components which
             accept Expressions for internal binding. For example
             [*query:Selection{[@myns:MyType].type,`.fooValue>=25`}] will pass the
             unbound Expression `.fooValue>=25` to the second argument of
             the constructor spiralcraft.data.query.Selection(Type,Expression),
             where Selection can bind it into the query context or convert it
             to an optimized representation.
          </scm:Note>
          <scm:Note>ObjectLiteralNode now publishes a FocusChannel to provide
            context to to downstream expressions capable of processing this
            construct.  
          </scm:Note>
          
        </notes>
                
        <path>source/spiralcraft/lang/
        </path>
        
        <resources>
          <URI>parser/ExpressionParser.java
          </URI>
          <URI>parser/Node.java
          </URI>
          <URI>parser/LiteralNode.java
          </URI>
          <URI>parser/SubcontextNode.java
          </URI>
          <URI>parser/ExpressionLiteralNode.java
          </URI>
          <URI>parser/ObjectLiteralNode.java
          </URI>
          <URI>spi/FocusChannel.java
          </URI>
        </resources>
      
      
      </scm:Change>

      <scm:Change>
        <notes>
          <scm:Note>spiralcraft.data.reflect Types (ie. Java class bridge)
            now resolve AssemblyClass instances via the AssemblyType class.
          </scm:Note>
          <scm:Note>ReflectionTypeFactory now tries to load a builder assembly
            for the specified type URI and creates an AssemblyType in
            appropriate situations.
          </scm:Note>
          <scm:Note>ReflectionType.isAssignableFrom() now accepts AssemblyTypes
          </scm:Note>
          <scm:Note>XmlBean now uses Type.fromData() to construct object, if
            applicable.
          </scm:Note>
          <scm:Note>spiralcraft.builder.Managable tags POJOs for inclusion in
            this mechanism if no [classname].assy.xml exists for the type.
          </scm:Note>
          <scm:Note>New method AssemblyLoader.isAssemblyClass(URI) to
            query whether given URI represents an AssemblyClass
          </scm:Note>
          <scm:Note>PropertySpecifier now applies contextual namespace 
            PrefixResolver to injector expressions
          </scm:Note>
          <scm:Note>BuilderScheme fixed to recognize AssemblyType as a
            ReflectionType equivalent.
          </scm:Note>
          <scm:Note>URIUtil now has addSuffixToPath(URI uri,String rawSuffix)
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/
        </path>
        
        <resources>
          <URI>builder/Managable.java
          </URI>
          <URI>builder/AssemblyLoader.java
          </URI>
          <URI>builder/PropertySpecifier.java
          </URI>
          <URI>data/builder/BuilderScheme.java
          </URI>
          <URI>data/persist/XmlBean.java
          </URI>
          <URI>data/reflect/AssemblyType.java
          </URI>
          <URI>data/reflect/ReflectionTypeFactory.java
          </URI>
          <URI>data/reflect/ReflectionType.java
          </URI>
          <URI>util/URIUtil.java
          </URI>
        </resources>
      </scm:Change>

      <scm:Change>
        <notes>
          <scm:Note>Fixed NPE when no modules configured
          </scm:Note>
        </notes>
        
        <path>/source/spiralcraft/security/auth/AuthSession.java
        </path>
      </scm:Change>

    </detail>
  </scm:Change>    

  <scm:Change>
    <revision>0.4.2.2
    </revision>
    
    <authorId>miketoth
    </authorId>
    
    <date>2010-01-19
    </date>
    
    <notes>
      <scm:Note>Refactored spiralcraft.security.auth package to support
        multiple authentication modules.
      </scm:Note>
      <scm:Note>Added a Join query and backing functionality
      </scm:Note>
      <scm:Note>Added a Projection query and backing functionality
      </scm:Note>
      <scm:Note>The spiralcraft.data.task.Fetch task now returns a result,
        making it useful as a Functor in an expression and permitting
        in-line queries in Expressions.
      </scm:Note>
      <scm:Note>Misc fixes
      </scm:Note>
    </notes>
    
    <detail>

      <scm:Change>
        <notes>
          <scm:Note>Refactored spiralcraft.security.auth package to support
          multiple authentication modules.
          </scm:Note>
        
          <scm:Note>Authenticator and AuthSession are now concrete classes that
            are fully functional on their own. 
          </scm:Note>
          <scm:Note>The functionality previously in DataAuthenticator has been
            abstracted into a a DataAuthModule and a PasswordDataAuthModule.
            DataAuthenticator is now deprecated, and will probably disappear
            in the 0.5 series. 
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/security/
        </path>
        
        <resources>
          <URI>auth/Authenticator.java
          </URI>
          <URI>auth/AuthModule.java
          </URI>
          <URI>auth/AuthSession.java
          </URI>
          <URI>auth/TestAuthenticator.java
          </URI>
          <URI>spi/AbstractAuthModule.java
          </URI>
          <URI>spi/DataAuthenticator.java
          </URI>
          <URI>spi/DataAuthModule.java
          </URI>
          <URI>spi/PasswordDataAuthModule.java
          </URI>
        </resources>
      </scm:Change>

      <scm:Change>
        <notes>
          <scm:Note>The spiralcraft.data.task.Fetch task now returns a 
           result.
          </scm:Note>
        </notes>

        
        <path>/source/spiralcraft/data/task/Fetch.java
        </path>
      </scm:Change>

      <scm:Change>
        <notes>
          <scm:Note>Added a Projection query
          </scm:Note>
        </notes>

        
        <path>/source/spiralcraft/data/query/Projection.java
        </path>
      
      </scm:Change>
      
      
      <scm:Change>
        <notes>
          <scm:Note>Added a Join query
          </scm:Note>
        </notes>
        
        <path>/source/spiralcraft/data/query/Join.java
        </path>
      
      </scm:Change>
      
      <scm:Change>
        <notes>
          <scm:Note>Allow setting of debugLevel on BoundQuery
          </scm:Note>
        </notes>
        
        <path>/source/spiralcraft/data/query/BoundQuery.java
        </path>
      
      </scm:Change>
      
      <scm:Change>
        <notes>
          <scm:Note>Remove named parameters (BindingChannel instances) from 
            member signature debug message.
          </scm:Note>
        </notes>

        <path>/source/spiralcraft/lang/spi/AbstractChannel.java
        </path>
      
      </scm:Change>

      <scm:Change>
        <notes>
          <scm:Note>Fixed cast exception- chain property can be any Scenario, not
            just a Chain.
          </scm:Note>
        </notes>
        
        <path>/source/spiralcraft/task/Reference.java
        </path>
      
      </scm:Change>

    </detail>
  </scm:Change>    

  <scm:Change>
    <revision>0.4.2.1
    </revision>
    
    <authorId>miketoth
    </authorId>
    
    <date>2010-01-17
    </date>
    
    <notes>
      <scm:Note>Minor fixes and enhancements
      </scm:Note>
    </notes>
    
    <detail>

      <scm:Change>
        <notes>
          <scm:Note>Removed debugging messages
          </scm:Note>
        </notes>
        
        <path>/source/spiralcraft/lang/parser/ObjectLiteralNode.java
        </path>
      
      </scm:Change>
      
      <scm:Change>
        <notes>
          <scm:Note>Use context substitution for value of "ref" attribute
            to enable customization of resource location.
          </scm:Note>
        </notes>
        
        <path>/source/spiralcraft/data/sax/DataHandler.java
        </path>
      
      </scm:Change>
      
      <scm:Change>
        <notes>
          <scm:Note>Assert parameters for @tune and @log to fix NPE
          </scm:Note>
        </notes>
        
        <path>/source/spiralcraft/lang/spi/AbstractReflector.java
        </path>
      
      </scm:Change>

    </detail>
  </scm:Change>    

  <scm:Change>
    <revision>0.4.2
    </revision>
    
    <authorId>miketoth
    </authorId>
    
    <date>2010-01-13
    </date>
    
    <notes>
      <scm:Note>Completed bulk of enhancements related to integrating granular
      RPC based APIs- eg. Facebook, cloud APIs. 
      </scm:Note>
    </notes>
    
    <detail>
      <scm:Change>
      
        <date>2010-01-13
        </date>
        
        <notes>
          <scm:Note>Provided isContext(Channel) method in Focus to help
            ChannelFactories determine whether to chain the supplied Focus or
            use the existing Focus.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/
        </path>
        
        <resources>
          <URI>data/core/CalculatedFieldImpl.java
          </URI>
          <URI>data/core/KeyField.java
          </URI>
          <URI>data/core/ProjectionImpl.java
          </URI>
          <URI>data/core/QueryField.java
          </URI>
          <URI>data/core/TaskMethod.java
          </URI>
          <URI>lang/BaseFocus.java
          </URI>
          <URI>lang/Focus.java
          </URI>
          <URI>lang/FocusWrapper.java
          </URI>
          <URI>rules/ExpressionRule.java
          </URI>
        </resources>
        
      </scm:Change>

      <scm:Change>
      
        <date>2010-01-13
        </date>
        
        <notes>
          <scm:Note>Further clarification of ChannelFactory and Functor
            interfaces. 
          </scm:Note>
          <scm:Note>ChannelFactory interface re-established as a simple
            interface to extend Channel graphs. Most code that used the new
            Functor interface has been reverted back to using the no-longer
            deprecated ChannelFactory. The new ChannelFactory accepts a source
            channel and parameter expressions for maximum utility.
            
          </scm:Note>
          <scm:Note>Functor interface redefined to not accept a "source" 
            Channel, and to accept a set of bound channels as parameters.
            A Functor is expected to have a reference to its context (if any)
            at the time the Functor.bindChannel() is called (possibly
            repeatedly). By definition, the "source" of a Functor from
            the perspective of the channel graph would always be itself anyway.  
          </scm:Note>
          <scm:Note>GenericReflector simplified by use of ChannelFactory
            instead of Functor to enhance return types of base members.
          </scm:Note>          
        </notes>
        
        <path>source/spiralcraft/
        </path>
        
        <resources>
          <URI>lang/ChannelFactory.java
          </URI>
          <URI>lang/Functor.java
          </URI>
          <URI>lang/spi/GenericReflector.java
          </URI>
          <URI>data/Constraint.java
          </URI>
          <URI>data/Field.java
          </URI>
          <URI>data/Projection.java
          </URI>
          <URI>text/Translator.java
          </URI>
        </resources>
        
      </scm:Change>
    
      <scm:Change>
      
        <date>2010-01-13
        </date>
        
        <notes>
          <scm:Note>New language constructs
          </scm:Note>
          <scm:Note>Object literals: "[*myns:MyObj]",
            [*myns:MyObj{param1 , param2 , ... }] instantiate a constant
            reference to an object or to a channel provided by a 
            ChannelFactory. 
            If the object is a FocusChainObject it will be bound
            into the chain.
          </scm:Note>
          <scm:Note>Functors (callable objects): "myFunctorExpr.()",
            "myFunctorExpr.(param1, param2, ...)" provides a way to pass
            contextually defined functions around where they may be invoked
            against parameters that come from a different context via
            anonymous methods.
          </scm:Note>
          <scm:Note>"publish-as-URI" construct is now [#qname], changed from
            [*qname] because natural semantics match up better- ie. Names can be
            "hashed" into directories, and the "star" symbol is typically
            associated with "newing" things.
          </scm:Note>
          <scm:Note>Permit named parameters for all method calls.
          </scm:Note>
          <scm:Note>TypeModel consolidates cross-model search functionality
            into static method. 
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/
        </path>
        
        <resources>
          <URI>lang/TypeModel.java
          </URI>
          <URI>lang/parser/ExpressionParser.java
          </URI>
          <URI>lang/parser/TypeFocusNode.java
          </URI>
          <URI>lang/parser/TupleNode.java
          </URI>
          <URI>lang/parser/MethodCallNode.java
          </URI>
          <URI>lang/parser/ObjectLiteralNode.java
          </URI>
          <URI>lang/spi/AbstractFunctorChannel.java
          </URI>
          
        
        </resources>
      </scm:Change>

      <scm:Change>
      
        <date>2010-01-13
        </date>
        
        <notes>
          <scm:Note>CommandFactory now extends Functor. All CommandFactory
            instances can now be referenced from spiralcraft.lang as Functors,
            permitting the direct referencing of Task Scenarios from 
            expressions.
          </scm:Note>
          <scm:Note>Commands must now implement the setContext() method, even 
            if they choose to disallow this operation, as it is required for
            compilation of client code.
          </scm:Note>
          <scm:Note>CommandFactory.getCommandReflector() is now public
          </scm:Note>
          <scm:Note>Scenario now defines a bindImports method to allow 
            subclasses to operate on incoming data and augment both the
            internal and external Focus chain.
          </scm:Note>
          <scm:Note>TaskCommand now exposes an "error" property to allow 
            Scenario task implementations to register an expected error state,
            ie. not an exception. Also, result passing is now enabled through
            Scenario.storeResults. TaskCommand.collectResults now indicates
            that the command should accumulate task results in a collection.
          </scm:Note>
          <scm:Note>Chain scenario now requires addChainResult=true to 
            call ChainTask.addResult() with the completed chain command 
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/
        </path>
        
        <resources>
          <URI>command/AbstractCommandFactory.java
          </URI>
          <URI>command/Command.java
          </URI>
          <URI>command/CommandFactory.java
          </URI>
          <URI>command/CommandFunctorChannel.java
          </URI>
          <URI>task/Scenario.java
          </URI>
          <URI>task/TaskCommand.java
          </URI>
          <URI>task/Batch.java
          </URI>
          <URI>task/Chain.java
          </URI>
          <URI>data/sax/QueryXml.java
          </URI>
        </resources>
      </scm:Change>

      <scm:Change>
      
        <date>2010-01-13
        </date>
        
        <notes>
          <scm:Note>Reflectors are Functor aware via the isFunctor() method,
            which is used by client components to ensure that anonymous
            methods can be invoked.
          </scm:Note>
          <scm:Note>Reflectors which are themselves Functors provide 
            constructor access via the Functor mechanism.
          </scm:Note>
          <scm:Note>Various support components provide object construction
            and property binding services referenced by Functor method
            code.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/
        </path>
        
        <resources>
          <URI>lang/Reflector.java
          </URI>
          <URI>lang/reflect/BeanReflector.java
          </URI>
          <URI>lang/reflect/ConstructorChannel.java
          </URI>
          <URI>lang/reflect/MethodTranslator.java
          </URI>
          <URI>lang/spi/AbstractReflector.java
          </URI>
          <URI>lang/spi/GatherChannel.java
          </URI>
          <URI>data/lang/TupleConstructorChannel.java
          </URI>
          <URI>data/lang/TupleReflector.java
          </URI>
          
        </resources>
      </scm:Change>
      
      <scm:Change>
      
        <date>2010-01-13
        </date>
        
        <notes>
          <scm:Note>Renamed PrimaryIdentifierNode to ContextIdentifierNode to
            provide better clarity as to purpose.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/
        </path>
        
        <resources>
          <URI>data/query/Selection.java
          </URI>
          <URI>lang/parser/ContextIdentifierNode.java
          </URI>
          <URI>lang/parser/PrimaryIdentifierNode.java
          </URI>
          <URI>lang/parser/ExpressionParser.java
          </URI>
        </resources>
      </scm:Change>

      <scm:Change>
      
        <date>2010-01-13
        </date>
        
        <notes>
          <scm:Note>More infrastructure support for the use of Binding objects
            in lieu of expressions to simplify spiralcraft.lang client code.
          </scm:Note>
          <scm:Note>Use of Binding objects allow spiralcraft.lang clients to
            accept dynamic arguments via a pre-bound Binding object supplied
            to a bean setter. 
          </scm:Note>
          <scm:Note>Binding is now mapped from a data Type to support 
            externalization of Bindings in the same manner of Expressions 
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/
        </path>
        
        <resources>
          <URI>lang/spi/BindingChannel.java
          </URI>
          <URI>data/reflect/ReflectionType.java
          </URI>
          <URI>data/types/standard/BindingType.java
          </URI>
          <URI>task/Debug.java
          </URI>
          <URI>task/Debug.java
          </URI>
        </resources>
      </scm:Change>
      
      <scm:Change>
      
        <date>2010-01-13
        </date>
        
        <notes>
          <scm:Note>Make sure Expression text is reconstructed if no text is
            provided on construction.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/lang/Expression.java
        </path>
      </scm:Change>

      <scm:Change>
      
        <date>2010-01-13
        </date>
        
        <notes>
          <scm:Note>New "debugFormat(char)" method prints the text and numeric
            value of a character to assist in debugging character related
            issues.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/util/string/StringUtil.java
        </path>
      </scm:Change>

      <scm:Change>
      
        <date>2010-01-13
        </date>
        
        <notes>
          <scm:Note>Made ParsePosition object in LookaheadParseContext and
            PushbackParserContext final to ensure that references will be
            valid for the lifetime of the parse operation.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/text/
        </path>
        
        <resources>
          <URI>LookaheadParserContext.java
          </URI>
          <URI>PushbackParserContext.java
          </URI>
        </resources>
      </scm:Change>

    </detail>
  </scm:Change>
  
  <scm:Change>
    <revision>0.4.1
    </revision>
    
    <authorId>miketoth
    </authorId>
    
    <date>2010-01-05
    </date>
    
    <notes>
      <scm:Note>Many enhancements related to integrating granular RPC 
        based APIs- eg. Facebook, cloud APIs. 
      </scm:Note>
    </notes>
    
    <detail>
      <scm:Change>
        <date>2009-12-31
        </date>
        
        <notes>
          <scm:Note>New Binding class unifies Expression and Channel to
            make it easier to accept Expression based properties. 
          </scm:Note>
          
        </notes>
        
        <path>source/spiralcraft/lang/</path>
        
        <resources>
          <URI>Binding.java
          </URI>
          <URI>ParseXml.java
          </URI>
        </resources>
        
      </scm:Change>
          
      <scm:Change>
        <date>2009-12-31
        </date>
        
        <notes>
          <scm:Note>XML "rest" pipeline enhancements  
          </scm:Note>
          <scm:Note>Granularize XML data processing component binding to
            allow subclasses to export the command context to internals
            and children and provide an application specific query string
          </scm:Note>
          <scm:Note>Enhance DictionaryBinding so that the get() and multiGet()
            methods will both return a meaningful value as long as the
            appropriate converters are set. Provide information re. 
            binding cardinality.
          </scm:Note>

          
        </notes>
        
        <path>source/spiralcraft/</path>
        <resources>
          <URI>data/sax/ParseXml.java
          </URI>
          <URI>data/sax/QueryXml.java
          </URI>
          <URI>lang/util/DictionaryBinding.java
          </URI>
        </resources>
        
      </scm:Change>
      
      <scm:Change>
        <date>2009-12-27
        </date>
        
        <notes>
          <scm:Note>Remove duplicate code between UncheckedCastChannel
            and AspectChannel by converting all uses to AspectChannel.
          </scm:Note>
          <scm:Note>Move AssignmentChannel to lang.spi for easier use by
            client code.
          </scm:Note>
          
          <path>source/spiralcraft/</path>
          
          <resources>
            <URI>data/core/FieldImpl.java
            </URI>
            <URI>lang/spi/UncheckedCastChannel.java
            </URI>
            <URI>lang/Assignment.java
            </URI>
            <URI>lang/parser/AssignmentNode.java
            </URI>
            <URI>lang/parser/AssignmentChannel.java
            </URI>
          </resources>
          
        </notes>
      </scm:Change>

      <scm:Change>
        <date>2009-12-27
        </date>
        
        <notes>
          <scm:Note>Made command input context accessible
          </scm:Note>
          <scm:Note>Provide a means for enhancing Reflectors with additional
            type information
          </scm:Note>
          <scm:Note>Enabled parameterization of TaskMethods in spiralcraft.data
          </scm:Note>
          <scm:Note>Implemented named parameters for TaskMethods.
          </scm:Note>
          <scm:Note>Data methods expose Signatures for parameter matching and
            debugging
          </scm:Note>
          <scm:Note>Task infrastructure enhanced to manage Command context and
            result.
          </scm:Note>
          <scm:Note>BeanReflector now allows primitives to be
            assigned to their boxed equivalents.
          </scm:Note>
          <scm:Note>Signature added to AbstractChannel.resolve() exception 
          </scm:Note>
          
          
          <path>source/spiralcraft/</path>
          
          <resources>
            <URI>command/AbstractCommandFactory.java
            </URI>
            <URI>command/CommandFactory.java
            </URI>
            <URI>lang/Reflectable.java
            </URI>
            <URI>lang/Signature.java
            </URI>
            <URI>lang/parser/BindingNode.java
            </URI>
            <URI>lang/parser/ExpressionParser.java
            </URI>
            <URI>lang/parser/Node.java
            </URI>
            <URI>lang/parser/TupleField.java
            </URI>
            <URI>lang/parser/TupleNode.java
            </URI>
            <URI>lang/spi/AbstractChannel.java
            </URI>
            <URI>lang/spi/AbstractReflector.java
            </URI>
            <URI>lang/spi/BindingChannel.java
            </URI>
            <URI>lang/spi/ProxyReflector.java
            </URI>
            <URI>lang/spi/GenericReflector.java
            </URI>
            <URI>lang/reflect/BeanReflector.java
            </URI>
            <URI>service/Daemon.java
            </URI>
            <URI>task/Batch.java
            </URI>
            <URI>task/Chain.java
            </URI>
            <URI>task/Debug.java
            </URI>
            <URI>task/Exec.java
            </URI>
            <URI>task/Scenario.java
            </URI>
            <URI>task/TaskCommand.java
            </URI>
            <URI>ui/StepControl.java
            </URI>
            <URI>data/Method.java
            </URI>
            <URI>data/core/MethodImpl.java
            </URI>
            <URI>data/lang/TupleReflector.java
            </URI>
          </resources>
          
        </notes>
      </scm:Change>

      <scm:Change>
        <date>2009-12-26
        </date>
        
        <notes>
          <scm:Note>Warnings cleanup
          </scm:Note>
          
          
          <path>source/spiralcraft/task/Batch.java</path>
          
        </notes>
      </scm:Change>

      <scm:Change>
        <date>2009-12-26
        </date>
        
        <notes>
          <scm:Note>Make it easier for components to use namespace mappings
            from XML, Builder, WebUI and other DI/IOC containers.
          </scm:Note>
          
          <scm:Note>Refactored the Namespace resolution mechanism to add
            thread-context based prefix mappings checked at object
            construction time. This applies to Namespace-aware objects 
            constructed directly or indirectly within the context of a 
            Namespace-aware container, and accounts for the major use case.
          </scm:Note>
          
          <scm:Note>The Expression AST traversal "copy" mechanism, which
            resolves unresolved namespace prefixes at a post-construction
            point in time, has been made more efficient to ensure that a 
            copy of an Expression is only used when the copy is not
            identical to the original instance.
          </scm:Note>

          <scm:Note>The Namespace mechanism has been moved to its own 
            common package spiralcraft.common.Namespace. An empty string
            is used to represent the "default" prefix mapping, instead of
            requiring an extra method.
          </scm:Note>
          
          <path>source/spiralcraft/</path>
          
          <resource>
            <URI>builder/PropertyBinding.java
            </URI>
            <URI>builder/PropertySpecifier.java
            </URI>
            <URI>common/NamespaceResolver.java
            </URI>
            <URI>common/namespace/NamespaceContext.java
            </URI>
            <URI>common/namespace/PrefixResolver.java
            </URI>
            <URI>data/access/Updater.java
            </URI>
            <URI>data/sax/AbstractFrameHandler.java
            </URI>
            <URI>data/sax/DataHandlerBase.java
            </URI>
            <URI>data/sax/FrameHandler.java
            </URI>
            <URI>data/sax/RecursiveFrame.java
            </URI>
            <URI>lang/BaseFocus.java
            </URI>
            <URI>lang/Expression.java
            </URI>
            <URI>lang/Focus.java
            </URI>
            <URI>lang/FocusWrapper.java
            </URI>
            <URI>lang/NamespaceFocus.java
            </URI>
            <URI>lang/SimpleFocus.java
            </URI>
            <URI>lang/parser/AbsoluteFocusNode.java
            </URI>
            <URI>lang/parser/AggregateProjectNode.java
            </URI>
            <URI>lang/parser/AssignmentNode.java
            </URI>
            <URI>lang/parser/ConditionalNode.java
            </URI>
            <URI>lang/parser/ContainsNode.java
            </URI>
            <URI>lang/parser/ContextNode.java
            </URI>
            <URI>lang/parser/EqualityNode.java
            </URI>
            <URI>lang/parser/ExclusiveOrNode.java
            </URI>
            <URI>lang/parser/ListNode.java
            </URI>
            <URI>lang/parser/LiteralNode.java
            </URI>
            <URI>lang/parser/LogicalAndNode.java
            </URI>
            <URI>lang/parser/LogicalNegateNode.java
            </URI>
            <URI>lang/parser/LogicalNode.java
            </URI>
            <URI>lang/parser/LogicalOrNode.java
            </URI>
            <URI>lang/parser/MethodCallNode.java
            </URI>
            <URI>lang/parser/Node.java
            </URI>
            <URI>lang/parser/NumericNegateNode.java
            </URI>
            <URI>lang/parser/NumericOpNode.java
            </URI>
            <URI>lang/parser/OpNode.java
            </URI>
            <URI>lang/parser/ParentFocusNode.java
            </URI>
            <URI>lang/parser/PrimaryIdentifierNode.java
            </URI>
            <URI>lang/parser/RangeNode.java
            </URI>
            <URI>lang/parser/RelationalNode.java
            </URI>
            <URI>lang/parser/ResolveNode.java
            </URI>
            <URI>lang/parser/SubcontextNode.java
            </URI>
            <URI>lang/parser/SubscriptNode.java
            </URI>
            <URI>lang/parser/SyntaxNode.java
            </URI>
            <URI>lang/parser/TupleField.java
            </URI>
            <URI>lang/parser/TupleNode.java
            </URI>
            <URI>lang/parser/TypeFocusNode.java
            </URI>
            <URI>sax/Node.java
            </URI>
            <URI>sax/ParseTree.java
            </URI>
            <URI>sax/PrefixResolver.java
            </URI>
            <URI>sax/SaxPrefixResolver.java
            </URI>
          </resource>
          
        </notes>

      </scm:Change>
    </detail>
  </scm:Change>
        

  <scm:Change>
    <revision>0.4.0
    </revision>
    
    <authorId>miketoth
    </authorId>
    
    <date>2009-12-15
    </date>
    
    <notes>
      <scm:Note>Many enhancements related to integrating granular RPC 
        based APIs- eg. Facebook, cloud APIs. Interim release contains
        partial implementation of new features.
      </scm:Note>
    </notes>
    
    <detail>

      <scm:Change>
        <date>2009-12-15
        </date>
        
        <notes>
          <scm:Note>Buffer provides a touch() method to make it dirty.
          </scm:Note>
          
          <path>source/spiralcraft/data/session</path>
          
          <resource>
            <URI>Buffer.java
            </URI>
            <URI>BufferAggregater.java
            </URI>
            <URI>BufferTuple.java
            </URI>
          </resource>
          
        </notes>

      </scm:Change>

      <scm:Change>
        <date>2009-12-14
        </date>
        
        <notes>
          <scm:Note>Default namespaces are mapped to the empty string instead
            of "default" to match the SAX API spec.
          </scm:Note>
          <scm:Note>AbstractFrameHandler.transformNamespace is no longer static
            and can generate debug messages.
          </scm:Note>
          
          <path>source/spiralcraft</path>
          
          <resource>
            <URI>data/sax/DataHandlerBase.java</URI>
          </resource>
          
        </notes>

      </scm:Change>
      
      <scm:Change>
        <date>2009-12-14
        </date>
        
        <notes>
          <scm:Note>Functor replaces ChannelFactory as general purpose 
            mechanism to extend Channel graphs. ChannelFactory is now
            deprecated, and all implementers now implement Functor instead.
          </scm:Note>
          
          <scm:Note>Reflector is now an interface to facilitate wrapping and
            proxying. Implementation classes now extend AbstractReflector.
          </scm:Note>
          
          
        </notes>
      
        <resource>
          <URI>lang/Functor.java</URI>
          <URI>lang/ChannelFactory.java</URI>
          <URI>lang/Reflector.java</URI>
          <URI>lang/StaticFocus.java</URI>
          <URI>lang/parser/TupleNode.java</URI>
          <URI>lang/reflect/ArrayReflector.java</URI>
          <URI>lang/reflect/BeanReflector.java</URI>
          <URI>lang/spi/AbstractReflector.java</URI>
          <URI>lang/spi/ExtendedReflector.java</URI>
          <URI>lang/spi/NamespaceReflector.java</URI>
          <URI>lang/spi/VoidReflector.java</URI>
          <URI>security/auth/CredentialSetChannel.java</URI>
          <URI>data/Constraint.java</URI>
          <URI>data/Field.java</URI>
          <URI>data/Projection.java</URI>
          <URI>data/access/DataSynchronizer.java</URI>
          <URI>data/core/CalculatedFieldImpl.java</URI>
          <URI>data/core/CursorField.java</URI>
          <URI>data/core/FieldImpl.java</URI>
          <URI>data/core/KeyField.java</URI>
          <URI>data/core/ProjectionImpl.java</URI>
          <URI>data/core/QueryField.java</URI>
          <URI>data/core/RequiredRule.java</URI>
          <URI>data/core/TaskMethod.java</URI>
          <URI>data/core/UniqueRule.java</URI>
          <URI>data/lang/DataReflector.java</URI>
          <URI>data/lang/TupleReflector.java</URI>
          <URI>data/query/Distinct.java</URI>
          <URI>data/sax/TupleFrame.java</URI>
          <URI>data/session/BufferField.java</URI>
          <URI>data/spi/DataKeyFunction.java</URI>
          <URI>data/types/standard/StringType.java</URI>
          <URI>text/translator/Clip.java</URI>
          <URI>text/translator/Translator.java</URI>
          <URI>rules/Rule.java</URI>
          <URI>rules/ExpressionRule.java</URI>
          <URI>rules/PatternRule.java</URI>
          <URI>rules/Inspector.java</URI>
          
           
        </resource>
      </scm:Change>
      
      
      <scm:Change>
        <date>2009-12-14
        </date>
        
        <notes>
          <scm:Note>Scenario and TaskCommand now have type parameters
            reflecting command API changes. All Scenario
            implementations are updated.
          </scm:Note>        
        </notes>
        
        <path>source/spiralcraft
        </path>
        
        <resources>
          <URI>task/AbstractTask.java</URI>
          <URI>task/Assign.java</URI>
          <URI>task/Batch.java</URI>
          <URI>task/Chain.java</URI>
          <URI>task/Debug.java</URI>
          <URI>task/Exec.java</URI>
          <URI>task/If.java</URI>
          <URI>task/Reference.java</URI>
          <URI>task/Scenario.java</URI>
          <URI>task/Sequence.java</URI>
          <URI>task/Session.java</URI>
          <URI>task/TaskCommand.java</URI>
          <URI>task/TaskRunner.java</URI>
          <URI>task/When.java</URI>
          <URI>test/Test.java</URI>
          <URI>test/TestGroup.java</URI>
          <URI>data/sax/ParseXml.java</URI>
          <URI>data/task/Collect.java</URI>
          <URI>data/task/Edit.java</URI>
          <URI>data/task/Fetch.java</URI>
          <URI>data/util/DataBatchProcessor.java</URI>
          <URI>vfs/task/Copy.java</URI>
        </resources>
      </scm:Change>

      
      <scm:Change>
        <date>2009-12-14
        </date>
        
        <notes>
          <scm:Note>Command pattern now incorporates a generic input context
            to support the notion of parameter-driven Commands. This allows
            the Command pattern to support "method" semantics and to act
            as an intermediate representation of method calls and RPC 
            invocations.
          </scm:Note>
          <scm:Note>This is a broad interface change which affects most
            code which uses the spiralcraft.command package.
          </scm:Note>
        
        </notes>
        
        <path>source/spiralcraft
        </path>
        
        <resources>
          <URI>command/Command.java</URI>
          <URI>command/Commandable.java</URI>
          <URI>command/CommandAdapter.java</URI>
          <URI>command/CommandFactory.java</URI>
          <URI>command/CommandProcessor.java</URI>
          <URI>data/editor/EditorBase.java</URI>
          <URI>data/editor/TupleEditor.java</URI>
          <URI>data/flatfile/Output.java</URI>
          <URI>data/flatfile/Parser.java</URI>
          <URI>data/flatfile/Scan.java</URI>
          <URI>data/rest/RestService.java</URI>
          <URI>data/spi/ListAggregate.java</URI>
          <URI>ui/Step.java</URI>
          <URI>ui/StepControl.java</URI>
          <URI>service/Daemon.java</URI>
          <URI>shell/CommandConsole.java</URI>
          <URI>shell/FocusCommand.java</URI>
          <URI>shell/HelpCommand.java</URI>
          <URI>shell/LookCommand.java</URI>
        </resources>
      </scm:Change>
      
      <scm:Change>
        <date>2009-11-23
        </date>
        
        <notes>
          <scm:Note>Implemented MessageDigest utility to convert from 
            different content representations to different digest
            representations.
          </scm:Note>
          <scm:Note>Added prepad function to StringUtil to pad number
            representations with leading digits/chars.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/util/
        </path>
        
        <resources>
          <URI>crypt/Digester.java
          </URI>
          <URI>string/StringUtil.java
          </URI>
        </resources>
        

      </scm:Change>

      <scm:Change>
        <date>2009-11-23
        </date>
        
        <notes>
          <scm:Note>Implemented Character literals delimited by single quote
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/lang/ExpressionParser.java
        </path>
        

      </scm:Change>
    </detail>
  
  </scm:Change>
  
  
  <scm:Change>
    <revision>0.3.22
    </revision>
    
    <authorId>miketoth
    </authorId>
    
    <date>2009-11-15
    </date>
    
    <notes>
      <scm:Note>Modification to Focus mechanism to provide better naming
        and association flexibility.
      </scm:Note>
      <scm:Note>Revision of spiralcraft.lang tuple/inline-context syntax.
      </scm:Note>
      <scm:Note>Changed "cause" to "root cause" in DataException text
      </scm:Note>
      <scm:Note>Fix NPE in spiralcraft.lang when handling non-hierarchical URIs
      </scm:Note>
      <scm:Note>Fix: Applying a new Type to a SequenceField did not work.
      </scm:Note>
      <scm:Note>Fix NPE: When no Sequences are defined in an AbstractStore
      </scm:Note>    
      <scm:Note>Provide a more detailed Exception when loading a type from XML
        fails. 
      </scm:Note>    
    </notes>
    
    <detail>

      <scm:Change>
        <date>2009-11-13
        </date>
        
        <notes>
          <scm:Note>Provide access to the index counter in inline
            iterations using [lang:IterationCursor].index
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/lang/
        </path>
        
        <resources>
          <URI>IterationCursor.java
          </URI>
          <URI>spi/IterationProjector.java
          </URI>
        </resources>
      </scm:Change>
    
      <scm:Change>
        <date>2009-11-13
        </date>
        
        <notes>
          <scm:Note>Provide access to the index counter in inline
            iterations using [lang:IterationCursor].index
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/lang/
        </path>
        
        <resources>
          <URI>IterationCursor.java
          </URI>
          <URI>spi/IterationProjector.java
          </URI>
        </resources>
      </scm:Change>

      <scm:Change>
        <date>2009-11-13
        </date>
        
        <notes>
          <scm:Note>Provide a more detailed Exception when loading a data 
            Type from XML fails.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/data/xml/XmTypeFactory.java
        </path>
      </scm:Change>

    
      <scm:Change>
        <date>2009-11-13
        </date>
        
        <notes>
          <scm:Note>Provide a more detailed Exception when loading a type
            from XML fails.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/data/xml/XmTypeFactory.java
        </path>
      </scm:Change>

      <scm:Change>
        <date>2009-11-13
        </date>
        
        <notes>
          <scm:Note>Fix: Spin condition in lazy fetch functionality when 
            initial fetch contains no elements and expected size is not set.
          </scm:Note>
          <scm:Note>Added "fetchable" flag, which is set on the installation
            of the fetchCommand and turned off when the fetchCommand throws
            an exception or adds no results.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/data/spi/ListAggregate.java
        </path>
      </scm:Change>

      <scm:Change>
        <date>2009-11-13
        </date>
        
        <notes>
          <scm:Note>Fix NPE: When no Sequences are defined in an AbstractStore
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/data/spi/AbstractStore.java
        </path>
      </scm:Change>

      <scm:Change>
        <date>2009-11-13
        </date>
        
        <notes>
          <scm:Note>Fix: Applying a new Type to a SequenceField did not work.
          </scm:Note>
          <scm:Note>The case where overriding an existing type using 
            a TypeReference vs. extension of an existing type using
            its TypeReference were insufficiently differentiated.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/data/
        </path>
        
        <resources>
          <URI>MetaType.java
          </URI>
          <URI>reflect/ReflectionField.java
          </URI>
          <URI>reflect/ReflectionType.java
          </URI>
        </resources>
      </scm:Change>

      <scm:Change>
        <date>2009-11-13
        </date>
        
        <notes>
          <scm:Note>Changed "cause" to "root cause" in DataException text
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/data/DataException.java
        </path>
      </scm:Change>

      <scm:Change>
        <date>2009-11-13
        </date>
        
        <notes>
          <scm:Note>Modification to Focus mechanism to provide better naming
            and association flexibility.
          </scm:Note>
          <scm:Note>In-line iterations '#{ }' provide iteration metadata into
            Focus chain via [lang:IterationCursor]
          </scm:Note>
          <scm:Note>Added addAlias,addFacet,toFormattedString methods to Focus.
          </scm:Note>
          <scm:Note>CompoundFocus is now deprecated. All Foci
            now support facets.
          </scm:Note>
          <scm:Note>StaticFocus is now deprecated. Use static method
            syntax [@myns:MyClass].@myStaticMethod(foo)
          </scm:Note>
          <scm:Note>BaseFocus assumes findFocus() and isFocus() default
            implementation, and manages aliases and facets (other Foci 
            addressable from below this Focus chain link).
          </scm:Note>
          <scm:Note>BaseFocus implements getFocusChain().toFormattedString()
             and makes output more readable.
          </scm:Note>
          <scm:Note>Fix NPE when handling non-hierarchical URIs
          </scm:Note>
          <scm:Note>AssemblyFocus trimmed down by refactor
          </scm:Note>
          <scm:Note>RestService, DataSessionFocus moved off CompoundFocus to 
                SimpleFocus
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/
        </path>
        
        <resources>
          <URI>lang/SimpleFocus.java
          </URI>
          <URI>lang/BaseFocus.java
          </URI>
          <URI>lang/CompoundFocus.java
          </URI>
          <URI>lang/StaticFocus.java
          </URI>
          <URI>lang/TeleFocus.java
          </URI>
          <URI>lang/FocusWrapper.java
          </URI>         
          <URI>lang/spi/ClosureFocus.java
          </URI>
          <URI>util/URIUtil.java
          </URI>
          <URI>builder/Assembly.java
          </URI>
          <URI>data/rest/RestService.java
          </URI>
          <URI>data/session/DataSessionFocus.java
          </URI>
          <URI>security/auth/Authenticator.java
          </URI>
        </resources>
      </scm:Change>
      
      <scm:Change>
        <date>2009-11-13
        </date>

        <notes>
           <scm:Note>Array equality computation in lang/reflect defers to single
             deep implementation.
           </scm:Note>
           <scm:Note>ArrayEqualityTranslator passes null for "not equal" 
             condition for use in implementing != operator.
           </scm:Note>
        </notes>

        <path>source/spiralcraft/lang/
        </path>
        
        <resources>
          <URI>parser/ArrayEqualityTranslator.java
          </URI>
          <URI>reflect/ArrayReflector.java
          </URI>
          <URI>reflect/BeanReflector.java
          </URI>
        </resources>      
      </scm:Change>
            
      <scm:Change>
        <date>2009-11-13
        </date>

        <notes>
           <scm:Note>Logical and Aggregate nodes query the Reflector to bind
             an operation as part of the bind attempt
           </scm:Note>
        </notes>

        <path>source/spiralcraft/lang/parser/
        </path>
        
        <resources>
          <URI>AggregateProjectNode.java
          </URI>         
          <URI>LogicalNode.java
          </URI>
        </resources>      
      </scm:Change>

      <scm:Change>
        <date>2009-11-13
        </date>

        <notes>
           <scm:Note>Pulled namespace translation logic into Node class.
           </scm:Note>
        </notes>

        <path>source/spiralcraft/lang/parser/
        </path>
        
        <resources>
          <URI>AbsoluteFocusNode.java
          </URI>         
          <URI>TypeFocusNode.java
          </URI>
          <URI>Node.java
          </URI>
        </resources>      
      </scm:Change>

      <scm:Change>
        <date>2009-11-13
        </date>

        <notes>
          <scm:Note>Simplified spiralcraft.lang tuple/inline-context
            syntax.
          </scm:Note>
          <scm:Note>A TupleExpression is now a stand-alone expression that
            contains an expression list, that starts and ends with { }- ie
            { x:=6, y:=.x }. It contains its own telescoped focus so that
            fields can be bound to the previously defined  fields. 
          </scm:Note>
          <scm:Note>An in-line context is contained within a postfix expression
            and creates a telescoped focus on the part of the postfix expression
            that preceeds it. ie. customer.name{ .substring(1,.length()) }. The
            in-line context provides the result of the contained expression.
          </scm:Note>
          <scm:Note>Simplified parser handling of postfix expressions
          </scm:Note>
        </notes>

        <path>source/spiralcraft/lang/parser/
        </path>
        
        <resources>
          <URI>ExpressionParser.java
          </URI>         
          <URI>TupleNode.java
          </URI>
          <URI>SyntaxNode.java
          </URI>
          <URI>SubcontextNode.java
          </URI>
          <URI>TupleProjectNode.java
          </URI>
        </resources>      
      </scm:Change>
    </detail>
    
  </scm:Change>
    
  <scm:Change>
    <revision>0.3.21.1
    </revision>
    
    <authorId>miketoth
    </authorId>
    
    <date>2009-09-30
    </date>
    
    <notes>
      <scm:Note>Fix NPE: Default the contentType (Tuple implementation type)
        of TupleReflector to be Tuple.class if no specific subtype is supplied.
        Also check for nulls in BeanReflector methods to better indicate
        when a null is being past to static and instance contructors.
      </scm:Note>
    </notes>
    
    <path>source/spiralcraft/
    </path>
    
    <resources>
      <URI>data/lang/TupleReflector.java
      </URI>
      <URI>lang/reflect/BeanReflector.java
      </URI>
    </resources>
  </scm:Change>
  
  <scm:Change>
    <revision>0.3.21
    </revision>
    
    <authorId>miketoth
    </authorId>
    
    <date>2009-09-25
    </date>
    
    <notes>
      <scm:Note>Fixed incomplete implementation of modulo operator
      </scm:Note>
    </notes>
    
    <path>source/spiralcraft/lang/NumericOpNode.java
    </path>
  </scm:Change>

  <scm:Change>
    <revision>0.3.20
    </revision>
    
    <authorId>miketoth
    </authorId>
    
    <date>2009-09-25
    </date>
    
    <notes>
      <scm:Note>Fixed various corner case issues in spiralcraft.data
        inheritance
      </scm:Note>
      <scm:Note>Provide access to the run directory through the vfs "context"
        uri scheme. 
      </scm:Note>
      <scm:Note>TaskRunner accepts a --serviceURI argument.
      </scm:Note>
      <scm:Note>Hooks for post-startup tasks to be run for Daemons
      </scm:Note>
      
      <scm:Note>spiralcraft.lang enhancements to provide access to  
        abstracted Collection and List semantics of Channel objects.
      </scm:Note>
      <scm:Note>Implemented Range Expressions int spiralcraft.lang
      </scm:Note>
      <scm:Note>Completed support in data task package for publishing 
        lazy-loading aggregates
      </scm:Note>
      <scm:Note>Simplification of Pool implementation to use dedicated thread
        for Keeper.
      </scm:Note>
      <scm:Note>Sanitized system log by converting message to ASCII
      </scm:Note>
      <scm:Note>Further refinements to spiralcraft.lang tuple syntax
      </scm:Note>
      <scm:Note>Misc fixes
      </scm:Note>
    </notes>
    
    <detail>
      <scm:Change>
        <date>2009-09-25
        </date>

        <notes>
          <scm:Note>Sanitized system log by converting message to ASCII
          </scm:Note>
        </notes>

        <path>source/spiralcraft/
        </path>
        
        <resources>
          <URI>log/DefaultFormatter.java</URI>
          <URI>util/string/StringUtil.java</URI>
        </resources>
      </scm:Change>

      <scm:Change>
        <date>2009-09-25
        </date>

        <notes>
          <scm:Note>TaskRunner accepts a --serviceURI argument
          </scm:Note>
        </notes>

        <path>source/spiralcraft/task/TaskRunner.java
        </path>
        
      </scm:Change>

      <scm:Change>
        <date>2009-09-25
        </date>

        <notes>
          <scm:Note>Provide access to the run directory through the vfs "context"
        uri scheme. Set the "context" URI scheme default mapping to the 
        ExecutionContext focusURI (usually the process working directory)
        at the main Executor entry point.
          </scm:Note>
        </notes>

        <path>source/spiralcraft/
        </path>
        
        <resources>
          <URI>exec/Executor.java</URI>
          <URI>vfs/ContextResourceMap.java</URI>
        </resources>
      </scm:Change>

        
        
      <scm:Change>
        <date>2009-09-25
        </date>

        <notes>
          <scm:Note>Implemented Range Expressions in spiralcraft.lang
          </scm:Note>
        </notes>    
        
        <path>source/spiralcraft/
        </path>
        
        <resources>
          <URI>lang/Range.java</URI>
          <URI>lang/parser/ExpressionParser.java</URI>
          <URI>lang/parser/RangeNode.java</URI>
          <URI>lang/reflect/ArrayReflector.java</URI>
          <URI>lang/reflect/BeanReflector.java</URI>
          <URI>lang/spi/ArrayRangeChannel.java</URI>
          <URI>lang/spi/ListRangeChannel.java</URI>
          <URI>data/lang/AggregateReflector.java</URI>
          <URI></URI>
        </resources>
      </scm:Change>

      <scm:Change>
        <date>2009-09-25
        </date>

        <notes>
          <scm:Note>Fixed various corner case issues in spiralcraft.data
            inheritance
          </scm:Note>
          <scm:Note>Implemented Field level polymorphism for baseType extension
            in spiralcraft.data. 
          </scm:Note>
          <scm:Note>Scheme defers to Type when determining primary key through
            inheritance hierarchy.
          </scm:Note>
        </notes>    
        
        <path>source/spiralcraft/
        </path>
        
        <resources>
          <URI>data/core/FieldImpl.java</URI>
          <URI>data/core/SchemeImpl.java</URI>
          <URI>lang/spi/UncheckedCastChannel.java</URI>
        </resources>
      </scm:Change>

      <scm:Change>
        <date>2009-09-22
        </date>

        <notes>
          <scm:Note>Further refinements to spiralcraft.lang tuple syntax
          </scm:Note>
          <scm:Note>Permit standalone expressions as implicit, anonymous fields
          </scm:Note>
          <scm:Note>Type decls must be associated with an explicit field decl
          </scm:Note>
          <scm:Note>Allow Type decl to be included along with source
            expression to allow for wider field type than source type.
          </scm:Note>
        </notes>    
        
        <path>source/spiralcraft/lang/parser/
        </path>
        
        <resources>
          <URI>ExpressionParser.java</URI>
          <URI>TupleField.java</URI>
          <URI>TupleNode.java</URI>
        </resources>
      </scm:Change>

      <scm:Change>
        <date>2009-09-21
        </date>

        <notes>
          <scm:Note>Simplified Pool to use dedicated thread for Keeper
          </scm:Note>
          
        </notes>    
        
        <path>source/spiralcraft/
        </path>
        
        <resources>
          <URI>pool/Pool.java</URI>
          <URI>time/Scheduler.java</URI>
        </resources>
      </scm:Change>

      <scm:Change>
        <date>2009-09-21
        </date>

        <notes>
          <scm:Note>Remove extraneous debug messages
          </scm:Note>
          
        </notes>    
        
        <path>source/spiralcraft/data/builder/BuilderField.java
        </path>
      </scm:Change>

      <scm:Change>
        <date>2009-09-17
        </date>

        <notes>
          <scm:Note>Simple chainable "If" scenario for task framework.
          </scm:Note>
          
        </notes>    
        
        <path>source/spiralcraft/task/If.java
        </path>
      </scm:Change>

      <scm:Change>
        <date>2009-09-17
        </date>

        <notes>
          <scm:Note>Usability enhancements to data query framework
          </scm:Note>
          <scm:Note>It is no longer required that a Store be present in
            the Focus chain for queries to work, if all queries can
            resolve their default binding. This permits non-optimized queries
            to be created against opaque data sources (ie. ReferenceQuery). It
            is still preferable for Query clients to resolve the query against
            a specific Queryable.
          </scm:Note>          
          <scm:Note>ReferenceQuery can obtain data from any Channel that
            supports an IterationDecorator, by using an IteratorCursor to
            publish the result.
          </scm:Note>          
          <scm:Note>Sort allows the result type (and resulting Comparator set)
            to be determined from the upstream bound query.
          </scm:Note>          
          <scm:Note>KeyField uses Query.bind() when no Queryable is available
          </scm:Note>
          
        </notes>    
        
        <path>source/spiralcraft/data/
        </path>
        
        <resources>
          <URI>query/Query.java</URI>
          <URI>query/ReferenceQuery.java</URI>
          <URI>query/Sort.java</URI>
          <URI>query/Scan.java</URI>
          <URI>query/UnaryBoundQuery.java</URI>
          <URI>spi/IteratorCursor.java</URI>
          <URI>task/Fetch.java</URI>
          <URI>core/KeyField.java</URI>
        </resources>
      </scm:Change>

      <scm:Change>
        <date>2009-09-17
        </date>

        <notes>
          <scm:Note>Completed support in data task package for publishing 
            lazy-loading aggregates
          </scm:Note>
        </notes>    
        
        <path>source/spiralcraft/data/
        </path>
        
        <resources>
          <URI>task/Collect.java</URI>
          <URI>spi/ListAggregate.java</URI>
        </resources>
      </scm:Change>
      
      <scm:Change>
        <date>2009-09-17
        </date>

        <notes>
          <scm:Note>spiralcraft.lang enhancements to provide access to  
            abstracted Collection and List semantics of Channel objects.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/
        </path>
        
        <resources>
          <URI>lang/CollectionDecorator.java</URI>
          <URI>lang/ListDecorator.java</URI>
          <URI>lang/reflect/ArrayReflector.java</URI>
          <URI>lang/reflect/BeanReflector.java</URI>
          <URI>lang/reflect/CollectionReflector.java</URI>
          <URI>lang/spi/ArrayCollectionDecorator.java</URI>
          <URI>lang/spi/ArrayListDecorator.java</URI>
          <URI>lang/spi/GenericCollectionDecorator.java</URI>
          <URI>lang/spi/GenericListDecorator.java</URI>
          <URI>data/lang/AggregateReflector.java</URI>
        </resources>
      </scm:Change>

      <scm:Change>
        <date>2009-09-17
        </date>

        <notes>
          <scm:Note>Make the Scheduler ensure a minAvailable of 2 threads so
            the PoolKeeper for the ThreadPool can schedule itself efficiently.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/time/Scheduler.java
        </path>
        
      </scm:Change>
      
      <scm:Change>
        <date>2009-09-14
        </date>

        <notes>
          <scm:Note>Make URLResource overwrite the "Connection" property
            to avoid keepalive connections by default.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/vfs/url/URLResource.java
        </path>
        
      </scm:Change>
      
      <scm:Change>
        <date>2009-09-14
        </date>

        <notes>
          <scm:Note>Added buffering and debugging enhancements to QueryXml
            and underlying URLResource where applicable.
          </scm:Note>
          <scm:Note>Added inputBufferLength property to URLResource
          </scm:Note>
          <scm:Note>Added inputBufferLength property to QueryXml, which is
            passed through to URLResource where applicable.
          </scm:Note>
          <scm:Note>When URLResource system-wide debugging is set to FINE, 
            a DebugInputStream wraps the URLConnection inputStream and times
            calls to the read() methods.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft
        </path>
        
        <resources>
          <URI>data/sax/QueryXml.java
          </URI>
          <URI>io/DebugInputStream.java
          </URI>
          <URI>vfs/url/URLResource.java
          </URI>
        </resources>
        
      </scm:Change>
            
      <scm:Change>
        <date>2009-09-14
        </date>

        <notes>
          <scm:Note>Fixed issue where QueryXML.timeoutSeconds was applied as
            as milliseconds, prematurely aborting back-end response.
          </scm:Note>
          <scm:Note>Removed extraneous debug messages
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/data/sax/
        </path>
        
        <resources>
           <URI>QueryXml.java</URI>
           <URI>ParseXml.java</URI>
        </resources>
        
      </scm:Change>
      
      <scm:Change>
        <date>2009-09-14
        </date>

        <notes>
          <scm:Note>Added afterStart property to Daemon which accepts a
            scenario to be run immediately after startup.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/service/Daemon.java
        </path>
        
      </scm:Change>
    </detail>
  </scm:Change>

  <scm:Change>
    <revision>0.3.19
    </revision>
    
    <authorId>miketoth
    </authorId>
    
    <date>2009-09-08
    </date>
    
    <notes>
      <scm:Note>Formalized array literal syntax in spiralcraft.lang to free up 
        syntax for inline tuples. Adjusted tuple syntax for more intuitive
        and consistent use of subject and context.
      </scm:Note>
      <scm:Note>Fix for issue where the Focus chain exported by the Scenario
        doesn't have a subject. Made the Scenario the 
        subject of its own ClosureFocus. 
      </scm:Note>
    </notes>
    
    <detail>
      <scm:Change>
        <date>2009-09-08
        </date>
        
        <notes>
          <scm:Note>Fix for issue where a set of namespaces added by
            a  NamespaceFocus
            replaced a previous set of namespaces added by a NamespaceFocus if
            the previous NamespaceFocus was the parent of the new 
            NamespaceFocus.
          </scm:Note>
          <scm:Note>Added debugging information for namespaces to FocusChain.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/lang/
        </path>
        
        <resources>
          <URI>FocusWrapper.java
          </URI>
          <URI>NamespaceFocus.java
          </URI>
          <URI>TeleFocus.java
          </URI>
        </resources>
        
      </scm:Change>

      <scm:Change>
        <date>2009-09-08
        </date>
        
        <notes>
          <scm:Note>Fix for issue where the Focus chain exported by the Scenario
            doesn't have a subject. Made the Scenario the 
            subject of its own ClosureFocus. 
          </scm:Note>
          <scm:Note>Use of ClosureFocus in Batch is obsolete now that
            Scenario handles general case.
          </scm:Note>

        </notes>
        
        <path>source/spiralcraft
        </path>
        
        <resources>
          <URI>lang/spi/ClosureFocus.java
          </URI>
          <URI>task/Scenario.java
          </URI>
          <URI>task/Batch.java
          </URI>
        </resources>
        
      </scm:Change>
      
      <scm:Change>
        <date>2009-09-08
        </date>
        
        <notes>
          <scm:Note>Array literals can only be created using the syntax
            [@typeName][{ ... }]
          </scm:Note>
          <scm:Note>Inline tuples are now valid expressions in themselves.
          </scm:Note>
          <scm:Note>Inline tuples telescope instead of chaining-
            ie. {:=myStr: l:=.length() } instead of { :=mystr:  l:=length() }
          </scm:Note>
          <scm:Note>Tuple wrapping or inheritance now uses brackets instead
            of ':'- ie. { {=.} ... } or { {[@myType]} ... } instead of
            { :=.: ... } or { :[@mytype] .... }
          </scm:Note>
          <scm:Note>Enhanced debugging information for bind exceptions in
            test framework
          </scm:Note>
          <scm:Note>Enhanced debugging information for Expression parse
            exceptions
          </scm:Note>
          <scm:Note>Fixed argument reversal on reconstruct in AssignmentNode
          </scm:Note>
          <scm:Note>Properly handle non '/' terminated namespace definition in 
            TypeFocusNode
          </scm:Note>

        </notes>
        
        <path>source/spiralcraft/
        </path>
        
        <resources>
          <URI>lang/parser/ExpressionParser.java
          </URI>
          <URI>lang/parser/TupleNode.java
          </URI>
          <URI>lang/parser/Tuple.java
          </URI>
          <URI>lang/parser/AssignmentNode.java
          </URI>
          <URI>lang/parser/TypeFocusNode.java
          </URI>
          <URI>lang/ParseException.java
          </URI>
          <URI>test/Assertion.java
          </URI>
        </resources>
      </scm:Change>
    </detail>
  </scm:Change>
  

  <scm:Change>
    <revision>0.3.18
    </revision>
    
    <authorId>miketoth
    </authorId>
    
    <date>2009-09-06
    </date>
    
    <notes>
    </notes>
    
    <detail>
      <scm:Change>
        <date>2009-09-06
        </date>
        
        <notes>
          <scm:Note>Incomplete work on stateful constructs to create cursors
            that can be published by various operations.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/
        </path>
        
        <resources>
          <URI>data/core/CursorField.java
          </URI>
          <URI>data/lang/CursorChannel.java
          </URI>
          <URI>data/spi/ListAggregate.java
          </URI>
          <URI>data/task/Collect.java
          </URI>
          <URI>data/task/Fetch.java
          </URI>
        </resources>
      </scm:Change>

      
      <scm:Change>
        <date>2009-09-06
        </date>
        
        <notes>
          <scm:Note>Deprecated DataBatchProcessor
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/data/util/DataBatchProcessor.java
        </path>
        
      </scm:Change>

      <scm:Change>
        <date>2009-09-06
        </date>
        
        <notes>
          <scm:Note>Refactoring of spiralcraft.test package to separate
            Tests, which represent non-chainable concrete classes like Stub and
            Assertion, from TestGroup, which is chainable.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/test
        </path>
        
        <resources>
          <URI>Assertion.java
          </URI>
          <URI>Stub.java
          </URI>
          <URI>Test.java
          </URI>
          <URI>TestGroup.java
          </URI>
          <URI>TestResult.java
          </URI>
        </resources>
      </scm:Change>

      <scm:Change>
        <date>2009-09-06
        </date>
        
        <notes>
          <scm:Note>Format arrays on output
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/task/Debug.java
        </path>
      </scm:Change>
      
      <scm:Change>
        <date>2009-09-06
        </date>
        
        <notes>
          <scm:Note>Enhancements related to usage of Command in Scenarios and
            other components, in
            preparation for implementation of spiralcraft.lang based 
            parameterization of Commands and binding to Command target and
            results.
          </scm:Note>
          <scm:Note>Convention for exporting a CommandFactory from a Java
            component is to use a public final field to hold the
            CommandFactory. 
          </scm:Note>
          <scm:Note>Command targets should be Void when not used.
          </scm:Note>
          <scm:Note>The target of a TaskCommand is the associated Task.
          </scm:Note>
          <scm:Note>Obsoleted BatchScenarioLegacy
          </scm:Note>
          <scm:Note>Reverted task.Exec to use a simple command channel
            pending further development of CommandFactory pattern, which
            obsoletes BoundCommandFactory.
          </scm:Note>
          <scm:Note>Scenario provides facility to create a closure when
            command is created to support cross-thread usage.
          </scm:Note>
          <scm:Note>ClosureFocus and ThreadLocalChannel now support pass-through
            when Closure/ThreadLocalChannel have not been "scoped". 
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft
        </path>
        
        <resources>
          <URI>command/BoundCommandFactory.java
          </URI>
          <URI>ui/StepControl.java
          </URI>
          <URI>service/Daemon.java
          </URI>
          <URI>task/Exec.java
          </URI>
          <URI>task/BatchScenarioLegacy.java
          </URI>
          <URI>task/Scenario.java
          </URI>
          <URI>task/TaskCommand.java
          </URI>
          <URI>lang/spi/ClosureFocus.java
          </URI>
          <URI>lang/spi/ThreadLocalChannel.java
          </URI>
        </resources>
        
      
      </scm:Change>

      <scm:Change>
        <date>2009-09-06
        </date>
        
        <notes>
          <scm:Note>Simplify the focus chain for components read from XML 
            data or builder definitions- do not insert a BeanReflector 
            for the component into the chain if the component implements
            FocusChainObject, allowing the immediate parent context to
            be visible to the FocusChainObject and usable as a primary
            binding target. This allows Scenarios used as methods to bind
            to their parent context, which should be the "object" that 
            represents the method invocation context.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft
        </path>
        
        <resources>
          <URI>data/persist/AbstractXmlObject.java
          </URI>
          <URI>data/persist/XmlAssembly.java
          </URI>
        </resources>
        
      
      </scm:Change>

      <scm:Change>
        <date>2009-09-06
        </date>
        
        <notes>
          <scm:Note>Support the incorporation of Scenarios as method 
            implementations.
          </scm:Note>
          <scm:Note>Refined "method" implementation remove "invoke" call and 
            require that all methods be bound.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft
        </path>
        
        <resources>
          <URI>data/Method.java
          </URI>
          <URI>data/core/MethodImpl.java
          </URI>
          <URI>data/core/TaskMethod.java
          </URI>
          <URI>data/core/TypeImpl.java
          </URI>
          <URI>data/types/meta/TaskMethodType.java
          </URI>
          <URI>data/reflect/ReflectionMethod.java
          </URI>
          <URI>data/lang/TupleReflector.java
          </URI>
        </resources>
        
      
      </scm:Change>

      <scm:Change>
        <date>2009-09-06
        </date>
        
        <notes>
          <scm:Note>Enhancement to spiralcraft.lang to support collection
            creation and element addition via a CollectionDecorator 
            interface.
          </scm:Note>
          <scm:Note>Provide more ways and more intelligence for constructing
            arrays from literals and other sources.
          </scm:Note>
          <scm:Note>Added better support for java.util.Collections to
            spiralcraft.lang package.
          </scm:Note>
          <scm:Note>Added utility to determine the Class referred to by the
            first parameter in a Java generics parameterized type
          </scm:Note>
          <scm:Note>Added better spiralcraft.data support for array types.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft
        </path>
        
        <resources>
          <URI>lang/Reflector.java
          </URI>
          <URI>lang/CollectionDecorator.java
          </URI>
          <URI>lang/reflect/CollectionReflector.java
          </URI>
          <URI>lang/reflect/BeanReflector.java
          </URI>
          <URI>lang/reflect/ArrayReflector.java
          </URI>
          <URI>lang/spi/ArrayCollectionDecorator.java
          </URI>
          <URI>lang/spi/ArrayConstructorChannel.java
          </URI>
          <URI>lang/spi/ArrayIterationDecorator.java
          </URI>
          <URI>lang/spi/GenericCollectionDecorator.java
          </URI>
          <URI>util/lang/ClassUtil.java
          </URI>
          <URI>data/lang/DataReflector.java
          </URI>
        </resources>
        
      
      </scm:Change>


      <scm:Change>
        <date>2009-09-06
        </date>
        
        <notes>
          <scm:Note>Remove extraneous console output
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft
        </path>
        
        <resources>
          <URI>sax/XmlWriter.java
          </URI>
        </resources>
        
      
      </scm:Change>

      <scm:Change>
        <date>2009-09-06
        </date>
        
        <notes>
          <scm:Note>Fix potential NPE in DictionaryBinding resolving
            StringConverter
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft
        </path>
        
        <resources>
          <URI>lang/util/DictionaryBinding.java
          </URI>
        </resources>
        
      
      </scm:Change>
    </detail>
  </scm:Change>

  <scm:Change>
    <revision>0.3.17
    </revision>
    
    <authorId>miketoth
    </authorId>
    
    <date>2009-08-23
    </date>
    
    <notes>
      <scm:Note>spiralcraft.lang enhancements to provide functionality for
        projection and in-line tuple definition
      </scm:Note>
      <scm:Note>Exception handling enhancements to report document location
        in builder and in XML parse tree system. 
      </scm:Note>
      <scm:Note>Support for multi-valued attributes in DictionaryBinding
      </scm:Note>
      <scm:Note>Minor unit test facility enhancements.
      </scm:Note>
    </notes>
    
    <detail>
      
      <scm:Change>
        <date>2009-08-23
        </date>
        
        <notes>
          <scm:Note>Add better support for multi-valued attributes in
            DictionaryBinding.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft
        </path>
        
        <resources>
          <URI>data/sax/QueryXml.java
          </URI>
          <URI>lang/util/DictionaryBinding.java
          </URI>
        </resources>
        
      
      </scm:Change>
            
      <scm:Change>
        <date>2009-08-23
        </date>
        
        <notes>
          <scm:Note>Expand arrays for assertion output
          </scm:Note>
          <scm:Note>Tweaked TestResult default toString() formatting
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/test
        </path>
        
        <resources>
          <URI>Assertion.java
          </URI>
          <URI>TestResult.java
          </URI>
        </resources>
        
      
      </scm:Change>
          
      <scm:Change>
        <date>2009-08-21
        </date>
        
        <notes>
          <scm:Note>Keep track of source code parse position for builder
            exceptions and incorporate into debugging output.
          </scm:Note>
          <scm:Note>Trap runtime exceptions when applying properties and
            wrap with source code location.
          </scm:Note>          
        </notes>
        
        <path>source/spiralcraft
        </path>
        
        <resources>
          <URI>builder/AssemblyLoader.java
          </URI>
          <URI>builder/PropertyBinding.java
          </URI>
          <URI>builder/PropertySpecifier.java
          </URI>
          <URI>sax/Node.java
          </URI>
          <URI>sax/ParseTree.java
          </URI>
        </resources>
        
      
      </scm:Change>
      
      <scm:Change>

        <date>2009-08-21
        </date>
        
        <notes>
          <scm:Note>Added general exception facility to ExpressionParser
          </scm:Note>
          <scm:Note>Isolated assignmentExpression function to maintain
            recursive descent pattern that mirrors grammar structure.
          </scm:Note>
          <scm:Note>Added AggregateProjection operator "#" and subtree to
            grammar.
          </scm:Note>
          <scm:Note>Added TupleProjection and subtree to grammar to support
             in-line type composition
          </scm:Note>
          <scm:Note>Fix problem where an extra '.' is added on Expression
            reconstruction: 
            Shortcut the '.'+identifier pattern to a dereference in
            parseFocusExpression to maintain expression reconstruction
            capability. Also, ParentFocusNode no longer returns ".." because
            one of them is taken care of by the CurrentFocusNode.
          </scm:Note>
          <scm:Note>Added @log and @tune meta-operations to support debugging
            and optimization tasks.
          </scm:Note>
          <scm:Note>Fix problem where String literals did not reconstruct
            quotes. LiteralNode now detects Strings.
          </scm:Note>
          <scm:Note>Degrade to reflective array access when dealing with
            primitive array objects in ArrayIndexChannel.
          </scm:Note>
          <scm:Note>Added signature hiding computation to Signature
          </scm:Note>
          <scm:Note>Added @top, @log and @tune ops to abstract Reflector
          </scm:Note>

          <scm:Note>Added "?=" containership and "#" projection operators to
            AggregateReflector for spiralcraft.data
          </scm:Note>          
          <scm:Note>Fix ArrayUtil iterator: Now throws NoSuchElementException
            instead of ArrayIndexOutOfBoundsException
          </scm:Note>          
        </notes>
        
        <path>source/spiralcraft/
        </path>
        
        <resources>
          <URI>lang/parser/ExpressionParser.java
          </URI>
          <URI>lang/parser/Tuple.java
          </URI>
          <URI>lang/parser/TupleField.java
          </URI>
          <URI>lang/parser/TupleNode.java
          </URI>
          <URI>lang/parser/Tuple.java
          </URI>
          <URI>lang/parser/TupleProjectNode.java
          </URI>
          <URI>lang/parser/AggregateProjectNode.java
          </URI>
          <URI>lang/parser/LiteralNode.java
          </URI>
          <URI>lang/reflect/ArrayReflector.java
          </URI>
          <URI>lang/reflect/BeanReflector.java
          </URI>
          <URI>lang/spi/LogChannel.java
          </URI>
          <URI>lang/spi/TuneChannel.java
          </URI>
          <URI>lang/spi/IterationProjector.java
          </URI>
          <URI>data/lang/AggregateReflector.java
          </URI>
          <URI>util/ArrayUtil.java
          </URI>
        </resources>
      </scm:Change>
    </detail>
    
    
  </scm:Change>
      
  <scm:Change>
    <revision>0.3.16
    </revision>
    
    <authorId>miketoth
    </authorId>
    
    <date>2009-08-18
    </date>
    
    <notes>
      <scm:Note>
      Provide additional spiralcraft.lang reachable metadata to foreign XML
      parser and other data-driven subsystems for custom primitive Types 
      (eg. string formatted data, dates, etc) published from spiralcraft.data      
      </scm:Note>
    </notes>
    
    <detail>
      <scm:Change>

        <date>2009-08-18
        </date>
        
        <notes>
          <scm:Note>Move to using StringConverter instead of Format 
            for thread safety
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/data/types/standard/
        </path>
        
        <resources>
          <URI>DateType.java
          </URI>
        </resources>
      </scm:Change>

      <scm:Change>

        <date>2009-08-18
        </date>
        
        <notes>
          <scm:Note>Exception handling and reporting enhancements
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/
        </path>
        
        <resources>
          <URI>data/sax/DataSAXException.java
          </URI>
          <URI>spiralcraft/lang/reflect/MethodTranslator.java
          </URI>
        </resources>
      </scm:Change>


      <scm:Change>

        <date>2009-08-17
        </date>
        
        <notes>
          <scm:Note>Data reflection of primitive types
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/
        </path>
        
        <resources>
          <URI>data/lang/PrimitiveReflector.java
          </URI>
          <URI>data/lang/DataReflector.java
          </URI>
          <URI>data/lang/TupleReflector.java
          </URI>
          <URI>data/lang/BufferReflector.java
          </URI>
          <URI>data/lang/AggregateReflector.java
          </URI>
          <URI>data/lang/TypeReflector.java
          </URI>
          <URI>data/sax/ValueFrame.java
          </URI>
          <URI>data/sax/RootFrame.java
          </URI>
          <URI>data/OrderElement.java
          </URI>
        </resources>
      </scm:Change>

      <scm:Change>

        <date>2009-08-17
        </date>
        
        <notes>
          <scm:Note>Obtain StringConverter from Channel Reflector
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/
        </path>
        
        <resources>
          <URI>lang/util/DictionaryBinding.java
          </URI>
          <URI>lang/Reflector.java
          </URI>
          <URI>data/sax/AbstractFrameHandler.java
          </URI>
          <URI>builder/PropertyBinding.java
          </URI>
          <URI>ui/Binding.java
          </URI>
        </resources>
      </scm:Change>
    </detail>
  </scm:Change>

  <scm:Change>
    <revision>0.3.15
    </revision>
    
    <authorId>miketoth
    </authorId>
    
    <date>2009-08-17
    </date>
    
    <notes>
      <scm:Note>Exception handling improvements in data SAX translator
      </scm:Note>
    </notes>
    
    <detail>
      <scm:Change>

        <date>2009-08-17
        </date>
        
        <notes>
          <scm:Note>Handle empty strings as null for StringConverter
            numeric types, instead of throwing a FormatException
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/util/string/StringConverter.java
        </path>

      </scm:Change>

      <scm:Change>

        <date>2009-08-17
        </date>
        
        <notes>
          <scm:Note>Report document position for DataExceptions and
            RuntimeExceptions that occur when translating XML to Channel
            values.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/data/sax/
        </path>
        
        <resources>
          <URI>DataHandler.java
          </URI>
          <URI>DataHandlerBase.java
          </URI>
          <URI>ForeignDataHandler.java
          </URI>
          <URI>DataSAXException.java
          </URI>          
        </resources>

      </scm:Change>
    </detail>
  </scm:Change>

  <scm:Change>
    <revision>0.3.14
    </revision>
    
    <authorId>miketoth
    </authorId>
    
    <date>2009-08-14
    </date>
    
    <notes>
      <scm:Note>Fixes for blind type resolution through lang package
      </scm:Note>
      <scm:Note>Data SAX package enhancements for automated construction of
        frame handler sets.
      </scm:Note>      
    </notes>
    
    <detail>
      <scm:Change>

        <date>2009-08-14
        </date>
        
        <notes>
          <scm:Note>Added a frame type designed specifically for reading
            field or list values in character form.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/data/sax/
        </path>
        
        <resources>
          <URI>ValueFrame.java
          </URI>
        </resources>

      </scm:Change>

      <scm:Change>

        <date>2009-08-11
        </date>
        
        <notes>
          <scm:Note>Fix NPE by throwing exception when an elementAssignment
            does not match any child element.
          </scm:Note>
          <scm:Note>Perform destination specific String type conversions for
            incoming character data when the textBinding is not expressed in
            the form of an assignment.
          </scm:Note>          
        </notes>
        
        <path>source/spiralcraft/data/sax/
        </path>
        
        <resources>
          <URI>AbstractFrameHandler.java
          </URI>
        </resources>

      </scm:Change>
    </detail>

    <detail>
      <scm:Change>

        <date>2009-08-10
        </date>
        
        <notes>
          <scm:Note>Differentiate TypeNotFoundException from errors loading
            a defined type.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/data/lang/
        </path>
        
        <resources>
          <URI>DataTypeModel.java</URI>
        </resources>

      </scm:Change>
    </detail>
  </scm:Change>

  <scm:Change>
    <revision>0.3.13
    </revision>
    
    <authorId>miketoth
    </authorId>
    
    <date>2009-08-07
    </date>
    
    <notes>
      <scm:Note>"Assign" Scenario runs Assignments within a Scenario
      </scm:Note>
      <scm:Note>Generics warnings cleanup required due to upgrade of Eclipse 
        compiler with more thorough LINT.
      </scm:Note>
    </notes>
    
    <detail>
      <scm:Change>

        <date>2009-08-07
        </date>
        
        <notes>
          <scm:Note>Task system refactor- not all Scenarios are chainable.
            Factored chain machinery into Chain subclass of Scenario, and
            handle automatic creation of a Sequence to group non-chainable
            elements together.
          </scm:Note>
          <scm:Note>"Assign" scenario runs assignments and defaults
          </scm:Note>
          <scm:Note>"When" scenario performs another scenario conditionally
          </scm:Note>
          
        </notes>
        
        <path>source/spiralcraft/
        </path>
        
        <resources>
          <URI>task/Assign.java</URI>
          <URI>task/When.java</URI>
          <URI>task/Exec.java</URI>
          <URI>task/Sequence.java</URI>
          <URI>task/Session.java</URI>
          <URI>task/TaskRunner.java</URI>
          <URI>task/Debug.java</URI>
          <URI>task/Chain.java</URI>
          <URI>task/Scenario.java</URI>
          <URI>task/Reference.java</URI>
          <URI>task/Batch.java</URI>
          <URI>data/task/Collect.java</URI>
          <URI>data/task/Fetch.java</URI>
          <URI>data/task/Edit.java</URI>
          <URI>data/sax/ParseXml.java</URI>
          <URI>vfs/task/Copy.java</URI>
          <URI>test/Test.java</URI>
          <URI>data/flatfile/Output.java</URI>
          <URI>data/flatfile/Scan.java</URI>
        </resources>

      </scm:Change>
      
      <scm:Change>

        <date>2009-08-07
        </date>
        
        <notes>
          <scm:Note>Fix: BeanArguments only processed the first short argument 
            in a clump of short arguments
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/exec/BeanArguments.java
        </path>

      </scm:Change>
      <scm:Change>

        <date>2009-08-07
        </date>
        
        <notes>Generics warnings cleanup triggered by Eclipse upgrade
        </notes>
        
        <path>source/spiralcraft/
        </path>
        
        <resources>
          <URI>data/spi/ArrayTuple.java</URI>
          <URI>data/spi/KeyedListAggregate.java</URI>
          <URI>data/spi/ArrayDeltaTuple.java</URI>
          <URI>data/spi/AbstractStore.java</URI>
          <URI>data/sax/AbstractFrameHandler.java</URI>
          <URI>data/reflect/ReflectionType.java</URI>
          <URI>data/reflect/ReflectionScheme.java</URI>
          <URI>data/session/BufferAggregate.java</URI>
          <URI>data/session/BufferType.java</URI>
          <URI>data/query/SetFilter.java</URI>
          <URI>data/query/Selection.java</URI>
          <URI>lang/spi/IterableContainsChannel.java</URI>
          <URI>lang/spi/ArrayConstructorChannel.java</URI>
          <URI>data/lang/DataReflector.java</URI>
          <URI>data/rest/RestService.java</URI>
          <URI>lang/util/DictionaryBinding.java</URI>
          <URI>data/builder/BuilderScheme.java</URI>
          <URI>data/builder/BuilderField.java</URI>
          <URI>task/BatchScenarioLegacy.java</URI>
        </resources>
      </scm:Change>
    </detail>
  </scm:Change>

  <scm:Change>
    <revision>0.3.12
    </revision>
    
    <authorId>miketoth
    </authorId>
    
    <date>2009-08-03
    </date>
    
    <notes>
      <scm:Note>Enhanced generic XML processing capabilities to meet
        requirements of XML Data schema interpretation and data processing
      </scm:Note>
    </notes>
    
    <detail>
      <scm:Change>

        <date>2009-07-28
        </date>
        
        <notes>
          <scm:Note>Refactored SAX API for developer ease of use in
            describing XML Frames- converted
            and deprecated XyzFrameHandler in favor of XyzFrame
          </scm:Note>
          <scm:Note>Added support for recursive xml via RecursiveFrame
            and use of a ClosureFocus at the cyclical boundary
          </scm:Note>

          <scm:Notes>More complete namespace management- expanded namespaces
            are used internally for all references and lookups.
          </scm:Notes> 
          <scm:Notes>Nodes with both elements and character data will be
            processed if allowMixedContent property is set
          </scm:Notes> 
          <scm:Note>Factored out redundancy between AttributeBinding and
            lang.DictionaryBinding by moving useful assignment code into
            DictionaryBinding and making AttributeBinding a subclass.
          </scm:Note>          
          <scm:Notes>ElementAssignments allow a Frame to post a value
            created by a child context into the Focus chain via Expressions
          </scm:Notes>
          <scm:Notes>Support proper generation of closed elements for empty 
            Tuples (eg. Type references) in the native XML format
          </scm:Notes>
          <scm:Note>DataHandler now appends aggregate field values to
            any pre-existing aggregate to ensure that deep prototype
            references work as expected.
          </scm:Note>
          <scm:Note>In DataHandlerBase, resolution of ref uris is now tolerant 
            to missing trailing slashes, and frames can be configured to allow 
            mixed content (elements and text) without throwing an exception.
          </scm:Note>
          <scm:Notes>ParseXml is a Scenario that retrieves and processes 
            XML content from a resolved URI.
          </scm:Notes>
          <scm:Notes>QueryXml is a Scenario based on ParseXml that constructs
            a Resource from the FocusChain context and extracts data objects
            from the returned XML.
          </scm:Notes>
        </notes>
    
        <path>source/spiralcraft/data/sax/
        </path>
        
        <resources>
          <URI>AbstractFrameHandler.java
          </URI>
          <URI>AggregateFrame.java
          </URI>
          <URI>AggregateFrameHandler.java
          </URI>
          <URI>AttributeBinding.java
          </URI>
          <URI>ContainerFrame.java
          </URI>
          <URI>ContainerFrameHandler.java
          </URI>
          <URI>DataHandler.java
          </URI>
          <URI>DataHandlerBase.java
          </URI>
          <URI>DataWriter.java
          </URI>
          <URI>ElementAssignment.java
          </URI>
          <URI>ForeignDataHandler.java
          </URI>
          <URI>ParseXml.java
          </URI>
          <URI>QueryXml.java
          </URI>
          <URI>PrefixMapping.java
          </URI>
          <URI>RecursiveFrame.java
          </URI>
          <URI>RootFrame.java
          </URI>
          <URI>RootFrameHander.java
          </URI>
          <URI>TupleFrame.java
          </URI>
          <URI>TupleFrameHander.java
          </URI>
        </resources>
    
      </scm:Change>  

      <scm:Change>

        <date>2009-08-02
        </date>
        
        <notes>
          <scm:Note>Fix issue where XmlAssembly wasn't automatically
            bound due to Assembly not being a FocusChainObject anymore
          </scm:Note>
        </notes>
    
        <path>source/spiralcraft/data/persist/
        </path>
        
        <resources>
          <URI>AbstractXMLObject.java
          </URI>
          
          <URI>XmlAssembly.java
          </URI>
        </resources>
    
      </scm:Change>  

      <scm:Change>

        <date>2009-08-02
        </date>
        
        <notes>
          <scm:Note>Fix issue where property descriptors in subclasses were
            duplicated in getAllProperties() 
          </scm:Note>
        </notes>
    
        <path>source/spiralcraft/beans/MappedBeanInfo.java
        </path>
    
      </scm:Change>  


      <scm:Change>

        <date>2009-07-28
        </date>
        
        <notes>
          <scm:Note>Make sure Aggregates are immutably copied when 
            constructing immutable Tuples (in addition to immutably 
            copying Tuples).
          </scm:Note>
        </notes>
    
        <path>source/spiralcraft/data/spi/
        </path>
        
        <resources>
          <URI>ArrayTuple.java
          </URI>
          <URI>EditableArrayListAggregate.java
          </URI>
        </resources>
    
      </scm:Change>  

      <scm:Change>

        <date>2009-07-28
        </date>
        
        <notes>
          <scm:Note>Genericized ReflectionField
          </scm:Note>
          <scm:Note>Allow external Types to register canonical class 
            mappings.
          </scm:Note>
        </notes>
    
        <path>source/spiralcraft/data/reflect/
        </path>
        
        <resources>
          <URI>ReflectionField.java
          </URI>
          <URI>ReflectionType.java
          </URI>
          <URI>ReflectionScheme.java
          </URI>
        </resources>
    
      </scm:Change>  
          
      <scm:Change>

        <date>2009-07-28
        </date>
        
        <notes>
          <scm:Note>Misc small fixes, debugging and exception data enhancements
          </scm:Note>
          <scm:Note>TypeImpl shows data in exception when fromData erroneously 
            called
          </scm:Note>
          <scm:Note>UnifiedFieldSet fixed NPE when type has no scheme
          </scm:Note>
          <scm:Note>PrimitiveTypeImpl reports value when toData() erroneously
            called. 
          </scm:Note>
          <scm:Note>FieldImpl throws exception when type set to null
          </scm:Note>
        </notes>
    
        <path>source/spiralcraft/data/
        </path>
        
        <resources>
          <URI>core/TypeImpl.java
          </URI>
          <URI>core/UnifiedFieldSet.java
          </URI>
          <URI>core/PrimitiveTypeImpl.java
          </URI>
          <URI>core/FieldImpl.java
          </URI>
        </resources>
    
      </scm:Change>    

      <scm:Change>

        <date>2009-07-28
        </date>
        
        <notes>
          <scm:Note>TypeType.toData(Type type) generates a Type reference
            via the use of new MetaType constructor specifically for
            generating Type definitions
          </scm:Note>
          <scm:Note>AbstractCollectionType.toData() now correctly uses
            canonical subtype of list object to perform the toData()
            conversion if the list object is a subtype of the native type
          </scm:Note>
          <scm:Note>AbstractAggregateType finds its MetaType by URI
            resolution with the ".type" suffix of local URI and not by 
            using ReflectionType.getCanonicalURI(getClass())
          </scm:Note>
        </notes>
    
        <path>source/spiralcraft/data/
        </path>
        
        <resources>
          <URI>types/meta/TypeType.java
          </URI>
          <URI>core/MetaType.java
          </URI>
          <URI>core/AbstractCollectionType.java
          </URI>
          <URI>core/AbstractAggregateType.java
          </URI>
        </resources>
    
      </scm:Change>    

      <scm:Change>

        <date>2009-07-28
        </date>
        
        <notes>
          <scm:Note>ExpressionType provides a toString() method for
            bidirectional persistence
          </scm:Note>
          <scm:Note>AnyType allows for heterogeneously typed values and list
            elements
          </scm:Note>
        </notes>
    
        <path>source/spiralcraft/data/types/standard/
        </path>
        
        <resources>
          <URI>ExpressionType.java
          </URI>
          <URI>AnyType.java
          </URI>
        </resources>
    
      </scm:Change>    

      <scm:Change>

        <date>2009-07-28
        </date>
        
        <notes>
          <scm:Note>Reflectors can now provide a list of available binding
            signatures for a given Source channel. The signatures are
            included in the Exception when a name reference failure occurs to
            assist a developer in finding the correct name.
          </scm:Note>
        </notes>
    
        <path>source/spiralcraft/
        </path>
        
        <resources>
          <URI>lang/Signature.java
          </URI>
          <URI>lang/Reflector.java
          </URI>
          <URI>lang/reflect/BeanReflector.java
          </URI>
          <URI>lang/spi/AbstractChannel.java
          </URI>
          <URI>data/lang/TupleReflector.java
          </URI>
        </resources>
    
      </scm:Change>    

      <scm:Change>

        <date>2009-07-23
        </date>
        
        <notes>
          <scm:Note>Namespace resolution mechanism tolerates missing trailing 
            slashes in resolved URIs.
          </scm:Note>
        </notes>
    
        <path>source/spiralcraft/lang/parser/AbsoluteFocusNode.java
        </path>
    
      </scm:Change>    

      <scm:Change>

        <date>2009-07-24
        </date>
        
        <notes>
          <scm:Note>ClosureFocus supports a RecursionContext, which re-binds
            escaped Channels at a deeper point in the Focus chain and
            on a recursion event, snapshots the deeper values, and pushes them
            into the shallower context before a recursive call, and pops them
            when the recursive call is complete.
          </scm:Note>
          <scm:Note>Fixed bug where the enclosedFocus would not work with
            more than 1 escaped Channel.
          </scm:Note>
        </notes>
    
        <path>source/spiralcraft/lang/spi/
        </path>
        
        <resources>
          <URI>ClosureFocus.java
          </URI>
        </resources>
    
      </scm:Change>    
          
      <scm:Change>

        <date>2009-07-22
        </date>
        
        <notes>
          <scm:Note>DictionaryBinding now supports using an assignment
            as the target, which allows an Expression to perform the
            String conversion as a function of the input.
          </scm:Note>
        </notes>
    
        <path>source/spiralcraft/lang/
        </path>
        
        <resources>
          <URI>util/DictionaryBinding.java
          </URI>
        </resources>
    
      </scm:Change>    
    
      <scm:Change>

        <date>2009-07-29
        </date>
        
        <notes>
          <scm:Note>Added initialAssignments and typeX properties to Session
             for better usability
          </scm:Note>
          <scm:Note>Added Debug task to conditionally log messages
          </scm:Note>
        </notes>
    
        <path>source/spiralcraft/task/
        </path>
        
        <resources>
          <URI>Session.java
          </URI>
          <URI>Debug.java
          </URI>
        </resources>
    
      </scm:Change>
    
      <scm:Change>

        <date>2009-07-29
        </date>
        
        <notes>
          <scm:Note>Ensure that VFS Resources use URLConnections in
            a ThreadSafe manner and do not leave open backing sockets.
          </scm:Note>
        </notes>
    
        <path>source/spiralcraft/vfs/url/URLResource.java
        </path>
    
      </scm:Change>

      <scm:Change>

        <date>2009-07-27
        </date>
        
        <notes>
          <scm:Note>Property specifier attribute "dataURI" is now 
            namespace aware
          </scm:Note>
        </notes>
    
        <path>source/spiralcraft/builder/AssemblyLoader.java
        </path>
    
      </scm:Change>
    </detail>
  </scm:Change>

  <scm:Change>
    <revision>0.3.11
    </revision>
    
    <authorId>miketoth
    </authorId>
    
    <date>2009-06-19
    </date>
    
    <detail>
    
      <scm:Change>

        <date>2009-06-19
        </date>
        
        <notes>
          <scm:Note>Added ability to associate arbitrary application state
            with an authentication session through 
            setAttribute(String name,Object value)
            and getAttribute(String name) methods.
          </scm:Note>
        </notes>
    
        <path>source/spiralcraft/security/auth/AuthSession.java
        </path>
    
      </scm:Change>

      <scm:Change>

        <date>2009-06-18
        </date>
        
        <notes>
          <scm:Note>New data task "Edit" to perform non-interactive buffered
            data manipulation
          </scm:Note>
          <scm:Note>Generics update in BufferChannel to support more type
            aware scenarios.
          </scm:Note>
        </notes>
    
        <path>source/spiralcraft/data/
        </path>
        
        <resources>
          <URI>task/Edit.java
          </URI>
          <URI>editor/EditorBase.java
          </URI>
          <URI>editor/TupleEditor.java
          </URI>
          <URI>session/BufferChannel.java
          </URI>
          <URI>session/BufferField.java
          </URI>
          <URI>lang/CursorBinding.java
          </URI>
        </resources>
        
    
      </scm:Change>
      
      <scm:Change>

        <date>2009-06-19
        </date>
        
        <notes>
          <scm:Note>Fix NPE reporting InvocationTargetException
          </scm:Note>
        </notes>
    
        <path>source/spiralcraft/lang/reflect/MethodTranslator.java
        </path>
    
      </scm:Change>

    </detail>
  </scm:Change>

  <scm:Change>
    <revision>0.3.10
    </revision>
    
    <authorId>miketoth
    </authorId>
    
    <date>2009-06-10
    </date>
    
    <detail>
    
      <scm:Change>

        <date>2009-06-10
        </date>
        
        <notes>
          <scm:Note>ContextDictionary throws an Exception if property is not
            found
          </scm:Note>
        </notes>
    
        <path>source/spiralcraft/util/ContextDictionary.java
        </path>
    
      </scm:Change>
          
      <scm:Change>

        <date>2009-06-10
        </date>
        
        <notes>
          <scm:Note>Fix problem turning Query debugging off
          </scm:Note>
        </notes>
    
        <path>source/spiralcraft/data/query/Query.java
        </path>
    
      </scm:Change>

      <scm:Change>

        <date>2009-06-10
        </date>
        
        <notes>
          <scm:Note>Data XML now provides mechanism to translate 
            ContextDictionary properties when contextAware attribute is set.
          </scm:Note>
        </notes>
    
        <path>source/spiralcraft/data/sax/
        </path>
    
        <resources>
          <URI>DataReader.java
          </URI>
          <URI>DataHandlerBase.java
          </URI>
        </resources>
        
      </scm:Change>
      
    </detail>

    
  </scm:Change>
  
  <scm:Change>
    <revision>0.3.9.1
    </revision>
    
    <authorId>miketoth
    </authorId>
    
    <date>2009-06-10
    </date>
    
    <notes>
      <scm:Note>NPE Fix for Selection filter when filter returns null
      </scm:Note>
    </notes>
    
    <path>source/spiralcraft/data/query/Selection.java
    </path>

    
  </scm:Change>

  <scm:Change>
    <revision>0.3.9
    </revision>
    
    <authorId>miketoth
    </authorId>
    
    <date>2009-06-05
    </date>
    
    <notes>
      <scm:Note>TupleReflector provides methods to create Assignment sets
        for new, default and fixed expressions associated with a FieldSet's
        fields.
      </scm:Note>
    </notes>
    
    <path>source/spiralcraft/data/lang/TupleReflector.java
    </path>
    
  </scm:Change>

  <scm:Change>
    <revision>0.3.8.2
    </revision>
    
    <authorId>miketoth
    </authorId>
    
    <date>2009-06-04
    </date>
    
    <notes>
      <scm:Note>When a BufferType is requested for a BufferType, simply return
        the specified BufferType instead of throwing an exception
      </scm:Note>
    </notes>
    
    <path>source/spiralcraft/data/
    </path>
    
    <resources>
      <URI>Type.java
      </URI>
    </resources>
    
  </scm:Change>

  <scm:Change>
    <revision>0.3.8.1
    </revision>
    
    <authorId>miketoth
    </authorId>
    
    <date>2009-06-03
    </date>
    
    <notes>
      <scm:Note>Test library updates- example Customer now has an id sequence
      </scm:Note>
      <scm:Note>Fix issue where buffer Type is requested for a buffer Type,
        although in out-of-bounds situation of duplicate ids
      </scm:Note>
      <scm:Note>Remove warning when Rule resolution re-entrance is encountered.
      </scm:Note>
    </notes>
    
    <path>source/spiralcraft/data/
    </path>
    
    <resources>
      <URI>Type.java
      </URI>
      
      <URI>core/TypeImpl.java
      </URI>
    </resources>
    
  </scm:Change>
  
  <scm:Change>
    <revision>0.3.8
    </revision>
    
    <authorId>miketoth
    </authorId>
    
    <date>2009-05-27
    </date>
    
    <detail>
    
      <scm:Change>
        <date>2009-05-27
        </date>
        
        <notes>
          <scm:Note>Provide a general means to set arbitrary Rules for any Type
          </scm:Note>
          <scm:Note>Moved Rule management from abstract Type to implementations
            due to dependency on linking behavior.
          </scm:Note>
          <scm:Note>RuleSet allows chaining other RuleSets, primarily 
            to accomodate archetype rules. 
          </scm:Note>
          <scm:Note>Provide link tracing functionality in the abstract Type
            as a way to debug linking issues.
          </scm:Note>
          <scm:Note>ThreadLocalStack can now provide an array of its contents
          </scm:Note>
        </notes>
    
        <path>source/spiralcraft/data/Type.java
        </path>
        <path>source/spiralcraft/data/core/AbstractAggregateType.java
        </path>
        <path>source/spiralcraft/data/core/TypeImpl.java
        </path>
        <path>source/spiralcraft/data/reflect/ReflectionType.java
        </path>
        <path>source/spiralcraft/rules/RuleSet.java
        </path>
        <path>source/spiralcraft/rules/Inspector.java
        </path>
        <path>source/spiralcraft/rules/Inspector.java
        </path>
        <path>source/spiralcraft/util/thread/ThreadLocalStack.java
        </path>
      </scm:Change>

      <scm:Change>
        <date>2009-05-27
        </date>
        
        <notes>
          <scm:Note>Added back to ArrayUtil some methods to deal with primitive
            arrays.
          </scm:Note>
        </notes>
    
        <path>source/spiralcraft/util/ArrayUtil.java
        </path>
      </scm:Change>
    </detail>
  </scm:Change>
    
  <scm:Change>
    <revision>0.3.7
    </revision>
    
    <authorId>miketoth
    </authorId>
    
    <date>2009-05-26
    </date>
    
    <notes>
      <scm:Note>Enhancements to Pool and to abstract data components to
        support additional implementations (ie. completion of SQL Store).
      </scm:Note>
      <scm:Note>Logging enhancements in query subsystem
      </scm:Note>
      <scm:Note>Made spiralcraft.util.ArrayUtil generic, eliminating lots of
        casting in client code
      </scm:Note>
      <scm:Note>NPE fix in BufferType.link()
      </scm:Note>      
    </notes>
    
    <detail>
      <scm:Change>
    
        <date>2009-05-26
        </date>
    
        <notes>
          <scm:Note>Initial round of logging enhancements to Query 
            subsystem. Queries and BoundQueries accept a debugLevel.
          </scm:Note>
        </notes>
    
        <path>source/spiralcraft/data/
        </path>
        
        <resources>
          <URI>query/BoundQuery.java
          </URI>
          <URI>query/Distinct.java
          </URI>
          <URI>query/Equijoin.java
          </URI>
          <URI>query/Query.java
          </URI>
          <URI>query/Scan.java
          </URI>
          <URI>query/Selection.java
          </URI>
          <URI>query/SetFilter.java
          </URI>
          <URI>query/Sort.java
          </URI>
          <URI>query/UnaryBoundQuery.java
          </URI>
          <URI>spi/AbstractAggregateQueryable.java
          </URI>
        </resources>
      </scm:Change>

      <scm:Change>
    
        <date>2009-05-26
        </date>
    
        <notes>
          <scm:Note>Fixed NPE in BufferType during link() when buffered type
            has key fields but no primary key
          </scm:Note>
        </notes>
    
        <path>source/spiralcraft/data/session/BufferType.java
        </path>
      </scm:Change>

      <scm:Change>
    
        <date>2009-05-25
        </date>
    
        <notes>
          <scm:Note>Made spiralcraft.util.ArrayUtil generic, eliminating lots of
        casting in client code
          </scm:Note>
        </notes>
    
        <path>source/spiralcraft/
        </path>
    
        <resources>
          <URI>builder/AssemblyClass.java
          </URI>
          <URI>data/session/BufferTuple.java
          </URI>
          <URI>data/spi/ArrayDeltaTuple.java
          </URI>
          <URI>exec/Executor.java
          </URI>
          <URI>sax/Element.java
          </URI>
          <URI>shell/ArgumentSet.java
          </URI>
          <URI>task/AbstractTask.java
          </URI>
          <URI>time/Clock.java
          </URI>
          <URI>util/Path.java
          </URI>
          <URI>util/ArrayUtil.java
          </URI>
        </resources>
      </scm:Change>

      <scm:Change>
    
        <date>2009-05-24
        </date>
    
        <notes>
          <scm:Note>Refactor XmlStore generic code into AbstractStore, so
            SqlStore can share 
          </scm:Note>
          <scm:Note>Eliminated Registrant interface as a means of configuration
            for Store,Sequence, and Space and moved to internal resolve() 
            method triggered by Lifecycle.
          </scm:Note>
          <scm:Note>Made ArrayDeltaTuple more typesafe by making Tuple
            constructor a DeltaTuple constructor
          </scm:Note>
        </notes>
    
        <path>source/spiralcraft/data/
        </path>
    
        <resources>
          <URI>xml/XmlStore.java
          </URI>
          <URI>spi/AbstractStore.java
          </URI>
          <URI>Sequence.java
          </URI>
          <URI>spi/ArrayDeltaTuple.java
          </URI>
        </resources>
      </scm:Change>

      <scm:Change>
    
        <date>2009-05-23
        </date>
    
        <notes>
          <scm:Note>Pool enhancements for use by SQL package- genericized,
            updated logging code, and removed Registrant interface (until
            useful again for monitoring).
          </scm:Note>
        </notes>
    
        <path>source/spiralcraft/pool/
        </path>
    
        <resources>
          <URI>Pool.java
          </URI>
          <URI>ResourceFactory.java
          </URI>
          <URI>ThreadPool.java
          </URI>
        </resources>
      </scm:Change>
      
    </detail>
  </scm:Change>
  
  <scm:Change>
    <revision>0.3.6
    </revision>
    
    <authorId>miketoth
    </authorId>
    
    <date>2009-05-22
    </date>
    
    <notes>
      <scm:Note>Fixed whitespace handling for attributes in XML fragment
        parser
      </scm:Note>
    </notes>
    
    <path>source/spiralcraft/text/xml/LiteralReader.java
    </path>
  </scm:Change>


  <scm:Change>
    <revision>0.3.5
    </revision>
    
    <authorId>miketoth
    </authorId>
    
    <date>2009-05-21
    </date>
    
    <notes>
      <scm:Note>New SetFilter query for testing inclusion in a set
      </scm:Note>
      <scm:Note>Array literals in lang  [ type expression ][{x0, x1, ...}]
      </scm:Note>
      <scm:Note>"contains" operator [ set ?= value ] for lang
      </scm:Note>
      <scm:Note>Unit test system enhancements for managing and reporting test
        results. 
      </scm:Note>
      <scm:Note>Added "enum" handling to ReflectionType datatypes 
      </scm:Note>
      <scm:Note>Regression fixes, minor syntax enhancements
      </scm:Note>
    </notes>
    
    <detail>
      <scm:Change>
        <date>2009-05-21
        </date>
        
        <notes>
          <scm:Note>"Collect" scenario- made property aggregateX instead of X
            for more descriptive name
          </scm:Note>
          <scm:Note>Fixed ContextNode NPE when no Focus node is provided as a
            source
          </scm:Note>
          <scm:Note>"Reference" scenario now has setter methods
          </scm:Note>

        </notes>
        
        <path>source/spiralcraft/
        </path>
        
        <URI>data/task/Collect.java
        </URI>
        <URI>lang/parser/ContextNode.java
        </URI>
        <URI>task/Reference.java
        </URI>
      </scm:Change>

      <scm:Change>
        <date>2009-05-21
        </date>
        
        <notes>
          <scm:Note>Handle Enums properly in ReflectionType by looking up
            a StringConverter, and ensuring that Enums are primitive.
          </scm:Note>

        </notes>
        
        <path>source/spiralcraft/
        </path>
        
        <URI>data/reflect/ReflectionType.java
        </URI>
      </scm:Change>

      <scm:Change>
        <date>2009-05-21
        </date>
        
        <notes>
          <scm:Note>Completed "Reference" scenario
          </scm:Note>

        </notes>
        
        <path>source/spiralcraft/task/
        </path>
        
        <URI>Reference.java
        </URI>
      </scm:Change>
      
      <scm:Change>
        <date>2009-05-21
        </date>
        
        <notes>
          <scm:Note>Improved management and reporting of test results via 
            TestGroup.
          </scm:Note>
          <scm:Note>Added standard assertion mechanism
          </scm:Note>

        </notes>
        
        <path>source/spiralcraft/test/
        </path>
        
        <resources>
          <URI>Assertion.java
          </URI>
          <URI>Stub.java
          </URI>
          <URI>Test.java
          </URI>
          <URI>TestFailedException.java
          </URI>
          <URI>TestGroup.java
          </URI>
          <URI>TestResult.java
          </URI>
        </resources>
      </scm:Change>

      <scm:Change>
        <date>2009-05-13
        </date>
        
        <notes>
          <scm:Note>New SetFilter query for testing source data for inclusion 
            in a set.
          </scm:Note>
          <scm:Note>Split up huge "factorNode" method in Select query in
            preparation for future additional optimizable nodes.
          </scm:Note>
          <scm:Note>Provide integral support for an aggregate "contains"
            operation.  
          </scm:Note>
          <scm:Note>Added support for array creation to assist with literal
            sets.
          </scm:Note>
          <scm:Note>Completed implementation of ClosureFocus to transfer
            bound Channel data to another thread via a Closure object.
          </scm:Note>
          <scm:Note>CurrentFocus node accepts scanner token so it can
            reconstruct itself properly
          </scm:Note>          

        </notes>
        
        <path>source/spiralcraft/
        </path>
        
        <resources>
          <URI>data/query/SetFilter.java
          </URI>
          <URI>data/query/Selection.java
          </URI>
          <URI>lang/spi/ClosureFocus.java
          </URI>
          <URI>lang/spi/ArrayConstructorChannel.java
          </URI>
          <URI>lang/spi/ArrayContainsChannel.java
          </URI>
          <URI>lang/spi/IterableContainsChannel.java
          </URI>
          <URI>lang/parser/ContainsNode.java
          </URI>
          <URI>lang/parser/CurrentFocusNode.java
          </URI>
          <URI>lang/parser/ExpressionParser.java
          </URI>
          <URI>lang/parser/Node.java
          </URI>
          <URI>lang/parser/SubscriptNode.java
          </URI>
          <URI>lang/reflect/ArrayReflector.java
          </URI>
          <URI>lang/reflect/BeanReflector.java
          </URI>
          
        </resources>
      </scm:Change>

      <scm:Change>
        <date>2009-05-12
        </date>
        
        <notes>
          <scm:Note>Provide the ability to include namespace prefixes in
            spiralcraft.data XML file "ref" attributes, by requiring that
            absolute URIs in the ref attribute value be prefixed by a ":"
          </scm:Note>
          <scm:Note>These attributes are almost always coded by hand, 
            especially when they reference absolute URIs, so they should
            use the existing namespace prefixes.
          </scm:Note>
          <scm:Note>Provided a deprecation warning when using an absolute URI
            with no ":" prefix to maintain backward compatibility.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/
        </path>
        
        <resources>
          <URI>data/sax/DataHandler.java
          </URI>
          <URI>data/sax/DataHandlerBase.java
          </URI>
        </resources>
      </scm:Change>

      <scm:Change>
        <date>2009-05-11
        </date>
        
        <notes>
          <scm:Note>Make sure queries with no Scans are solved by the Space
            itself, since no Stores will be consulted. Added unit tests
            for use with ReferenceQuery to verify.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/
        </path>
        
        <resources>
          <URI>data/Space.java
          </URI>
        </resources>
      </scm:Change>
    </detail>
    
  </scm:Change>

        
  <scm:Change>
    <revision>0.3.4
    </revision>
    
    <authorId>miketoth
    </authorId>
    
    <date>2009-05-11
    </date>
    
    <notes>
      <scm:Note>Ongoing spiralcraft-sql module support and integration
      </scm:Note>
    </notes>

        
    <detail>
      <scm:Change>
        <date>2009-05-09
        </date>
        
        <notes>
          <scm:Note>Fix regression issues and issues exposed with new
            functionality.
          </scm:Note>
          <scm:Note>Correct exception in PrimitiveTypeImpl.toString() to
            show the correct target type instead of "String"
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/
        </path>
        
        <resources>
          <URI>data/core/PrimitiveTypeImpl.java
          </URI>
        </resources>
      </scm:Change>

      <scm:Change>
        <date>2009-05-09
        </date>
        
        <notes>
          <scm:Note>Fix regression issues and issues exposed with new
            functionality.
          </scm:Note>
          <scm:Note>Prevent a BufferTuple from being created with a non-buffer
            Type.
          </scm:Note>
          <scm:Note>Fetch updater using archetype of BufferType, which is
            original type, because Space doesn't know about the buffer type.
          </scm:Note>
          <scm:Note>External logging added to DataWriter.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/data/
        </path>
        
        <resources>
          <URI>session/BufferTuple.java
          </URI>
          <URI>sax/DataWriter.java
          </URI>
        </resources>
      </scm:Change>

      <scm:Change>
        <date>2009-05-08
        </date>
        
        <notes>
          <scm:Note>Fixed issue where Tuple.set("field",value) syntax
            did not recognize fields in base-type.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/
        </path>
        
        <resources>
          <URI>data/spi/EditableArrayTuple.java
          </URI>
        </resources>
      </scm:Change>

      <scm:Change>
        <date>2009-05-06
        </date>
        
        <notes>
          <scm:Note>Enhanced builder exceptions to show list of available
            properties when a property is not found.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/
        </path>
        
        <resources>
          <URI>beans/MappedBeanInfo.java
          </URI>
          <URI>builder/PropertyBinding.java
          </URI>
          <URI>builder/PropertySpecifier.java
          </URI>
          <URI>data/builder/BuilderField.java
          </URI>
          <URI>data/builder/BuilderType.java
          </URI>
        </resources>
      </scm:Change>
      
      <scm:Change>
        <date>2009-05-04
        </date>

        <notes>
          <scm:Note>Enhancements to flat file data handling and integration
            into task/scenario architecture.
          </scm:Note>
          

          <scm:Note>More informative DataException reporting, as well as
            better reporting for bad record reading.
          </scm:Note>
          
          <scm:Note>FlatFile cursors have an error tolerant mode which skips
            bad records.
          </scm:Note>

          <scm:Note>New IO classes ConsumableFileInputStream and
            FileBufferedInputStream for efficiency when reading huge or
            very granular network input streams.
          </scm:Note>

          <scm:Note>Default formatter does not dump stack trace for
            INFO level exceptions.
          </scm:Note>
          
          <scm:Note>CursorAggregate support for reading subset of records
            in cursor.
          </scm:Note>
          
          <scm:Note>TypeImpl now re-uses its integral FieldSet to preserve
            identity relationship that components depend on.
          </scm:Note>
          
          <scm:Note>TypeImpl now re-uses its integral FieldSet to preserve
            identity relationship that components depend on, and disallows
            call to getFieldSet() before type is linked in order to enforce
            consistency. TupleReflector changed to avoid unnecessary call
            to getFieldSet() before Type is linked.
          </scm:Note>
        </notes>
        
        <resources>
          <URI>source/spiralcraft/log/DefaultFormatter.java
          </URI>
          <URI>source/spiralcraft/data/flatfile/DelimitedRecordFormat.java
          </URI>
          <URI>source/spiralcraft/data/flatfile/FieldMapping.java
          </URI>
          <URI>source/spiralcraft/data/flatfile/Output.java
          </URI>
          <URI>source/spiralcraft/data/flatfile/RecordCursor.java
          </URI>
          <URI>source/spiralcraft/data/flatfile/ScrollableRecordCursor.java
          </URI>
          <URI>source/spiralcraft/data/flatfile/Scan.java
          </URI>
          <URI>source/spiralcraft/data/core/TypeImpl.java
          </URI>
          <URI>source/spiralcraft/data/core/UnifiedFieldSet.java
          </URI>
          <URI>source/spiralcraft/data/lang/TupleReflector.java
          </URI>
          <URI>source/spiralcraft/data/access/CursorAggregate.java
          </URI>
          <URI>source/spiralcraft/data/DataException.java
          </URI>
          <URI>source/spiralcraft/io/ConsumableFileInputStream.java
          </URI>
          <URI>source/spiralcraft/io/FileBufferedInputStream.java
          </URI>
        </resources>
      </scm:Change>

      <scm:Change>
        <date>2009-05-04
        </date>

        <notes>
          <scm:Note>Support Pattern matching rules for data StringType, and
            better exception handling for Rules.
          </scm:Note>
          
          <scm:Note>Added core support for java.util.regex.Pattern as
            a primitive data type.
          </scm:Note>

        </notes>
        
        <resources>
          <URI>source/spiralcraft/util/string/StringConverter.java
          </URI>
          <URI>source/spiralcraft/rules/PatternRule.java
          </URI>
          <URI>source/spiralcraft/rules/RuleException.java
          </URI>
          <URI>source/spiralcraft/rules/Violation.java
          </URI>
          <URI>source/spiralcraft/data/types/standard/PatternType.java
          </URI>
          <URI>source/spiralcraft/data/types/standard/StringType.java
          </URI>
          <URI>source/spiralcraft/data/reflect/ReflectionType.java
          </URI>
        </resources>
      </scm:Change>

      <scm:Change>
        <date>2009-05-04
        </date>

        <notes>
          <scm:Note>Enhancements to TaskRunner to support command line
            utility development
          </scm:Note>
          
          <scm:Note>Added method to retrieve remaining command arguments
            when delegating execute(String ...)
          </scm:Note>

          <scm:Note>Option to dynamically load and chain Scenarios in TaskRunner
            via command line arguments, to allow for Scenario assemblies to
            be re-used in either a command line or embedded context.
          </scm:Note>

          <scm:Note>Suppress redundant exception reporting in TaskCommand
          </scm:Note>
        </notes>
        
        <resources>
          <URI>source/spiralcraft/exec/Arguments.java
          </URI>
          <URI>source/spiralcraft/task/TaskRunner.java
          </URI>
          <URI>source/spiralcraft/task/TaskCommand.java
          </URI>
        </resources>
      </scm:Change>

      <scm:Change>
        <date>2009-05-01
        </date>

        <notes>
          <scm:Note>Added shutdown hook to Scheduler to prevent running
            tasks after shutdown is initiated
          </scm:Note>
        </notes>
        
        <resources>
          <URI>source/spiralcraft/time/Scheduler.java
          </URI>
        </resources>
      </scm:Change>

      <scm:Change>
        <date>2009-05-01
        </date>

        <notes>
          <scm:Note>Automated regression testing facility enhancements
            related to staging data for various stores.
          </scm:Note>
 
          <scm:Note>Scenario model now supports a chain pattern for
            fluent setup.
          </scm:Note>
          
          <scm:Note>Removed excessive generics usage from Scenario model
            and de-emphasized command result path as a data path. Command
            result path is essentially a control path in this model, as
            the data path should be through the FocusChain.
          </scm:Note>

          <scm:Note>VFS supports a copy from classpath function useful for
            using built-in data to stage a test from scratch. This works
            with local classloaders by interpreting the the jar or file URL,
            in conjuction with the pattern search tool.
          </scm:Note>
          
          <scm:Note>vfs now has a JarResource and FileResource
          </scm:Note>
          
          <scm:Note>PathPattern now accepts a prefix, so the pattern
            doesn't need to include it, if the usage only supplies 
            absolute paths.
          </scm:Note>
          
          <scm:Note>Added error handling to vfs and generic task components to 
           deal with secondary cases and more error conditions, and multiple
           Exceptions in multi-task models. 
          </scm:Note>

          <scm:Note>Added spiralcraft.data.task.Collect to manage an
            Aggregate to collect results of batch tasks. 
          </scm:Note>


          <scm:Note>Built ClosureFocus to provide automatic thread-inheritable
            context for tasks which spawn threads.
          </scm:Note>
          
        </notes>
        
        <path>/source/spiralcraft
        </path>
          
        <resources>
          <URI>vfs/task/Copy.java
          </URI>
          <URI>vfs/jar/JarFileResource.java
          </URI>
          <URI>vfs/jar/JarResourceFactory.java
          </URI>
          <URI>vfs/filters/PatternFilter.java
          </URI>
          <URI>vfs/filters/NameGlobFilter.java
          </URI>
          <URI>vfs/file/FileResource.java
          </URI>
          <URI>vfs/classpath/ClasspathResource.java
          </URI>
          <URI>vfs/batch/Search.java
          </URI>
          <URI>vfs/AbstractResource.java
          </URI>
          <URI>vfs/Resolver.java
          </URI>
          <URI>util/Path.java
          </URI>
          <URI>util/PathPattern.java
          </URI>
          <URI>util/MultiException.java
          </URI>
          <URI>task/AbstractTask.java
          </URI>
          <URI>task/Batch.java
          </URI>
          <URI>task/Exec.java
          </URI>
          <URI>task/Reference.java
          </URI>
          <URI>task/MultiTask.java
          </URI>
          <URI>task/ParallelTask.java
          </URI>
          <URI>task/Scenario.java
          </URI>
          <URI>task/Sequence.java
          </URI>
          <URI>task/SerialTask.java
          </URI>
          <URI>task/TaskCommand.java
          </URI>
          <URI>task/TaskListener.java
          </URI>
          <URI>task/TaskRunner.java
          </URI>
          <URI>test/Stub.java
          </URI>
          <URI>test/Test.java
          </URI>
          <URI>test/TestGroup.java
          </URI>
          <URI>test/TestResult.java
          </URI>
          <URI>io/InputStreamWrapper.java
          </URI>
          <URI>data/util/DataBatchProcessor.java
          </URI>
          <URI>data/task/Collector.java
          </URI>
          <URI>data/task/Fetch.java
          </URI>
          <URI>lang/spi/ClosureFocus.java
          </URI>
          <URI>lang/spi/ThreadLocalChannel.java
          </URI>
        </resources>              
      </scm:Change>
      
      <scm:Change>
        <date>2009-04-30
        </date>
        
        <notes>
          <scm:Note>Refactor Space to support multiple Stores, as originally
            intended. class SingleSpace has been removed in favor of a 
            concrete spiralcraft.data.Space.
          </scm:Note>
          <scm:Note>Query supports recursive search for Scan types to 
            better narrow the set of stores to Query. This function was moved
            from AbstractStore.
          </scm:Note>
          <scm:Note>Query resolution should use the Focus chain to obtain the 
            relevant Space in which to recursively solve the query. Implemented
            in AbstractStore.
          </scm:Note>
          <scm:Note>Store interface is now a Service, and provides new method
            isAuthoritative to identify master store when multiple stores 
            support a Type.
          </scm:Note>
          <scm:Note>XmlStore defines authoritative types from the 
            XmlQueryable tables and from base types that have Sequence fields.
          </scm:Note>
        </notes>
        
        <path>/source/spiralcraft/data/
        </path>
        
        <resources>
          <URI>spi/SingleSpace.java
          </URI>
          <URI>Space.java
          </URI>
          <URI>query/Query.java
          </URI>
          <URI>query/Concatenation.java
          </URI>
          <URI>query/ConcatenationBinding.java
          </URI>
          <URI>spi/AbstractStore.java
          </URI>
          <URI>xml/XmlStore.java
          </URI>
          <URI>access/Store.java
          </URI>
        </resources>
        
      </scm:Change>
      
      <scm:Change>
        <date>2009-04-30
        </date>
        
        <notes>
          <scm:Note>Summary- Fix builder regression for persistence mechanism,
            which got tripped up on some other issues.
          </scm:Note>
          <scm:Note>MappedBeaninfo provides a CovariantPropertyType service,
            because java.beans.PropertyDescriptor is not powerful enough
            for Covariants and Generics.
          </scm:Note>
          <scm:Note>We now avoid instantiating and configuring assemblies
            created by default PropertySpecifiers.
          </scm:Note>
          <scm:Note>More intelligent property type resolution in 
            PropertySpecifier via MappedBeanInfo
          </scm:Note>
          <scm:Note>java.lang types are now explicitly dealt with in 
            AssemblyClass, so they do not get in the way of other unqualified 
            declarations for "local" assys.
          </scm:Note>
          <scm:Note>For consistency, PropertySpecifiers will always contain
            a "default" AssemblyClass, which will not be instantiated, but will
            serve as a discovery mechanism for the part of the object subgraph
            it manages. There is no longer a distinction between 
            getProperty() and discoverProperty(), but leaving the method in
            for compatibility.
          </scm:Note>
          <scm:Note>Clarified TypeMismatchException output
          </scm:Note>
          <scm:Note>ClassUtil has tool to determine root type of
            ParameterizedType
          </scm:Note>
          <scm:Note>ObjectType is no longer primitive, and can be assigned
            from anything but Void.
          </scm:Note>
          <scm:Note>data.reflect.ReflectionType now uses type inference 
            mechanism from lang.reflect package to handle java.beans
            issues in an identical fashion.
          </scm:Note>
          <scm:Note>Fields now get log from base class
          </scm:Note>
        </notes>
        
        <path>/source/spiralcraft/
        </path>
        
        <resources>
          <URI>beans/MappedBeanInfo.java
          </URI>
          <URI>builder/Assembly.java
          </URI>
          <URI>builder/AssemblyClass.java
          </URI>
          <URI>builder/PropertyBinding.java
          </URI>
          <URI>builder/PropertySpecifier.java
          </URI>
          <URI>data/TypeMismatchException.java
          </URI>
          <URI>data/types/standard/ObjectType.java
          </URI>
          <URI>data/reflect/ReflectionScheme.java
          </URI>
          <URI>data/reflect/ReflectionField.java
          </URI>
          <URI>util/lang/ClassUtil.java
          </URI>
          <URI>lang/reflect/BeanPropertyTranslator.java
          </URI>
          <URI>lang/reflect/BeanReflector.java
          </URI>
          <URI>data/builder/BuilderField.java
          </URI>
          <URI>data/builder/BuilderScheme.java
          </URI>
          <URI>data/builder/BuilderType.java
          </URI>
          <URI>data/core/CalculatedFieldImpl.java
          </URI>
          <URI>data/core/CalculatedFieldImpl.java
          </URI>
          <URI>data/core/FieldImpl.java
          </URI>
          <URI>data/core/KeyField.java
          </URI>
          <URI>data/core/QueryField.java
          </URI>
        </resources>
        
      </scm:Change>

      <scm:Change>
        <date>2009-04-29
        </date>
        
        <notes>
          <scm:Note>Provide encapsulation of standard Transaction management
            logic in a WorkUnit callback object
          </scm:Note>
        </notes>
        
        <path>/source/spiralcraft/data/transaction/
        </path>
        
        <resources>
          <URI>Transaction.java</URI>
          <URI>WorkUnit.java</URI>
          <URI>WorkException.java</URI>
        </resources>
        
      </scm:Change>

      <scm:Change>
        <date>2009-04-26
        </date>
        
        <notes>
          <scm:Note>Refactor Cursor interface to account for need to use
            close(), and removal of legacy requirement to avoid name 
            clash using the dataXXX method names.
          </scm:Note>
        </notes>
        
        <path>/source/spiralcraft/
        </path>
        
        <resources>
          <URI>data/access/Cursor.java</URI>
          <URI>data/access/SerialCursor.java</URI>
          <URI>data/access/ScrollableCursor.java</URI>
          <URI>data/access/CursorAggregate.java</URI>
          <URI>data/access/DataSynchronizer.java</URI>
          <URI>data/core/KeyField.java</URI>
          <URI>data/core/QueryField.java</URI>
          <URI>data/core/UniqueRule.java</URI>
          <URI>data/flatfile/RecordCursor.java</URI>
          <URI>data/flatfile/ScrollableRecordCursor.java</URI>
          <URI>data/lang/CursorBinding.java</URI>
          <URI>data/lang/TupleFocus.java</URI>
          <URI>data/query/QueryAggregate.java</URI>
          <URI>data/query/BoundQuery.java</URI>
          <URI>data/query/UnaryBoundQuery.java</URI>
          <URI>data/query/Sort.java</URI>
          <URI>data/query/Shuffle.java</URI>
          <URI>data/query/Equijoin.java</URI>
          <URI>data/query/Selection.java</URI>
          <URI>data/query/Distinct.java</URI>
          <URI>data/query/UnionBinding.java</URI>
          <URI>data/query/QueryChannel.java</URI>
          <URI>data/task/Fetch.java</URI>
          <URI>data/spi/AbstractAggregateQueryable.java</URI>
          <URI>data/spi/CursorIterator.java</URI>
          <URI>data/spi/ListCursor.java</URI>
          <URI>data/spi/ManualCursor.java</URI>
          <URI>security/spi/DataAuthenticator.java</URI>
          <URI>data/xml/XmlStore.java</URI>
        </resources>
        
      </scm:Change>
      
      <scm:Change>
        <date>2009-04-26
        </date>
        
        <path>/source/spiralcraft/test/
        </path>
        
        <notes>
          <scm:Note>A package for implementing automated test cases built on 
            the Task/Scenario system, to produce TestResults in a wide variety
            of scenarios. 
          </scm:Note>
        </notes>
      </scm:Change>
      
      <scm:Change>
        <date>2009-04-26
        </date>
        
        <path>/source/spiralcraft/command/BoundCommandFactory.java
        </path>
        
        <notes>
          <scm:Note>Encapsulates the situation where a Command is specified
            by an Expression or other device resolved against the Focus chain.
          </scm:Note>
          <scm:Note>This anticipates
            that Expression driven command resolution will need to support
            just-in time customization of the generated Command objects via
            property injection, for more control in the declarative layer.
          </scm:Note>
        </notes>
        
      </scm:Change>
          
      <scm:Change>
        <date>2009-04-26
        </date>
        
        <path>/source/spiralcraft/builder/PropertyBinding.java
        </path>
        
        <notes>
          <scm:Note>Builder resolves namespaces in Expressions when
            the target is of type Expression, before
            applying the Expression object to the target.
          </scm:Note>
        </notes>
        
      </scm:Change>

      <scm:Change>
        <date>2009-04-26
        </date>
        
        <path>/source/
        </path>
        
        <resources>
          <URI>spiralcraft/vfs/Initializer.java
          </URI>
          <URI>spiralcraft/vfs/Resolver.java
          </URI>
          <URI>META-INF/services/spiralcraft.common.Initializer
          </URI>
        </resources>
        
        <notes>
          <scm:Note>Register a StringConverter for Resource objects
          </scm:Note>
        </notes>
      </scm:Change>
      
      <scm:Change>
        <date>2009-04-26
        </date>
        
        <path>/source/spiralcraft/data/
        </path>
        
        <resources>
          <URI>spi/SingleSpace.java
          </URI>
          <URI>spi/AbstractStore.java
          </URI>
          <URI>xml/XmlStore.java
          </URI>
        </resources>
        
        <notes>
          <scm:Note>Debugging and logging functionality
          </scm:Note>
          <scm:Note>Startup assertion- ensure that Store is started when
             trying to query.
          </scm:Note>
          <scm:Note>XmlStore now calls super Lifecycle interface
          </scm:Note>
          <scm:Note>Space now implements Service, which extends Registrant. 
            Removed redundant implements Registrant declaration from
            SingleSpace.
          </scm:Note>
        </notes>
      </scm:Change>
      
      <scm:Change>
        <date>2009-04-24
        </date>
        
        <path>/source/spiralcraft
        </path>
        
        <resources>
          <URI>task/*
          </URI>
          <URI>data/task/Fetch.java
          </URI>
          <URI>data/util/DataBatchProcessor.java
          </URI>
        </resources>
        
        
        <notes>
          <scm:Note>Scenario is now a CommandFactory, and always creates 
            TaskCommands to allow for interaction between tasks.
          </scm:Note>
          <scm:Note>Created Fetch to run data queries from a Task
          </scm:Note>
          <scm:Note>Added stateless result processing chain to Task
             infrastructure
          </scm:Note>
          <scm:Note>TaskRunner publishes the Service tree into into the
            Focus.
          </scm:Note>
          <scm:Note>Clarified Scenario hierarchical compositional model.
          </scm:Note>
          <scm:Note>Refactored the BatchScenario into multiple components-
            Batch, Reference and Exec.
          </scm:Note>
        </notes>
      </scm:Change>
    </detail>
    
  </scm:Change>
  
  <scm:Change>
    <revision>0.3.3
    </revision>
    
    <date>2009-04-21
    </date>
    
    <authorId>miketoth
    </authorId>
    
    <notes>
      <scm:Note>Ongoing spiralcraft-sql module support and integration
      </scm:Note>
    </notes>
    

    <detail>
      <scm:Change>
        <date>2009-04-21
        </date>
        
        <path>/source/spiralcraft/io/
        </path>
        
        <resources>
          <URI>FileSequence.java</URI>
          <URI>RotatingFileOutputAgent.java</URI>
        </resources>
        
        <notes>
          <scm:Note>Handle situation where log fails to rotate because file
            is opened by something else. Put off rotate for 2 seconds
            default.
          </scm:Note>
        </notes>
      </scm:Change>

      <scm:Change>
        <date>2009-04-20
        </date>
        
        <path>/source/spiralcraft/data/sax/
        </path>
        
        <resources>
          <URI>DataHandler.java</URI>
          <URI>DataHandlerBase.java</URI>
          <URI>DataReader.java</URI>
          <URI>DataSAXException.java</URI>
        </resources>
        
        <notes>
          <scm:Note>Ensure that document location is provided for parser
            generated SAX exceptions
          </scm:Note>
        </notes>
      </scm:Change>

      <scm:Change>
        <date>2009-04-20
        </date>
        
        <path>/source/spiralcraft/builder/AssemblyLoader.java
        </path>
        
        <notes>
          <scm:Note>Write dataURI builder attribute to PropertySpecifier
          </scm:Note>
        </notes>
      </scm:Change>
    
      <scm:Change>
        <date>2009-04-20
        </date>
        
        <path>/source/spiralcraft/task/TaskRunner.java
        </path>
        
        <notes>
          <scm:Note>Throw better exception when no scenario configured
          </scm:Note>

          <scm:Note>Integrate a Service (or ServiceGroup) to be run
            along with the Scenario.
          </scm:Note>
        </notes>
      </scm:Change>

      <scm:Change>
        <date>2009-04-20
        </date>
        
        <resources>
          <URI>/source/spiralcraft/data/persist/AbstractXmlObject.java
          </URI>
        </resources>
            
        
        <notes>
          <scm:Note>Renamed method create() to activate(). New method
             create() only instantiates object.
          </scm:Note>
        </notes>
        
        <detail>
        
          <resources>
            <URI>/source/spiralcraft/builder/PropertyBinding.java
            </URI>
            <URI>/source/spiralcraft/exec/Executor.java
            </URI>
            <URI>/source/spiralcraft/task/BatchScenario.java
            </URI>
          </resources>
          
          <notes>
            <scm:Note>Refactoring sorted out
            </scm:Note>
          </notes>
        </detail>
      </scm:Change>

      <scm:Change>
        <date>2009-04-20
        </date>
        
        <path>/source/spiralcraft/data/reflect/
        </path>
        
        <resources>
          <URI>ReflectionType.java
          </URI>
          <URI>ReflectioTypeFactory.java
          </URI>
        </resources>
        
        <notes>
          <scm:Note>Remove spiralcraft.data related ClassNotFoundException that
           prints to stderr. Move to using ClassLog instead of stderr
          </scm:Note>
        </notes>
        
      </scm:Change>
      
      <scm:Change>
        <date>2009-04-20
        </date>
        
        <resources>
          <URI>/source/spiralcraft/service/Service.java
          </URI>
          <URI>/source/spiralcraft/service/ThreadService.java
          </URI>
          <URI>/source/spiralcraft/service/ServiceGroup.java
          </URI>
        </resources>
        
        <notes>
          <scm:Note>spiralcraft.service.Service interface now extends
             Registrant, as many components that fit in the Service role
             are also Registrants, and would benefit from top-down
             reachability.
          </scm:Note>
        </notes>
        <detail>

          
          <scm:Change>
            <path>/source/spiralcraft/data/Space
            </path>
            
            <notes>
              <scm:Note>Implements Service
              </scm:Note>
            </notes>
          </scm:Change>
          
          <scm:Change>
            <notes>
              <scm:Note>ServiceAdapter obsoleted
              </scm:Note>
              
            </notes>
            <resources>
              <URI>/source/spiralcraft/service/ServiceAdapter.java
              </URI>
              <URI>/source/spiralcraft/service/ThreadService.java
              </URI>
              <URI>/source/spiralcraft/ui/UiService.java
              </URI>
              
            </resources>
          </scm:Change>

          <scm:Change>
            <path>/source/spiralcraft/service/Daemon.java
            </path>

            <notes>
            
              <scm:Note>Removed old JUL logging code
                 in register(), remove method and defer to super.register()
              </scm:Note>  
            </notes>
          </scm:Change>
                    
        </detail>
        
      </scm:Change>    
    </detail>
  </scm:Change>
  
  <scm:Change>
    <revision>0.3.2
    </revision>
    
    <authorId>miketoth
    </authorId>
    
    <notes>
      <scm:Note>Bug fixes
      </scm:Note>
      <scm:Note>Change management system testing
      </scm:Note>
      <scm:Note>Ongoing spiralcraft-sql module support and integration
      </scm:Note>
    </notes>
    
    <detail>
      <scm:Change>
        <date>2009-04-20
        </date>
        
        <path>/source/spiralcraft/builder
        </path>
        
        <notes>
          <scm:Note>Fix problem using drill-down property specifier - 
            "More than one Assembly in property" introduced
            with latest builder upgrade set. PropertySpecifier now correctly
            uses "replace" mode when computing override for non-aggregate
            properties.
            
          </scm:Note>
        </notes>
      </scm:Change>

      <scm:Change>
        <date>2009-04-19
        </date>
        
        <path>/source/spiralcraft/lang/reflect/BeanPropertyChannel
        </path>
        
        <notes>
          <scm:Note>Fix null exception thrown in WebUI on REQUEST event in
                 Editor. When trying to set a property of a null value, return
                 false from set() instead of throwing an exception. Encountering
                 a null should be a soft failure.
          </scm:Note>
        </notes>
      </scm:Change>
          
      <scm:Change>
        <date>2009-04-19
        </date>
        
        <path>/source/spiralcraft/task/Scenario
        </path>
        
        <notes>
          <scm:Note>Removed bindCommand and associated ThreadLocalChannel for
            command, as it appears that this functionality is no longer used
            and no longer has a purpose.
          </scm:Note>
        </notes>
      </scm:Change>
    
      <scm:Change>
        <date>2009-04-19
        </date>
        
        <path>/source/spiralcraft/task/TaskRunner
        </path>
        
        <notes>
          <scm:Note>Provide bean configuration for the root Focus into
            which the referenced Scenario will be bound. This is anticipated
            as being generally useful, but the specific case that prompted
            it is no longer applicable.
          </scm:Note>
        </notes>
      </scm:Change>
    
      <scm:Change>
        <date>2009-04-19
        </date>
        
        <path>/source/spiralcraft/builder
        </path>
        
        <notes>
          <scm:Note>Functionally transparent refactoring to modularize 
            configuration source scenarios and split up large methods.
          </scm:Note>
        </notes>
      </scm:Change>
    
      <scm:Change>
        <date>2009-04-17
        </date>
        
        <path>/source/spiralcraft/lang/util/Configurator.java
        </path>
        
        <notes>
          <scm:Note>Improved debug message when bean property is not found
          </scm:Note>
                  
        </notes>
      </scm:Change>
          
      <scm:Change>
        <date>2009-04-17
        </date>
        
        <path>/source/spiralcraft/log/
        </path>
        
        <resources>
          <URI>DefaultFormatter.java
          </URI>
        </resources>
        
        <notes>
          <scm:Note>Improved readability of default formatter by putting 
            message up front and
            source data at end of single line, eliminating the previous
            multi-line format.
          </scm:Note>
        
        </notes>
        
      </scm:Change>

      <scm:Change>
        <date>2009-04-16
        </date>
        
        <path>/source/spiralcraft/data/flatfile/
        </path>
        
        <resources>
          <URI>DelimitedRecordFormat.java
          </URI>
          <URI>Writer.java
          </URI>
        </resources>
        
        <notes>
          <scm:Note>Integrated DelimitedRecordFormat into Writer
          </scm:Note>
          
          <scm:Note>Auto-configure DelimitedRecordFormat from supplied Type
            or FieldSet when no  FieldMapping[] is provided.
          </scm:Note>
        
        </notes>
      </scm:Change>
    </detail>
  </scm:Change>
</scm:Change.list>