<scm:Change.list
  xmlns:scm="class:/spiralcraft/scm/meta/"
  >
  
  <scm:Change>
    <revision>0.3.20
    </revision>
    
    <authorId>miketoth
    </authorId>
    
    <date>????
    </date>
    
    <notes>
      <scm:Note>Hooks for post-startup tasks to be run for Daemons
      </scm:Note>
      <scm:Note>spiralcraft.lang enhancements to provide access to  
        abstracted Collection and List semantics of Channel objects.
      </scm:Note>
      <scm:Note>Completed support in data task package for publishing 
        lazy-loading aggregates
      </scm:Note>
      <scm:Note>Simplification of Pool implementation to use dedicated thread
        for Keeper.
      </scm:Note>
      <scm:Note>Misc fixes
      </scm:Note>
    </notes>
    
    <detail>
      <scm:Change>
        <date>2009-09-21
        </date>

        <notes>
          <scm:Note>Simplified Pool to use dedicated thread for Keeper and 
            eliminate circular dependency on Scheduler. 
          </scm:Note>
          
        </notes>    
        
        <path>source/spiralcraft/
        </path>
        
        <resources>
          <URI>pool/Pool.java</URI>
          <URI>time/Scheduler.java</URI>
        </resources>
      </scm:Change>

      <scm:Change>
        <date>2009-09-21
        </date>

        <notes>
          <scm:Note>Remove extraneous debug messages
          </scm:Note>
          
        </notes>    
        
        <path>source/spiralcraft/data/builder/BuilderField.java
        </path>
      </scm:Change>

      <scm:Change>
        <date>2009-09-17
        </date>

        <notes>
          <scm:Note>Simple chainable "If" scenario for task framework.
          </scm:Note>
          
        </notes>    
        
        <path>source/spiralcraft/task/If.java
        </path>
      </scm:Change>

      <scm:Change>
        <date>2009-09-17
        </date>

        <notes>
          <scm:Note>Usability enhancements to data query framework
          </scm:Note>
          <scm:Note>It is no longer required that a Store be present in
            the Focus chain for queries to work, if all queries can
            resolve their default binding. This permits non-optimized queries
            to be created against opaque data sources (ie. ReferenceQuery). It
            is still preferable for Query clients to resolve the query against
            a specific Queryable.
          </scm:Note>          
          <scm:Note>ReferenceQuery can obtain data from any Channel that
            supports an IterationDecorator, by using an IteratorCursor to
            publish the result.
          </scm:Note>          
          <scm:Note>Sort allows the result type (and resulting Comparator set)
            to be determined from the upstream bound query.
          </scm:Note>          
          
        </notes>    
        
        <path>source/spiralcraft/data/
        </path>
        
        <resources>
          <URI>query/Query.java</URI>
          <URI>query/ReferenceQuery.java</URI>
          <URI>query/Sort.java</URI>
          <URI>spi/IteratorCursor.java</URI>
          <URI>task/Fetch.java</URI>
        </resources>
      </scm:Change>

      <scm:Change>
        <date>2009-09-17
        </date>

        <notes>
          <scm:Note>Completed support in data task package for publishing 
            lazy-loading aggregates
          </scm:Note>
        </notes>    
        
        <path>source/spiralcraft/data/
        </path>
        
        <resources>
          <URI>task/Collect.java</URI>
          <URI>spi/ListAggregate.java</URI>
        </resources>
      </scm:Change>
      
      <scm:Change>
        <date>2009-09-17
        </date>

        <notes>
          <scm:Note>spiralcraft.lang enhancements to provide access to  
            abstracted Collection and List semantics of Channel objects.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/
        </path>
        
        <resources>
          <URI>lang/CollectionDecorator.java</URI>
          <URI>lang/ListDecorator.java</URI>
          <URI>lang/reflect/ArrayReflector.java</URI>
          <URI>lang/reflect/BeanReflector.java</URI>
          <URI>lang/reflect/CollectionReflector.java</URI>
          <URI>lang/spi/ArrayCollectionDecorator.java</URI>
          <URI>lang/spi/ArrayListDecorator.java</URI>
          <URI>lang/spi/GenericCollectionDecorator.java</URI>
          <URI>lang/spi/GenericListDecorator.java</URI>
          <URI>data/lang/AggregateReflector.java</URI>
        </resources>
      </scm:Change>

      <scm:Change>
        <date>2009-09-17
        </date>

        <notes>
          <scm:Note>Make the Scheduler ensure a minAvailable of 2 threads so
            the PoolKeeper for the ThreadPool can schedule itself efficiently.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/time/Scheduler.java
        </path>
        
      </scm:Change>
      
      <scm:Change>
        <date>2009-09-14
        </date>

        <notes>
          <scm:Note>Make URLResource overwrite the "Connection" property
            to avoid keepalive connections by default.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/vfs/url/URLResource.java
        </path>
        
      </scm:Change>
      
      <scm:Change>
        <date>2009-09-14
        </date>

        <notes>
          <scm:Note>Added buffering and debugging enhancements to QueryXml
            and underlying URLResource where applicable.
          </scm:Note>
          <scm:Note>Added inputBufferLength property to URLResource
          </scm:Note>
          <scm:Note>Added inputBufferLength property to QueryXml, which is
            passed through to URLResource where applicable.
          </scm:Note>
          <scm:Note>When URLResource system-wide debugging is set to FINE, 
            a DebugInputStream wraps the URLConnection inputStream and times
            calls to the read() methods.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft
        </path>
        
        <resources>
          <URI>data/sax/QueryXml.java
          </URI>
          <URI>io/DebugInputStream.java
          </URI>
          <URI>vfs/url/URLResource.java
          </URI>
        </resources>
        
      </scm:Change>
            
      <scm:Change>
        <date>2009-09-14
        </date>

        <notes>
          <scm:Note>Fixed issue where QueryXML.timeoutSeconds was applied as
            as milliseconds, prematurely aborting back-end response.
          </scm:Note>
          <scm:Note>Removed extraneous debug messages
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/data/sax/
        </path>
        
        <resources>
           <URI>QueryXml.java</URI>
           <URI>ParseXml.java</URI>
        </resources>
        
      </scm:Change>
      
      <scm:Change>
        <date>2009-09-14
        </date>

        <notes>
          <scm:Note>Added afterStart property to Daemon which accepts a
            scenario to be run immediately after startup.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/service/Daemon.java
        </path>
        
      </scm:Change>
    </detail>
  </scm:Change>

  <scm:Change>
    <revision>0.3.19
    </revision>
    
    <authorId>miketoth
    </authorId>
    
    <date>2009-09-08
    </date>
    
    <notes>
      <scm:Note>Formalized array literal syntax in spiralcraft.lang to free up 
        syntax for inline tuples. Adjusted tuple syntax for more intuitive
        and consistent use of subject and context.
      </scm:Note>
      <scm:Note>Fix for issue where the Focus chain exported by the Scenario
        doesn't have a subject. Made the Scenario the 
        subject of its own ClosureFocus. 
      </scm:Note>
    </notes>
    
    <detail>
      <scm:Change>
        <date>2009-09-08
        </date>
        
        <notes>
          <scm:Note>Fix for issue where a set of namespaces added by
            a  NamespaceFocus
            replaced a previous set of namespaces added by a NamespaceFocus if
            the previous NamespaceFocus was the parent of the new 
            NamespaceFocus.
          </scm:Note>
          <scm:Note>Added debugging information for namespaces to FocusChain.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/lang/
        </path>
        
        <resources>
          <URI>FocusWrapper.java
          </URI>
          <URI>NamespaceFocus.java
          </URI>
          <URI>TeleFocus.java
          </URI>
        </resources>
        
      </scm:Change>

      <scm:Change>
        <date>2009-09-08
        </date>
        
        <notes>
          <scm:Note>Fix for issue where the Focus chain exported by the Scenario
            doesn't have a subject. Made the Scenario the 
            subject of its own ClosureFocus. 
          </scm:Note>
          <scm:Note>Use of ClosureFocus in Batch is obsolete now that
            Scenario handles general case.
          </scm:Note>

        </notes>
        
        <path>source/spiralcraft
        </path>
        
        <resources>
          <URI>lang/spi/ClosureFocus.java
          </URI>
          <URI>task/Scenario.java
          </URI>
          <URI>task/Batch.java
          </URI>
        </resources>
        
      </scm:Change>
      
      <scm:Change>
        <date>2009-09-08
        </date>
        
        <notes>
          <scm:Note>Array literals can only be created using the syntax
            [@typeName][{ ... }]
          </scm:Note>
          <scm:Note>Inline tuples are now valid expressions in themselves.
          </scm:Note>
          <scm:Note>Inline tuples telescope instead of chaining-
            ie. {:=myStr: l:=.length() } instead of { :=mystr:  l:=length() }
          </scm:Note>
          <scm:Note>Tuple wrapping or inheritance now uses brackets instead
            of ':'- ie. { {=.} ... } or { {[@myType]} ... } instead of
            { :=.: ... } or { :[@mytype] .... }
          </scm:Note>
          <scm:Note>Enhanced debugging information for bind exceptions in
            test framework
          </scm:Note>
          <scm:Note>Enhanced debugging information for Expression parse
            exceptions
          </scm:Note>
          <scm:Note>Fixed argument reversal on reconstruct in AssignmentNode
          </scm:Note>
          <scm:Note>Properly handle non '/' terminated namespace definition in 
            TypeFocusNode
          </scm:Note>

        </notes>
        
        <path>source/spiralcraft/
        </path>
        
        <resources>
          <URI>lang/parser/ExpressionParser.java
          </URI>
          <URI>lang/parser/TupleNode.java
          </URI>
          <URI>lang/parser/Tuple.java
          </URI>
          <URI>lang/parser/AssignmentNode.java
          </URI>
          <URI>lang/parser/TypeFocusNode.java
          </URI>
          <URI>lang/ParseException.java
          </URI>
          <URI>test/Assertion.java
          </URI>
        </resources>
      </scm:Change>
    </detail>
  </scm:Change>
  

  <scm:Change>
    <revision>0.3.18
    </revision>
    
    <authorId>miketoth
    </authorId>
    
    <date>2009-09-06
    </date>
    
    <notes>
    </notes>
    
    <detail>
      <scm:Change>
        <date>2009-09-06
        </date>
        
        <notes>
          <scm:Note>Incomplete work on stateful constructs to create cursors
            that can be published by various operations.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/
        </path>
        
        <resources>
          <URI>data/core/CursorField.java
          </URI>
          <URI>data/lang/CursorChannel.java
          </URI>
          <URI>data/spi/ListAggregate.java
          </URI>
          <URI>data/task/Collect.java
          </URI>
          <URI>data/task/Fetch.java
          </URI>
        </resources>
      </scm:Change>

      
      <scm:Change>
        <date>2009-09-06
        </date>
        
        <notes>
          <scm:Note>Deprecated DataBatchProcessor
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/data/util/DataBatchProcessor.java
        </path>
        
      </scm:Change>

      <scm:Change>
        <date>2009-09-06
        </date>
        
        <notes>
          <scm:Note>Refactoring of spiralcraft.test package to separate
            Tests, which represent non-chainable concrete classes like Stub and
            Assertion, from TestGroup, which is chainable.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/test
        </path>
        
        <resources>
          <URI>Assertion.java
          </URI>
          <URI>Stub.java
          </URI>
          <URI>Test.java
          </URI>
          <URI>TestGroup.java
          </URI>
          <URI>TestResult.java
          </URI>
        </resources>
      </scm:Change>

      <scm:Change>
        <date>2009-09-06
        </date>
        
        <notes>
          <scm:Note>Format arrays on output
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/task/Debug.java
        </path>
      </scm:Change>
      
      <scm:Change>
        <date>2009-09-06
        </date>
        
        <notes>
          <scm:Note>Enhancements related to usage of Command in Scenarios and
            other components, in
            preparation for implementation of spiralcraft.lang based 
            parameterization of Commands and binding to Command target and
            results.
          </scm:Note>
          <scm:Note>Convention for exporting a CommandFactory from a Java
            component is to use a public final field to hold the
            CommandFactory. 
          </scm:Note>
          <scm:Note>Command targets should be Void when not used.
          </scm:Note>
          <scm:Note>The target of a TaskCommand is the associated Task.
          </scm:Note>
          <scm:Note>Obsoleted BatchScenarioLegacy
          </scm:Note>
          <scm:Note>Reverted task.Exec to use a simple command channel
            pending further development of CommandFactory pattern, which
            obsoletes BoundCommandFactory.
          </scm:Note>
          <scm:Note>Scenario provides facility to create a closure when
            command is created to support cross-thread usage.
          </scm:Note>
          <scm:Note>ClosureFocus and ThreadLocalChannel now support pass-through
            when Closure/ThreadLocalChannel have not been "scoped". 
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft
        </path>
        
        <resources>
          <URI>command/BoundCommandFactory.java
          </URI>
          <URI>ui/StepControl.java
          </URI>
          <URI>service/Daemon.java
          </URI>
          <URI>task/Exec.java
          </URI>
          <URI>task/BatchScenarioLegacy.java
          </URI>
          <URI>task/Scenario.java
          </URI>
          <URI>task/TaskCommand.java
          </URI>
          <URI>lang/spi/ClosureFocus.java
          </URI>
          <URI>lang/spi/ThreadLocalChannel.java
          </URI>
        </resources>
        
      
      </scm:Change>

      <scm:Change>
        <date>2009-09-06
        </date>
        
        <notes>
          <scm:Note>Simplify the focus chain for components read from XML 
            data or builder definitions- do not insert a BeanReflector 
            for the component into the chain if the component implements
            FocusChainObject, allowing the immediate parent context to
            be visible to the FocusChainObject and usable as a primary
            binding target. This allows Scenarios used as methods to bind
            to their parent context, which should be the "object" that 
            represents the method invocation context.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft
        </path>
        
        <resources>
          <URI>data/persist/AbstractXmlObject.java
          </URI>
          <URI>data/persist/XmlAssembly.java
          </URI>
        </resources>
        
      
      </scm:Change>

      <scm:Change>
        <date>2009-09-06
        </date>
        
        <notes>
          <scm:Note>Support the incorporation of Scenarios as method 
            implementations.
          </scm:Note>
          <scm:Note>Refined "method" implementation remove "invoke" call and 
            require that all methods be bound.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft
        </path>
        
        <resources>
          <URI>data/Method.java
          </URI>
          <URI>data/core/MethodImpl.java
          </URI>
          <URI>data/core/TaskMethod.java
          </URI>
          <URI>data/core/TypeImpl.java
          </URI>
          <URI>data/types/meta/TaskMethodType.java
          </URI>
          <URI>data/reflect/ReflectionMethod.java
          </URI>
          <URI>data/lang/TupleReflector.java
          </URI>
        </resources>
        
      
      </scm:Change>

      <scm:Change>
        <date>2009-09-06
        </date>
        
        <notes>
          <scm:Note>Enhancement to spiralcraft.lang to support collection
            creation and element addition via a CollectionDecorator 
            interface.
          </scm:Note>
          <scm:Note>Provide more ways and more intelligence for constructing
            arrays from literals and other sources.
          </scm:Note>
          <scm:Note>Added better support for java.util.Collections to
            spiralcraft.lang package.
          </scm:Note>
          <scm:Note>Added utility to determine the Class referred to by the
            first parameter in a Java generics parameterized type
          </scm:Note>
          <scm:Note>Added better spiralcraft.data support for array types.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft
        </path>
        
        <resources>
          <URI>lang/Reflector.java
          </URI>
          <URI>lang/CollectionDecorator.java
          </URI>
          <URI>lang/reflect/CollectionReflector.java
          </URI>
          <URI>lang/reflect/BeanReflector.java
          </URI>
          <URI>lang/reflect/ArrayReflector.java
          </URI>
          <URI>lang/spi/ArrayCollectionDecorator.java
          </URI>
          <URI>lang/spi/ArrayConstructorChannel.java
          </URI>
          <URI>lang/spi/ArrayIterationDecorator.java
          </URI>
          <URI>lang/spi/GenericCollectionDecorator.java
          </URI>
          <URI>util/lang/ClassUtil.java
          </URI>
          <URI>data/lang/DataReflector.java
          </URI>
        </resources>
        
      
      </scm:Change>


      <scm:Change>
        <date>2009-09-06
        </date>
        
        <notes>
          <scm:Note>Remove extraneous console output
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft
        </path>
        
        <resources>
          <URI>sax/XmlWriter.java
          </URI>
        </resources>
        
      
      </scm:Change>

      <scm:Change>
        <date>2009-09-06
        </date>
        
        <notes>
          <scm:Note>Fix potential NPE in DictionaryBinding resolving
            StringConverter
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft
        </path>
        
        <resources>
          <URI>lang/util/DictionaryBinding.java
          </URI>
        </resources>
        
      
      </scm:Change>
    </detail>
  </scm:Change>

  <scm:Change>
    <revision>0.3.17
    </revision>
    
    <authorId>miketoth
    </authorId>
    
    <date>2009-08-23
    </date>
    
    <notes>
      <scm:Note>spiralcraft.lang enhancements to provide functionality for
        projection and in-line tuple definition
      </scm:Note>
      <scm:Note>Exception handling enhancements to report document location
        in builder and in XML parse tree system. 
      </scm:Note>
      <scm:Note>Support for multi-valued attributes in DictionaryBinding
      </scm:Note>
      <scm:Note>Minor unit test facility enhancements.
      </scm:Note>
    </notes>
    
    <detail>
      
      <scm:Change>
        <date>2009-08-23
        </date>
        
        <notes>
          <scm:Note>Add better support for multi-valued attributes in
            DictionaryBinding.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft
        </path>
        
        <resources>
          <URI>data/sax/QueryXml.java
          </URI>
          <URI>lang/util/DictionaryBinding.java
          </URI>
        </resources>
        
      
      </scm:Change>
            
      <scm:Change>
        <date>2009-08-23
        </date>
        
        <notes>
          <scm:Note>Expand arrays for assertion output
          </scm:Note>
          <scm:Note>Tweaked TestResult default toString() formatting
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/test
        </path>
        
        <resources>
          <URI>Assertion.java
          </URI>
          <URI>TestResult.java
          </URI>
        </resources>
        
      
      </scm:Change>
          
      <scm:Change>
        <date>2009-08-21
        </date>
        
        <notes>
          <scm:Note>Keep track of source code parse position for builder
            exceptions and incorporate into debugging output.
          </scm:Note>
          <scm:Note>Trap runtime exceptions when applying properties and
            wrap with source code location.
          </scm:Note>          
        </notes>
        
        <path>source/spiralcraft
        </path>
        
        <resources>
          <URI>builder/AssemblyLoader.java
          </URI>
          <URI>builder/PropertyBinding.java
          </URI>
          <URI>builder/PropertySpecifier.java
          </URI>
          <URI>sax/Node.java
          </URI>
          <URI>sax/ParseTree.java
          </URI>
        </resources>
        
      
      </scm:Change>
      
      <scm:Change>

        <date>2009-08-21
        </date>
        
        <notes>
          <scm:Note>Added general exception facility to ExpressionParser
          </scm:Note>
          <scm:Note>Isolated assignmentExpression function to maintain
            recursive descent pattern that mirrors grammar structure.
          </scm:Note>
          <scm:Note>Added AggregateProjection operator "#" and subtree to
            grammar.
          </scm:Note>
          <scm:Note>Added TupleProjection and subtree to grammar to support
             in-line type composition
          </scm:Note>
          <scm:Note>Fix problem where an extra '.' is added on Expression
            reconstruction: 
            Shortcut the '.'+identifier pattern to a dereference in
            parseFocusExpression to maintain expression reconstruction
            capability. Also, ParentFocusNode no longer returns ".." because
            one of them is taken care of by the CurrentFocusNode.
          </scm:Note>
          <scm:Note>Added @log and @tune meta-operations to support debugging
            and optimization tasks.
          </scm:Note>
          <scm:Note>Fix problem where String literals did not reconstruct
            quotes. LiteralNode now detects Strings.
          </scm:Note>
          <scm:Note>Degrade to reflective array access when dealing with
            primitive array objects in ArrayIndexChannel.
          </scm:Note>
          <scm:Note>Added signature hiding computation to Signature
          </scm:Note>
          <scm:Note>Added @top, @log and @tune ops to abstract Reflector
          </scm:Note>

          <scm:Note>Added "?=" containership and "#" projection operators to
            AggregateReflector for spiralcraft.data
          </scm:Note>          
          <scm:Note>Fix ArrayUtil iterator: Now throws NoSuchElementException
            instead of ArrayIndexOutOfBoundsException
          </scm:Note>          
        </notes>
        
        <path>source/spiralcraft/
        </path>
        
        <resources>
          <URI>lang/parser/ExpressionParser.java
          </URI>
          <URI>lang/parser/Tuple.java
          </URI>
          <URI>lang/parser/TupleField.java
          </URI>
          <URI>lang/parser/TupleNode.java
          </URI>
          <URI>lang/parser/Tuple.java
          </URI>
          <URI>lang/parser/TupleProjectNode.java
          </URI>
          <URI>lang/parser/AggregateProjectNode.java
          </URI>
          <URI>lang/parser/LiteralNode.java
          </URI>
          <URI>lang/reflect/ArrayReflector.java
          </URI>
          <URI>lang/reflect/BeanReflector.java
          </URI>
          <URI>lang/spi/LogChannel.java
          </URI>
          <URI>lang/spi/TuneChannel.java
          </URI>
          <URI>lang/spi/IterationProjector.java
          </URI>
          <URI>data/lang/AggregateReflector.java
          </URI>
          <URI>util/ArrayUtil.java
          </URI>
        </resources>
      </scm:Change>
    </detail>
    
    
  </scm:Change>
      
  <scm:Change>
    <revision>0.3.16
    </revision>
    
    <authorId>miketoth
    </authorId>
    
    <date>2009-08-18
    </date>
    
    <notes>
      <scm:Note>
      Provide additional spiralcraft.lang reachable metadata to foreign XML
      parser and other data-driven subsystems for custom primitive Types 
      (eg. string formatted data, dates, etc) published from spiralcraft.data      
      </scm:Note>
    </notes>
    
    <detail>
      <scm:Change>

        <date>2009-08-18
        </date>
        
        <notes>
          <scm:Note>Move to using StringConverter instead of Format 
            for thread safety
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/data/types/standard/
        </path>
        
        <resources>
          <URI>DateType.java
          </URI>
        </resources>
      </scm:Change>

      <scm:Change>

        <date>2009-08-18
        </date>
        
        <notes>
          <scm:Note>Exception handling and reporting enhancements
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/
        </path>
        
        <resources>
          <URI>data/sax/DataSAXException.java
          </URI>
          <URI>spiralcraft/lang/reflect/MethodTranslator.java
          </URI>
        </resources>
      </scm:Change>


      <scm:Change>

        <date>2009-08-17
        </date>
        
        <notes>
          <scm:Note>Data reflection of primitive types
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/
        </path>
        
        <resources>
          <URI>data/lang/PrimitiveReflector.java
          </URI>
          <URI>data/lang/DataReflector.java
          </URI>
          <URI>data/lang/TupleReflector.java
          </URI>
          <URI>data/lang/BufferReflector.java
          </URI>
          <URI>data/lang/AggregateReflector.java
          </URI>
          <URI>data/lang/TypeReflector.java
          </URI>
          <URI>data/sax/ValueFrame.java
          </URI>
          <URI>data/sax/RootFrame.java
          </URI>
          <URI>data/OrderElement.java
          </URI>
        </resources>
      </scm:Change>

      <scm:Change>

        <date>2009-08-17
        </date>
        
        <notes>
          <scm:Note>Obtain StringConverter from Channel Reflector
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/
        </path>
        
        <resources>
          <URI>lang/util/DictionaryBinding.java
          </URI>
          <URI>lang/Reflector.java
          </URI>
          <URI>data/sax/AbstractFrameHandler.java
          </URI>
          <URI>builder/PropertyBinding.java
          </URI>
          <URI>ui/Binding.java
          </URI>
        </resources>
      </scm:Change>
    </detail>
  </scm:Change>

  <scm:Change>
    <revision>0.3.15
    </revision>
    
    <authorId>miketoth
    </authorId>
    
    <date>2009-08-17
    </date>
    
    <notes>
      <scm:Note>Exception handling improvements in data SAX translator
      </scm:Note>
    </notes>
    
    <detail>
      <scm:Change>

        <date>2009-08-17
        </date>
        
        <notes>
          <scm:Note>Handle empty strings as null for StringConverter
            numeric types, instead of throwing a FormatException
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/util/string/StringConverter.java
        </path>

      </scm:Change>

      <scm:Change>

        <date>2009-08-17
        </date>
        
        <notes>
          <scm:Note>Report document position for DataExceptions and
            RuntimeExceptions that occur when translating XML to Channel
            values.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/data/sax/
        </path>
        
        <resources>
          <URI>DataHandler.java
          </URI>
          <URI>DataHandlerBase.java
          </URI>
          <URI>ForeignDataHandler.java
          </URI>
          <URI>DataSAXException.java
          </URI>          
        </resources>

      </scm:Change>
    </detail>
  </scm:Change>

  <scm:Change>
    <revision>0.3.14
    </revision>
    
    <authorId>miketoth
    </authorId>
    
    <date>2009-08-14
    </date>
    
    <notes>
      <scm:Note>Fixes for blind type resolution through lang package
      </scm:Note>
      <scm:Note>Data SAX package enhancements for automated construction of
        frame handler sets.
      </scm:Note>      
    </notes>
    
    <detail>
      <scm:Change>

        <date>2009-08-14
        </date>
        
        <notes>
          <scm:Note>Added a frame type designed specifically for reading
            field or list values in character form.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/data/sax/
        </path>
        
        <resources>
          <URI>ValueFrame.java
          </URI>
        </resources>

      </scm:Change>

      <scm:Change>

        <date>2009-08-11
        </date>
        
        <notes>
          <scm:Note>Fix NPE by throwing exception when an elementAssignment
            does not match any child element.
          </scm:Note>
          <scm:Note>Perform destination specific String type conversions for
            incoming character data when the textBinding is not expressed in
            the form of an assignment.
          </scm:Note>          
        </notes>
        
        <path>source/spiralcraft/data/sax/
        </path>
        
        <resources>
          <URI>AbstractFrameHandler.java
          </URI>
        </resources>

      </scm:Change>
    </detail>

    <detail>
      <scm:Change>

        <date>2009-08-10
        </date>
        
        <notes>
          <scm:Note>Differentiate TypeNotFoundException from errors loading
            a defined type.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/data/lang/
        </path>
        
        <resources>
          <URI>DataTypeModel.java</URI>
        </resources>

      </scm:Change>
    </detail>
  </scm:Change>

  <scm:Change>
    <revision>0.3.13
    </revision>
    
    <authorId>miketoth
    </authorId>
    
    <date>2009-08-07
    </date>
    
    <notes>
      <scm:Note>"Assign" Scenario runs Assignments within a Scenario
      </scm:Note>
      <scm:Note>Generics warnings cleanup required due to upgrade of Eclipse 
        compiler with more thorough LINT.
      </scm:Note>
    </notes>
    
    <detail>
      <scm:Change>

        <date>2009-08-07
        </date>
        
        <notes>
          <scm:Note>Task system refactor- not all Scenarios are chainable.
            Factored chain machinery into Chain subclass of Scenario, and
            handle automatic creation of a Sequence to group non-chainable
            elements together.
          </scm:Note>
          <scm:Note>"Assign" scenario runs assignments and defaults
          </scm:Note>
          <scm:Note>"When" scenario performs another scenario conditionally
          </scm:Note>
          
        </notes>
        
        <path>source/spiralcraft/
        </path>
        
        <resources>
          <URI>task/Assign.java</URI>
          <URI>task/When.java</URI>
          <URI>task/Exec.java</URI>
          <URI>task/Sequence.java</URI>
          <URI>task/Session.java</URI>
          <URI>task/TaskRunner.java</URI>
          <URI>task/Debug.java</URI>
          <URI>task/Chain.java</URI>
          <URI>task/Scenario.java</URI>
          <URI>task/Reference.java</URI>
          <URI>task/Batch.java</URI>
          <URI>data/task/Collect.java</URI>
          <URI>data/task/Fetch.java</URI>
          <URI>data/task/Edit.java</URI>
          <URI>data/sax/ParseXml.java</URI>
          <URI>vfs/task/Copy.java</URI>
          <URI>test/Test.java</URI>
          <URI>data/flatfile/Output.java</URI>
          <URI>data/flatfile/Scan.java</URI>
        </resources>

      </scm:Change>
      
      <scm:Change>

        <date>2009-08-07
        </date>
        
        <notes>
          <scm:Note>Fix: BeanArguments only processed the first short argument 
            in a clump of short arguments
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/exec/BeanArguments.java
        </path>

      </scm:Change>
      <scm:Change>

        <date>2009-08-07
        </date>
        
        <notes>Generics warnings cleanup triggered by Eclipse upgrade
        </notes>
        
        <path>source/spiralcraft/
        </path>
        
        <resources>
          <URI>data/spi/ArrayTuple.java</URI>
          <URI>data/spi/KeyedListAggregate.java</URI>
          <URI>data/spi/ArrayDeltaTuple.java</URI>
          <URI>data/spi/AbstractStore.java</URI>
          <URI>data/sax/AbstractFrameHandler.java</URI>
          <URI>data/reflect/ReflectionType.java</URI>
          <URI>data/reflect/ReflectionScheme.java</URI>
          <URI>data/session/BufferAggregate.java</URI>
          <URI>data/session/BufferType.java</URI>
          <URI>data/query/SetFilter.java</URI>
          <URI>data/query/Selection.java</URI>
          <URI>lang/spi/IterableContainsChannel.java</URI>
          <URI>lang/spi/ArrayConstructorChannel.java</URI>
          <URI>data/lang/DataReflector.java</URI>
          <URI>data/rest/RestService.java</URI>
          <URI>lang/util/DictionaryBinding.java</URI>
          <URI>data/builder/BuilderScheme.java</URI>
          <URI>data/builder/BuilderField.java</URI>
          <URI>task/BatchScenarioLegacy.java</URI>
        </resources>
      </scm:Change>
    </detail>
  </scm:Change>

  <scm:Change>
    <revision>0.3.12
    </revision>
    
    <authorId>miketoth
    </authorId>
    
    <date>2009-08-03
    </date>
    
    <notes>
      <scm:Note>Enhanced generic XML processing capabilities to meet
        requirements of XML Data schema interpretation and data processing
      </scm:Note>
    </notes>
    
    <detail>
      <scm:Change>

        <date>2009-07-28
        </date>
        
        <notes>
          <scm:Note>Refactored SAX API for developer ease of use in
            describing XML Frames- converted
            and deprecated XyzFrameHandler in favor of XyzFrame
          </scm:Note>
          <scm:Note>Added support for recursive xml via RecursiveFrame
            and use of a ClosureFocus at the cyclical boundary
          </scm:Note>

          <scm:Notes>More complete namespace management- expanded namespaces
            are used internally for all references and lookups.
          </scm:Notes> 
          <scm:Notes>Nodes with both elements and character data will be
            processed if allowMixedContent property is set
          </scm:Notes> 
          <scm:Note>Factored out redundancy between AttributeBinding and
            lang.DictionaryBinding by moving useful assignment code into
            DictionaryBinding and making AttributeBinding a subclass.
          </scm:Note>          
          <scm:Notes>ElementAssignments allow a Frame to post a value
            created by a child context into the Focus chain via Expressions
          </scm:Notes>
          <scm:Notes>Support proper generation of closed elements for empty 
            Tuples (eg. Type references) in the native XML format
          </scm:Notes>
          <scm:Note>DataHandler now appends aggregate field values to
            any pre-existing aggregate to ensure that deep prototype
            references work as expected.
          </scm:Note>
          <scm:Note>In DataHandlerBase, resolution of ref uris is now tolerant 
            to missing trailing slashes, and frames can be configured to allow 
            mixed content (elements and text) without throwing an exception.
          </scm:Note>
          <scm:Notes>ParseXml is a Scenario that retrieves and processes 
            XML content from a resolved URI.
          </scm:Notes>
          <scm:Notes>QueryXml is a Scenario based on ParseXml that constructs
            a Resource from the FocusChain context and extracts data objects
            from the returned XML.
          </scm:Notes>
        </notes>
    
        <path>source/spiralcraft/data/sax/
        </path>
        
        <resources>
          <URI>AbstractFrameHandler.java
          </URI>
          <URI>AggregateFrame.java
          </URI>
          <URI>AggregateFrameHandler.java
          </URI>
          <URI>AttributeBinding.java
          </URI>
          <URI>ContainerFrame.java
          </URI>
          <URI>ContainerFrameHandler.java
          </URI>
          <URI>DataHandler.java
          </URI>
          <URI>DataHandlerBase.java
          </URI>
          <URI>DataWriter.java
          </URI>
          <URI>ElementAssignment.java
          </URI>
          <URI>ForeignDataHandler.java
          </URI>
          <URI>ParseXml.java
          </URI>
          <URI>QueryXml.java
          </URI>
          <URI>PrefixMapping.java
          </URI>
          <URI>RecursiveFrame.java
          </URI>
          <URI>RootFrame.java
          </URI>
          <URI>RootFrameHander.java
          </URI>
          <URI>TupleFrame.java
          </URI>
          <URI>TupleFrameHander.java
          </URI>
        </resources>
    
      </scm:Change>  

      <scm:Change>

        <date>2009-08-02
        </date>
        
        <notes>
          <scm:Note>Fix issue where XmlAssembly wasn't automatically
            bound due to Assembly not being a FocusChainObject anymore
          </scm:Note>
        </notes>
    
        <path>source/spiralcraft/data/persist/
        </path>
        
        <resources>
          <URI>AbstractXMLObject.java
          </URI>
          
          <URI>XmlAssembly.java
          </URI>
        </resources>
    
      </scm:Change>  

      <scm:Change>

        <date>2009-08-02
        </date>
        
        <notes>
          <scm:Note>Fix issue where property descriptors in subclasses were
            duplicated in getAllProperties() 
          </scm:Note>
        </notes>
    
        <path>source/spiralcraft/beans/MappedBeanInfo.java
        </path>
    
      </scm:Change>  


      <scm:Change>

        <date>2009-07-28
        </date>
        
        <notes>
          <scm:Note>Make sure Aggregates are immutably copied when 
            constructing immutable Tuples (in addition to immutably 
            copying Tuples).
          </scm:Note>
        </notes>
    
        <path>source/spiralcraft/data/spi/
        </path>
        
        <resources>
          <URI>ArrayTuple.java
          </URI>
          <URI>EditableArrayListAggregate.java
          </URI>
        </resources>
    
      </scm:Change>  

      <scm:Change>

        <date>2009-07-28
        </date>
        
        <notes>
          <scm:Note>Genericized ReflectionField
          </scm:Note>
          <scm:Note>Allow external Types to register canonical class 
            mappings.
          </scm:Note>
        </notes>
    
        <path>source/spiralcraft/data/reflect/
        </path>
        
        <resources>
          <URI>ReflectionField.java
          </URI>
          <URI>ReflectionType.java
          </URI>
          <URI>ReflectionScheme.java
          </URI>
        </resources>
    
      </scm:Change>  
          
      <scm:Change>

        <date>2009-07-28
        </date>
        
        <notes>
          <scm:Note>Misc small fixes, debugging and exception data enhancements
          </scm:Note>
          <scm:Note>TypeImpl shows data in exception when fromData erroneously 
            called
          </scm:Note>
          <scm:Note>UnifiedFieldSet fixed NPE when type has no scheme
          </scm:Note>
          <scm:Note>PrimitiveTypeImpl reports value when toData() erroneously
            called. 
          </scm:Note>
          <scm:Note>FieldImpl throws exception when type set to null
          </scm:Note>
        </notes>
    
        <path>source/spiralcraft/data/
        </path>
        
        <resources>
          <URI>core/TypeImpl.java
          </URI>
          <URI>core/UnifiedFieldSet.java
          </URI>
          <URI>core/PrimitiveTypeImpl.java
          </URI>
          <URI>core/FieldImpl.java
          </URI>
        </resources>
    
      </scm:Change>    

      <scm:Change>

        <date>2009-07-28
        </date>
        
        <notes>
          <scm:Note>TypeType.toData(Type type) generates a Type reference
            via the use of new MetaType constructor specifically for
            generating Type definitions
          </scm:Note>
          <scm:Note>AbstractCollectionType.toData() now correctly uses
            canonical subtype of list object to perform the toData()
            conversion if the list object is a subtype of the native type
          </scm:Note>
          <scm:Note>AbstractAggregateType finds its MetaType by URI
            resolution with the ".type" suffix of local URI and not by 
            using ReflectionType.getCanonicalURI(getClass())
          </scm:Note>
        </notes>
    
        <path>source/spiralcraft/data/
        </path>
        
        <resources>
          <URI>types/meta/TypeType.java
          </URI>
          <URI>core/MetaType.java
          </URI>
          <URI>core/AbstractCollectionType.java
          </URI>
          <URI>core/AbstractAggregateType.java
          </URI>
        </resources>
    
      </scm:Change>    

      <scm:Change>

        <date>2009-07-28
        </date>
        
        <notes>
          <scm:Note>ExpressionType provides a toString() method for
            bidirectional persistence
          </scm:Note>
          <scm:Note>AnyType allows for heterogeneously typed values and list
            elements
          </scm:Note>
        </notes>
    
        <path>source/spiralcraft/data/types/standard/
        </path>
        
        <resources>
          <URI>ExpressionType.java
          </URI>
          <URI>AnyType.java
          </URI>
        </resources>
    
      </scm:Change>    

      <scm:Change>

        <date>2009-07-28
        </date>
        
        <notes>
          <scm:Note>Reflectors can now provide a list of available binding
            signatures for a given Source channel. The signatures are
            included in the Exception when a name reference failure occurs to
            assist a developer in finding the correct name.
          </scm:Note>
        </notes>
    
        <path>source/spiralcraft/
        </path>
        
        <resources>
          <URI>lang/Signature.java
          </URI>
          <URI>lang/Reflector.java
          </URI>
          <URI>lang/reflect/BeanReflector.java
          </URI>
          <URI>lang/spi/AbstractChannel.java
          </URI>
          <URI>data/lang/TupleReflector.java
          </URI>
        </resources>
    
      </scm:Change>    

      <scm:Change>

        <date>2009-07-23
        </date>
        
        <notes>
          <scm:Note>Namespace resolution mechanism tolerates missing trailing 
            slashes in resolved URIs.
          </scm:Note>
        </notes>
    
        <path>source/spiralcraft/lang/parser/AbsoluteFocusNode.java
        </path>
    
      </scm:Change>    

      <scm:Change>

        <date>2009-07-24
        </date>
        
        <notes>
          <scm:Note>ClosureFocus supports a RecursionContext, which re-binds
            escaped Channels at a deeper point in the Focus chain and
            on a recursion event, snapshots the deeper values, and pushes them
            into the shallower context before a recursive call, and pops them
            when the recursive call is complete.
          </scm:Note>
          <scm:Note>Fixed bug where the enclosedFocus would not work with
            more than 1 escaped Channel.
          </scm:Note>
        </notes>
    
        <path>source/spiralcraft/lang/spi/
        </path>
        
        <resources>
          <URI>ClosureFocus.java
          </URI>
        </resources>
    
      </scm:Change>    
          
      <scm:Change>

        <date>2009-07-22
        </date>
        
        <notes>
          <scm:Note>DictionaryBinding now supports using an assignment
            as the target, which allows an Expression to perform the
            String conversion as a function of the input.
          </scm:Note>
        </notes>
    
        <path>source/spiralcraft/lang/
        </path>
        
        <resources>
          <URI>util/DictionaryBinding.java
          </URI>
        </resources>
    
      </scm:Change>    
    
      <scm:Change>

        <date>2009-07-29
        </date>
        
        <notes>
          <scm:Note>Added initialAssignments and typeX properties to Session
             for better usability
          </scm:Note>
          <scm:Note>Added Debug task to conditionally log messages
          </scm:Note>
        </notes>
    
        <path>source/spiralcraft/task/
        </path>
        
        <resources>
          <URI>Session.java
          </URI>
          <URI>Debug.java
          </URI>
        </resources>
    
      </scm:Change>
    
      <scm:Change>

        <date>2009-07-29
        </date>
        
        <notes>
          <scm:Note>Ensure that VFS Resources use URLConnections in
            a ThreadSafe manner and do not leave open backing sockets.
          </scm:Note>
        </notes>
    
        <path>source/spiralcraft/vfs/url/URLResource.java
        </path>
    
      </scm:Change>

      <scm:Change>

        <date>2009-07-27
        </date>
        
        <notes>
          <scm:Note>Property specifier attribute "dataURI" is now 
            namespace aware
          </scm:Note>
        </notes>
    
        <path>source/spiralcraft/builder/AssemblyLoader.java
        </path>
    
      </scm:Change>
    </detail>
  </scm:Change>

  <scm:Change>
    <revision>0.3.11
    </revision>
    
    <authorId>miketoth
    </authorId>
    
    <date>2009-06-19
    </date>
    
    <detail>
    
      <scm:Change>

        <date>2009-06-19
        </date>
        
        <notes>
          <scm:Note>Added ability to associate arbitrary application state
            with an authentication session through 
            setAttribute(String name,Object value)
            and getAttribute(String name) methods.
          </scm:Note>
        </notes>
    
        <path>source/spiralcraft/security/auth/AuthSession.java
        </path>
    
      </scm:Change>

      <scm:Change>

        <date>2009-06-18
        </date>
        
        <notes>
          <scm:Note>New data task "Edit" to perform non-interactive buffered
            data manipulation
          </scm:Note>
          <scm:Note>Generics update in BufferChannel to support more type
            aware scenarios.
          </scm:Note>
        </notes>
    
        <path>source/spiralcraft/data/
        </path>
        
        <resources>
          <URI>task/Edit.java
          </URI>
          <URI>editor/EditorBase.java
          </URI>
          <URI>editor/TupleEditor.java
          </URI>
          <URI>session/BufferChannel.java
          </URI>
          <URI>session/BufferField.java
          </URI>
          <URI>lang/CursorBinding.java
          </URI>
        </resources>
        
    
      </scm:Change>
      
      <scm:Change>

        <date>2009-06-19
        </date>
        
        <notes>
          <scm:Note>Fix NPE reporting InvocationTargetException
          </scm:Note>
        </notes>
    
        <path>source/spiralcraft/lang/reflect/MethodTranslator.java
        </path>
    
      </scm:Change>

    </detail>
  </scm:Change>

  <scm:Change>
    <revision>0.3.10
    </revision>
    
    <authorId>miketoth
    </authorId>
    
    <date>2009-06-10
    </date>
    
    <detail>
    
      <scm:Change>

        <date>2009-06-10
        </date>
        
        <notes>
          <scm:Note>ContextDictionary throws an Exception if property is not
            found
          </scm:Note>
        </notes>
    
        <path>source/spiralcraft/util/ContextDictionary.java
        </path>
    
      </scm:Change>
          
      <scm:Change>

        <date>2009-06-10
        </date>
        
        <notes>
          <scm:Note>Fix problem turning Query debugging off
          </scm:Note>
        </notes>
    
        <path>source/spiralcraft/data/query/Query.java
        </path>
    
      </scm:Change>

      <scm:Change>

        <date>2009-06-10
        </date>
        
        <notes>
          <scm:Note>Data XML now provides mechanism to translate 
            ContextDictionary properties when contextAware attribute is set.
          </scm:Note>
        </notes>
    
        <path>source/spiralcraft/data/sax/
        </path>
    
        <resources>
          <URI>DataReader.java
          </URI>
          <URI>DataHandlerBase.java
          </URI>
        </resources>
        
      </scm:Change>
      
    </detail>

    
  </scm:Change>
  
  <scm:Change>
    <revision>0.3.9.1
    </revision>
    
    <authorId>miketoth
    </authorId>
    
    <date>2009-06-10
    </date>
    
    <notes>
      <scm:Note>NPE Fix for Selection filter when filter returns null
      </scm:Note>
    </notes>
    
    <path>source/spiralcraft/data/query/Selection.java
    </path>

    
  </scm:Change>

  <scm:Change>
    <revision>0.3.9
    </revision>
    
    <authorId>miketoth
    </authorId>
    
    <date>2009-06-05
    </date>
    
    <notes>
      <scm:Note>TupleReflector provides methods to create Assignment sets
        for new, default and fixed expressions associated with a FieldSet's
        fields.
      </scm:Note>
    </notes>
    
    <path>source/spiralcraft/data/lang/TupleReflector.java
    </path>
    
  </scm:Change>

  <scm:Change>
    <revision>0.3.8.2
    </revision>
    
    <authorId>miketoth
    </authorId>
    
    <date>2009-06-04
    </date>
    
    <notes>
      <scm:Note>When a BufferType is requested for a BufferType, simply return
        the specified BufferType instead of throwing an exception
      </scm:Note>
    </notes>
    
    <path>source/spiralcraft/data/
    </path>
    
    <resources>
      <URI>Type.java
      </URI>
    </resources>
    
  </scm:Change>

  <scm:Change>
    <revision>0.3.8.1
    </revision>
    
    <authorId>miketoth
    </authorId>
    
    <date>2009-06-03
    </date>
    
    <notes>
      <scm:Note>Test library updates- example Customer now has an id sequence
      </scm:Note>
      <scm:Note>Fix issue where buffer Type is requested for a buffer Type,
        although in out-of-bounds situation of duplicate ids
      </scm:Note>
      <scm:Note>Remove warning when Rule resolution re-entrance is encountered.
      </scm:Note>
    </notes>
    
    <path>source/spiralcraft/data/
    </path>
    
    <resources>
      <URI>Type.java
      </URI>
      
      <URI>core/TypeImpl.java
      </URI>
    </resources>
    
  </scm:Change>
  
  <scm:Change>
    <revision>0.3.8
    </revision>
    
    <authorId>miketoth
    </authorId>
    
    <date>2009-05-27
    </date>
    
    <detail>
    
      <scm:Change>
        <date>2009-05-27
        </date>
        
        <notes>
          <scm:Note>Provide a general means to set arbitrary Rules for any Type
          </scm:Note>
          <scm:Note>Moved Rule management from abstract Type to implementations
            due to dependency on linking behavior.
          </scm:Note>
          <scm:Note>RuleSet allows chaining other RuleSets, primarily 
            to accomodate archetype rules. 
          </scm:Note>
          <scm:Note>Provide link tracing functionality in the abstract Type
            as a way to debug linking issues.
          </scm:Note>
          <scm:Note>ThreadLocalStack can now provide an array of its contents
          </scm:Note>
        </notes>
    
        <path>source/spiralcraft/data/Type.java
        </path>
        <path>source/spiralcraft/data/core/AbstractAggregateType.java
        </path>
        <path>source/spiralcraft/data/core/TypeImpl.java
        </path>
        <path>source/spiralcraft/data/reflect/ReflectionType.java
        </path>
        <path>source/spiralcraft/rules/RuleSet.java
        </path>
        <path>source/spiralcraft/rules/Inspector.java
        </path>
        <path>source/spiralcraft/rules/Inspector.java
        </path>
        <path>source/spiralcraft/util/thread/ThreadLocalStack.java
        </path>
      </scm:Change>

      <scm:Change>
        <date>2009-05-27
        </date>
        
        <notes>
          <scm:Note>Added back to ArrayUtil some methods to deal with primitive
            arrays.
          </scm:Note>
        </notes>
    
        <path>source/spiralcraft/util/ArrayUtil.java
        </path>
      </scm:Change>
    </detail>
  </scm:Change>
    
  <scm:Change>
    <revision>0.3.7
    </revision>
    
    <authorId>miketoth
    </authorId>
    
    <date>2009-05-26
    </date>
    
    <notes>
      <scm:Note>Enhancements to Pool and to abstract data components to
        support additional implementations (ie. completion of SQL Store).
      </scm:Note>
      <scm:Note>Logging enhancements in query subsystem
      </scm:Note>
      <scm:Note>Made spiralcraft.util.ArrayUtil generic, eliminating lots of
        casting in client code
      </scm:Note>
      <scm:Note>NPE fix in BufferType.link()
      </scm:Note>      
    </notes>
    
    <detail>
      <scm:Change>
    
        <date>2009-05-26
        </date>
    
        <notes>
          <scm:Note>Initial round of logging enhancements to Query 
            subsystem. Queries and BoundQueries accept a debugLevel.
          </scm:Note>
        </notes>
    
        <path>source/spiralcraft/data/
        </path>
        
        <resources>
          <URI>query/BoundQuery.java
          </URI>
          <URI>query/Distinct.java
          </URI>
          <URI>query/Equijoin.java
          </URI>
          <URI>query/Query.java
          </URI>
          <URI>query/Scan.java
          </URI>
          <URI>query/Selection.java
          </URI>
          <URI>query/SetFilter.java
          </URI>
          <URI>query/Sort.java
          </URI>
          <URI>query/UnaryBoundQuery.java
          </URI>
          <URI>spi/AbstractAggregateQueryable.java
          </URI>
        </resources>
      </scm:Change>

      <scm:Change>
    
        <date>2009-05-26
        </date>
    
        <notes>
          <scm:Note>Fixed NPE in BufferType during link() when buffered type
            has key fields but no primary key
          </scm:Note>
        </notes>
    
        <path>source/spiralcraft/data/session/BufferType.java
        </path>
      </scm:Change>

      <scm:Change>
    
        <date>2009-05-25
        </date>
    
        <notes>
          <scm:Note>Made spiralcraft.util.ArrayUtil generic, eliminating lots of
        casting in client code
          </scm:Note>
        </notes>
    
        <path>source/spiralcraft/
        </path>
    
        <resources>
          <URI>builder/AssemblyClass.java
          </URI>
          <URI>data/session/BufferTuple.java
          </URI>
          <URI>data/spi/ArrayDeltaTuple.java
          </URI>
          <URI>exec/Executor.java
          </URI>
          <URI>sax/Element.java
          </URI>
          <URI>shell/ArgumentSet.java
          </URI>
          <URI>task/AbstractTask.java
          </URI>
          <URI>time/Clock.java
          </URI>
          <URI>util/Path.java
          </URI>
          <URI>util/ArrayUtil.java
          </URI>
        </resources>
      </scm:Change>

      <scm:Change>
    
        <date>2009-05-24
        </date>
    
        <notes>
          <scm:Note>Refactor XmlStore generic code into AbstractStore, so
            SqlStore can share 
          </scm:Note>
          <scm:Note>Eliminated Registrant interface as a means of configuration
            for Store,Sequence, and Space and moved to internal resolve() 
            method triggered by Lifecycle.
          </scm:Note>
          <scm:Note>Made ArrayDeltaTuple more typesafe by making Tuple
            constructor a DeltaTuple constructor
          </scm:Note>
        </notes>
    
        <path>source/spiralcraft/data/
        </path>
    
        <resources>
          <URI>xml/XmlStore.java
          </URI>
          <URI>spi/AbstractStore.java
          </URI>
          <URI>Sequence.java
          </URI>
          <URI>spi/ArrayDeltaTuple.java
          </URI>
        </resources>
      </scm:Change>

      <scm:Change>
    
        <date>2009-05-23
        </date>
    
        <notes>
          <scm:Note>Pool enhancements for use by SQL package- genericized,
            updated logging code, and removed Registrant interface (until
            useful again for monitoring).
          </scm:Note>
        </notes>
    
        <path>source/spiralcraft/pool/
        </path>
    
        <resources>
          <URI>Pool.java
          </URI>
          <URI>ResourceFactory.java
          </URI>
          <URI>ThreadPool.java
          </URI>
        </resources>
      </scm:Change>
      
    </detail>
  </scm:Change>
  
  <scm:Change>
    <revision>0.3.6
    </revision>
    
    <authorId>miketoth
    </authorId>
    
    <date>2009-05-22
    </date>
    
    <notes>
      <scm:Note>Fixed whitespace handling for attributes in XML fragment
        parser
      </scm:Note>
    </notes>
    
    <path>source/spiralcraft/text/xml/LiteralReader.java
    </path>
  </scm:Change>


  <scm:Change>
    <revision>0.3.5
    </revision>
    
    <authorId>miketoth
    </authorId>
    
    <date>2009-05-21
    </date>
    
    <notes>
      <scm:Note>New SetFilter query for testing inclusion in a set
      </scm:Note>
      <scm:Note>Array literals in lang  [ type expression ][{x0, x1, ...}]
      </scm:Note>
      <scm:Note>"contains" operator [ set ?= value ] for lang
      </scm:Note>
      <scm:Note>Unit test system enhancements for managing and reporting test
        results. 
      </scm:Note>
      <scm:Note>Added "enum" handling to ReflectionType datatypes 
      </scm:Note>
      <scm:Note>Regression fixes, minor syntax enhancements
      </scm:Note>
    </notes>
    
    <detail>
      <scm:Change>
        <date>2009-05-21
        </date>
        
        <notes>
          <scm:Note>"Collect" scenario- made property aggregateX instead of X
            for more descriptive name
          </scm:Note>
          <scm:Note>Fixed ContextNode NPE when no Focus node is provided as a
            source
          </scm:Note>
          <scm:Note>"Reference" scenario now has setter methods
          </scm:Note>

        </notes>
        
        <path>source/spiralcraft/
        </path>
        
        <URI>data/task/Collect.java
        </URI>
        <URI>lang/parser/ContextNode.java
        </URI>
        <URI>task/Reference.java
        </URI>
      </scm:Change>

      <scm:Change>
        <date>2009-05-21
        </date>
        
        <notes>
          <scm:Note>Handle Enums properly in ReflectionType by looking up
            a StringConverter, and ensuring that Enums are primitive.
          </scm:Note>

        </notes>
        
        <path>source/spiralcraft/
        </path>
        
        <URI>data/reflect/ReflectionType.java
        </URI>
      </scm:Change>

      <scm:Change>
        <date>2009-05-21
        </date>
        
        <notes>
          <scm:Note>Completed "Reference" scenario
          </scm:Note>

        </notes>
        
        <path>source/spiralcraft/task/
        </path>
        
        <URI>Reference.java
        </URI>
      </scm:Change>
      
      <scm:Change>
        <date>2009-05-21
        </date>
        
        <notes>
          <scm:Note>Improved management and reporting of test results via 
            TestGroup.
          </scm:Note>
          <scm:Note>Added standard assertion mechanism
          </scm:Note>

        </notes>
        
        <path>source/spiralcraft/test/
        </path>
        
        <resources>
          <URI>Assertion.java
          </URI>
          <URI>Stub.java
          </URI>
          <URI>Test.java
          </URI>
          <URI>TestFailedException.java
          </URI>
          <URI>TestGroup.java
          </URI>
          <URI>TestResult.java
          </URI>
        </resources>
      </scm:Change>

      <scm:Change>
        <date>2009-05-13
        </date>
        
        <notes>
          <scm:Note>New SetFilter query for testing source data for inclusion 
            in a set.
          </scm:Note>
          <scm:Note>Split up huge "factorNode" method in Select query in
            preparation for future additional optimizable nodes.
          </scm:Note>
          <scm:Note>Provide integral support for an aggregate "contains"
            operation.  
          </scm:Note>
          <scm:Note>Added support for array creation to assist with literal
            sets.
          </scm:Note>
          <scm:Note>Completed implementation of ClosureFocus to transfer
            bound Channel data to another thread via a Closure object.
          </scm:Note>
          <scm:Note>CurrentFocus node accepts scanner token so it can
            reconstruct itself properly
          </scm:Note>          

        </notes>
        
        <path>source/spiralcraft/
        </path>
        
        <resources>
          <URI>data/query/SetFilter.java
          </URI>
          <URI>data/query/Selection.java
          </URI>
          <URI>lang/spi/ClosureFocus.java
          </URI>
          <URI>lang/spi/ArrayConstructorChannel.java
          </URI>
          <URI>lang/spi/ArrayContainsChannel.java
          </URI>
          <URI>lang/spi/IterableContainsChannel.java
          </URI>
          <URI>lang/parser/ContainsNode.java
          </URI>
          <URI>lang/parser/CurrentFocusNode.java
          </URI>
          <URI>lang/parser/ExpressionParser.java
          </URI>
          <URI>lang/parser/Node.java
          </URI>
          <URI>lang/parser/SubscriptNode.java
          </URI>
          <URI>lang/reflect/ArrayReflector.java
          </URI>
          <URI>lang/reflect/BeanReflector.java
          </URI>
          
        </resources>
      </scm:Change>

      <scm:Change>
        <date>2009-05-12
        </date>
        
        <notes>
          <scm:Note>Provide the ability to include namespace prefixes in
            spiralcraft.data XML file "ref" attributes, by requiring that
            absolute URIs in the ref attribute value be prefixed by a ":"
          </scm:Note>
          <scm:Note>These attributes are almost always coded by hand, 
            especially when they reference absolute URIs, so they should
            use the existing namespace prefixes.
          </scm:Note>
          <scm:Note>Provided a deprecation warning when using an absolute URI
            with no ":" prefix to maintain backward compatibility.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/
        </path>
        
        <resources>
          <URI>data/sax/DataHandler.java
          </URI>
          <URI>data/sax/DataHandlerBase.java
          </URI>
        </resources>
      </scm:Change>

      <scm:Change>
        <date>2009-05-11
        </date>
        
        <notes>
          <scm:Note>Make sure queries with no Scans are solved by the Space
            itself, since no Stores will be consulted. Added unit tests
            for use with ReferenceQuery to verify.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/
        </path>
        
        <resources>
          <URI>data/Space.java
          </URI>
        </resources>
      </scm:Change>
    </detail>
    
  </scm:Change>

        
  <scm:Change>
    <revision>0.3.4
    </revision>
    
    <authorId>miketoth
    </authorId>
    
    <date>2009-05-11
    </date>
    
    <notes>
      <scm:Note>Ongoing spiralcraft-sql module support and integration
      </scm:Note>
    </notes>

        
    <detail>
      <scm:Change>
        <date>2009-05-09
        </date>
        
        <notes>
          <scm:Note>Fix regression issues and issues exposed with new
            functionality.
          </scm:Note>
          <scm:Note>Correct exception in PrimitiveTypeImpl.toString() to
            show the correct target type instead of "String"
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/
        </path>
        
        <resources>
          <URI>data/core/PrimitiveTypeImpl.java
          </URI>
        </resources>
      </scm:Change>

      <scm:Change>
        <date>2009-05-09
        </date>
        
        <notes>
          <scm:Note>Fix regression issues and issues exposed with new
            functionality.
          </scm:Note>
          <scm:Note>Prevent a BufferTuple from being created with a non-buffer
            Type.
          </scm:Note>
          <scm:Note>Fetch updater using archetype of BufferType, which is
            original type, because Space doesn't know about the buffer type.
          </scm:Note>
          <scm:Note>External logging added to DataWriter.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/data/
        </path>
        
        <resources>
          <URI>session/BufferTuple.java
          </URI>
          <URI>sax/DataWriter.java
          </URI>
        </resources>
      </scm:Change>

      <scm:Change>
        <date>2009-05-08
        </date>
        
        <notes>
          <scm:Note>Fixed issue where Tuple.set("field",value) syntax
            did not recognize fields in base-type.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/
        </path>
        
        <resources>
          <URI>data/spi/EditableArrayTuple.java
          </URI>
        </resources>
      </scm:Change>

      <scm:Change>
        <date>2009-05-06
        </date>
        
        <notes>
          <scm:Note>Enhanced builder exceptions to show list of available
            properties when a property is not found.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/
        </path>
        
        <resources>
          <URI>beans/MappedBeanInfo.java
          </URI>
          <URI>builder/PropertyBinding.java
          </URI>
          <URI>builder/PropertySpecifier.java
          </URI>
          <URI>data/builder/BuilderField.java
          </URI>
          <URI>data/builder/BuilderType.java
          </URI>
        </resources>
      </scm:Change>
      
      <scm:Change>
        <date>2009-05-04
        </date>

        <notes>
          <scm:Note>Enhancements to flat file data handling and integration
            into task/scenario architecture.
          </scm:Note>
          

          <scm:Note>More informative DataException reporting, as well as
            better reporting for bad record reading.
          </scm:Note>
          
          <scm:Note>FlatFile cursors have an error tolerant mode which skips
            bad records.
          </scm:Note>

          <scm:Note>New IO classes ConsumableFileInputStream and
            FileBufferedInputStream for efficiency when reading huge or
            very granular network input streams.
          </scm:Note>

          <scm:Note>Default formatter does not dump stack trace for
            INFO level exceptions.
          </scm:Note>
          
          <scm:Note>CursorAggregate support for reading subset of records
            in cursor.
          </scm:Note>
          
          <scm:Note>TypeImpl now re-uses its integral FieldSet to preserve
            identity relationship that components depend on.
          </scm:Note>
          
          <scm:Note>TypeImpl now re-uses its integral FieldSet to preserve
            identity relationship that components depend on, and disallows
            call to getFieldSet() before type is linked in order to enforce
            consistency. TupleReflector changed to avoid unnecessary call
            to getFieldSet() before Type is linked.
          </scm:Note>
        </notes>
        
        <resources>
          <URI>source/spiralcraft/log/DefaultFormatter.java
          </URI>
          <URI>source/spiralcraft/data/flatfile/DelimitedRecordFormat.java
          </URI>
          <URI>source/spiralcraft/data/flatfile/FieldMapping.java
          </URI>
          <URI>source/spiralcraft/data/flatfile/Output.java
          </URI>
          <URI>source/spiralcraft/data/flatfile/RecordCursor.java
          </URI>
          <URI>source/spiralcraft/data/flatfile/ScrollableRecordCursor.java
          </URI>
          <URI>source/spiralcraft/data/flatfile/Scan.java
          </URI>
          <URI>source/spiralcraft/data/core/TypeImpl.java
          </URI>
          <URI>source/spiralcraft/data/core/UnifiedFieldSet.java
          </URI>
          <URI>source/spiralcraft/data/lang/TupleReflector.java
          </URI>
          <URI>source/spiralcraft/data/access/CursorAggregate.java
          </URI>
          <URI>source/spiralcraft/data/DataException.java
          </URI>
          <URI>source/spiralcraft/io/ConsumableFileInputStream.java
          </URI>
          <URI>source/spiralcraft/io/FileBufferedInputStream.java
          </URI>
        </resources>
      </scm:Change>

      <scm:Change>
        <date>2009-05-04
        </date>

        <notes>
          <scm:Note>Support Pattern matching rules for data StringType, and
            better exception handling for Rules.
          </scm:Note>
          
          <scm:Note>Added core support for java.util.regex.Pattern as
            a primitive data type.
          </scm:Note>

        </notes>
        
        <resources>
          <URI>source/spiralcraft/util/string/StringConverter.java
          </URI>
          <URI>source/spiralcraft/rules/PatternRule.java
          </URI>
          <URI>source/spiralcraft/rules/RuleException.java
          </URI>
          <URI>source/spiralcraft/rules/Violation.java
          </URI>
          <URI>source/spiralcraft/data/types/standard/PatternType.java
          </URI>
          <URI>source/spiralcraft/data/types/standard/StringType.java
          </URI>
          <URI>source/spiralcraft/data/reflect/ReflectionType.java
          </URI>
        </resources>
      </scm:Change>

      <scm:Change>
        <date>2009-05-04
        </date>

        <notes>
          <scm:Note>Enhancements to TaskRunner to support command line
            utility development
          </scm:Note>
          
          <scm:Note>Added method to retrieve remaining command arguments
            when delegating execute(String ...)
          </scm:Note>

          <scm:Note>Option to dynamically load and chain Scenarios in TaskRunner
            via command line arguments, to allow for Scenario assemblies to
            be re-used in either a command line or embedded context.
          </scm:Note>

          <scm:Note>Suppress redundant exception reporting in TaskCommand
          </scm:Note>
        </notes>
        
        <resources>
          <URI>source/spiralcraft/exec/Arguments.java
          </URI>
          <URI>source/spiralcraft/task/TaskRunner.java
          </URI>
          <URI>source/spiralcraft/task/TaskCommand.java
          </URI>
        </resources>
      </scm:Change>

      <scm:Change>
        <date>2009-05-01
        </date>

        <notes>
          <scm:Note>Added shutdown hook to Scheduler to prevent running
            tasks after shutdown is initiated
          </scm:Note>
        </notes>
        
        <resources>
          <URI>source/spiralcraft/time/Scheduler.java
          </URI>
        </resources>
      </scm:Change>

      <scm:Change>
        <date>2009-05-01
        </date>

        <notes>
          <scm:Note>Automated regression testing facility enhancements
            related to staging data for various stores.
          </scm:Note>
 
          <scm:Note>Scenario model now supports a chain pattern for
            fluent setup.
          </scm:Note>
          
          <scm:Note>Removed excessive generics usage from Scenario model
            and de-emphasized command result path as a data path. Command
            result path is essentially a control path in this model, as
            the data path should be through the FocusChain.
          </scm:Note>

          <scm:Note>VFS supports a copy from classpath function useful for
            using built-in data to stage a test from scratch. This works
            with local classloaders by interpreting the the jar or file URL,
            in conjuction with the pattern search tool.
          </scm:Note>
          
          <scm:Note>vfs now has a JarResource and FileResource
          </scm:Note>
          
          <scm:Note>PathPattern now accepts a prefix, so the pattern
            doesn't need to include it, if the usage only supplies 
            absolute paths.
          </scm:Note>
          
          <scm:Note>Added error handling to vfs and generic task components to 
           deal with secondary cases and more error conditions, and multiple
           Exceptions in multi-task models. 
          </scm:Note>

          <scm:Note>Added spiralcraft.data.task.Collect to manage an
            Aggregate to collect results of batch tasks. 
          </scm:Note>


          <scm:Note>Built ClosureFocus to provide automatic thread-inheritable
            context for tasks which spawn threads.
          </scm:Note>
          
        </notes>
        
        <path>/source/spiralcraft
        </path>
          
        <resources>
          <URI>vfs/task/Copy.java
          </URI>
          <URI>vfs/jar/JarFileResource.java
          </URI>
          <URI>vfs/jar/JarResourceFactory.java
          </URI>
          <URI>vfs/filters/PatternFilter.java
          </URI>
          <URI>vfs/filters/NameGlobFilter.java
          </URI>
          <URI>vfs/file/FileResource.java
          </URI>
          <URI>vfs/classpath/ClasspathResource.java
          </URI>
          <URI>vfs/batch/Search.java
          </URI>
          <URI>vfs/AbstractResource.java
          </URI>
          <URI>vfs/Resolver.java
          </URI>
          <URI>util/Path.java
          </URI>
          <URI>util/PathPattern.java
          </URI>
          <URI>util/MultiException.java
          </URI>
          <URI>task/AbstractTask.java
          </URI>
          <URI>task/Batch.java
          </URI>
          <URI>task/Exec.java
          </URI>
          <URI>task/Reference.java
          </URI>
          <URI>task/MultiTask.java
          </URI>
          <URI>task/ParallelTask.java
          </URI>
          <URI>task/Scenario.java
          </URI>
          <URI>task/Sequence.java
          </URI>
          <URI>task/SerialTask.java
          </URI>
          <URI>task/TaskCommand.java
          </URI>
          <URI>task/TaskListener.java
          </URI>
          <URI>task/TaskRunner.java
          </URI>
          <URI>test/Stub.java
          </URI>
          <URI>test/Test.java
          </URI>
          <URI>test/TestGroup.java
          </URI>
          <URI>test/TestResult.java
          </URI>
          <URI>io/InputStreamWrapper.java
          </URI>
          <URI>data/util/DataBatchProcessor.java
          </URI>
          <URI>data/task/Collector.java
          </URI>
          <URI>data/task/Fetch.java
          </URI>
          <URI>lang/spi/ClosureFocus.java
          </URI>
          <URI>lang/spi/ThreadLocalChannel.java
          </URI>
        </resources>              
      </scm:Change>
      
      <scm:Change>
        <date>2009-04-30
        </date>
        
        <notes>
          <scm:Note>Refactor Space to support multiple Stores, as originally
            intended. class SingleSpace has been removed in favor of a 
            concrete spiralcraft.data.Space.
          </scm:Note>
          <scm:Note>Query supports recursive search for Scan types to 
            better narrow the set of stores to Query. This function was moved
            from AbstractStore.
          </scm:Note>
          <scm:Note>Query resolution should use the Focus chain to obtain the 
            relevant Space in which to recursively solve the query. Implemented
            in AbstractStore.
          </scm:Note>
          <scm:Note>Store interface is now a Service, and provides new method
            isAuthoritative to identify master store when multiple stores 
            support a Type.
          </scm:Note>
          <scm:Note>XmlStore defines authoritative types from the 
            XmlQueryable tables and from base types that have Sequence fields.
          </scm:Note>
        </notes>
        
        <path>/source/spiralcraft/data/
        </path>
        
        <resources>
          <URI>spi/SingleSpace.java
          </URI>
          <URI>Space.java
          </URI>
          <URI>query/Query.java
          </URI>
          <URI>query/Concatenation.java
          </URI>
          <URI>query/ConcatenationBinding.java
          </URI>
          <URI>spi/AbstractStore.java
          </URI>
          <URI>xml/XmlStore.java
          </URI>
          <URI>access/Store.java
          </URI>
        </resources>
        
      </scm:Change>
      
      <scm:Change>
        <date>2009-04-30
        </date>
        
        <notes>
          <scm:Note>Summary- Fix builder regression for persistence mechanism,
            which got tripped up on some other issues.
          </scm:Note>
          <scm:Note>MappedBeaninfo provides a CovariantPropertyType service,
            because java.beans.PropertyDescriptor is not powerful enough
            for Covariants and Generics.
          </scm:Note>
          <scm:Note>We now avoid instantiating and configuring assemblies
            created by default PropertySpecifiers.
          </scm:Note>
          <scm:Note>More intelligent property type resolution in 
            PropertySpecifier via MappedBeanInfo
          </scm:Note>
          <scm:Note>java.lang types are now explicitly dealt with in 
            AssemblyClass, so they do not get in the way of other unqualified 
            declarations for "local" assys.
          </scm:Note>
          <scm:Note>For consistency, PropertySpecifiers will always contain
            a "default" AssemblyClass, which will not be instantiated, but will
            serve as a discovery mechanism for the part of the object subgraph
            it manages. There is no longer a distinction between 
            getProperty() and discoverProperty(), but leaving the method in
            for compatibility.
          </scm:Note>
          <scm:Note>Clarified TypeMismatchException output
          </scm:Note>
          <scm:Note>ClassUtil has tool to determine root type of
            ParameterizedType
          </scm:Note>
          <scm:Note>ObjectType is no longer primitive, and can be assigned
            from anything but Void.
          </scm:Note>
          <scm:Note>data.reflect.ReflectionType now uses type inference 
            mechanism from lang.reflect package to handle java.beans
            issues in an identical fashion.
          </scm:Note>
          <scm:Note>Fields now get log from base class
          </scm:Note>
        </notes>
        
        <path>/source/spiralcraft/
        </path>
        
        <resources>
          <URI>beans/MappedBeanInfo.java
          </URI>
          <URI>builder/Assembly.java
          </URI>
          <URI>builder/AssemblyClass.java
          </URI>
          <URI>builder/PropertyBinding.java
          </URI>
          <URI>builder/PropertySpecifier.java
          </URI>
          <URI>data/TypeMismatchException.java
          </URI>
          <URI>data/types/standard/ObjectType.java
          </URI>
          <URI>data/reflect/ReflectionScheme.java
          </URI>
          <URI>data/reflect/ReflectionField.java
          </URI>
          <URI>util/lang/ClassUtil.java
          </URI>
          <URI>lang/reflect/BeanPropertyTranslator.java
          </URI>
          <URI>lang/reflect/BeanReflector.java
          </URI>
          <URI>data/builder/BuilderField.java
          </URI>
          <URI>data/builder/BuilderScheme.java
          </URI>
          <URI>data/builder/BuilderType.java
          </URI>
          <URI>data/core/CalculatedFieldImpl.java
          </URI>
          <URI>data/core/CalculatedFieldImpl.java
          </URI>
          <URI>data/core/FieldImpl.java
          </URI>
          <URI>data/core/KeyField.java
          </URI>
          <URI>data/core/QueryField.java
          </URI>
        </resources>
        
      </scm:Change>

      <scm:Change>
        <date>2009-04-29
        </date>
        
        <notes>
          <scm:Note>Provide encapsulation of standard Transaction management
            logic in a WorkUnit callback object
          </scm:Note>
        </notes>
        
        <path>/source/spiralcraft/data/transaction/
        </path>
        
        <resources>
          <URI>Transaction.java</URI>
          <URI>WorkUnit.java</URI>
          <URI>WorkException.java</URI>
        </resources>
        
      </scm:Change>

      <scm:Change>
        <date>2009-04-26
        </date>
        
        <notes>
          <scm:Note>Refactor Cursor interface to account for need to use
            close(), and removal of legacy requirement to avoid name 
            clash using the dataXXX method names.
          </scm:Note>
        </notes>
        
        <path>/source/spiralcraft/
        </path>
        
        <resources>
          <URI>data/access/Cursor.java</URI>
          <URI>data/access/SerialCursor.java</URI>
          <URI>data/access/ScrollableCursor.java</URI>
          <URI>data/access/CursorAggregate.java</URI>
          <URI>data/access/DataSynchronizer.java</URI>
          <URI>data/core/KeyField.java</URI>
          <URI>data/core/QueryField.java</URI>
          <URI>data/core/UniqueRule.java</URI>
          <URI>data/flatfile/RecordCursor.java</URI>
          <URI>data/flatfile/ScrollableRecordCursor.java</URI>
          <URI>data/lang/CursorBinding.java</URI>
          <URI>data/lang/TupleFocus.java</URI>
          <URI>data/query/QueryAggregate.java</URI>
          <URI>data/query/BoundQuery.java</URI>
          <URI>data/query/UnaryBoundQuery.java</URI>
          <URI>data/query/Sort.java</URI>
          <URI>data/query/Shuffle.java</URI>
          <URI>data/query/Equijoin.java</URI>
          <URI>data/query/Selection.java</URI>
          <URI>data/query/Distinct.java</URI>
          <URI>data/query/UnionBinding.java</URI>
          <URI>data/query/QueryChannel.java</URI>
          <URI>data/task/Fetch.java</URI>
          <URI>data/spi/AbstractAggregateQueryable.java</URI>
          <URI>data/spi/CursorIterator.java</URI>
          <URI>data/spi/ListCursor.java</URI>
          <URI>data/spi/ManualCursor.java</URI>
          <URI>security/spi/DataAuthenticator.java</URI>
          <URI>data/xml/XmlStore.java</URI>
        </resources>
        
      </scm:Change>
      
      <scm:Change>
        <date>2009-04-26
        </date>
        
        <path>/source/spiralcraft/test/
        </path>
        
        <notes>
          <scm:Note>A package for implementing automated test cases built on 
            the Task/Scenario system, to produce TestResults in a wide variety
            of scenarios. 
          </scm:Note>
        </notes>
      </scm:Change>
      
      <scm:Change>
        <date>2009-04-26
        </date>
        
        <path>/source/spiralcraft/command/BoundCommandFactory.java
        </path>
        
        <notes>
          <scm:Note>Encapsulates the situation where a Command is specified
            by an Expression or other device resolved against the Focus chain.
          </scm:Note>
          <scm:Note>This anticipates
            that Expression driven command resolution will need to support
            just-in time customization of the generated Command objects via
            property injection, for more control in the declarative layer.
          </scm:Note>
        </notes>
        
      </scm:Change>
          
      <scm:Change>
        <date>2009-04-26
        </date>
        
        <path>/source/spiralcraft/builder/PropertyBinding.java
        </path>
        
        <notes>
          <scm:Note>Builder resolves namespaces in Expressions when
            the target is of type Expression, before
            applying the Expression object to the target.
          </scm:Note>
        </notes>
        
      </scm:Change>

      <scm:Change>
        <date>2009-04-26
        </date>
        
        <path>/source/
        </path>
        
        <resources>
          <URI>spiralcraft/vfs/Initializer.java
          </URI>
          <URI>spiralcraft/vfs/Resolver.java
          </URI>
          <URI>META-INF/services/spiralcraft.common.Initializer
          </URI>
        </resources>
        
        <notes>
          <scm:Note>Register a StringConverter for Resource objects
          </scm:Note>
        </notes>
      </scm:Change>
      
      <scm:Change>
        <date>2009-04-26
        </date>
        
        <path>/source/spiralcraft/data/
        </path>
        
        <resources>
          <URI>spi/SingleSpace.java
          </URI>
          <URI>spi/AbstractStore.java
          </URI>
          <URI>xml/XmlStore.java
          </URI>
        </resources>
        
        <notes>
          <scm:Note>Debugging and logging functionality
          </scm:Note>
          <scm:Note>Startup assertion- ensure that Store is started when
             trying to query.
          </scm:Note>
          <scm:Note>XmlStore now calls super Lifecycle interface
          </scm:Note>
          <scm:Note>Space now implements Service, which extends Registrant. 
            Removed redundant implements Registrant declaration from
            SingleSpace.
          </scm:Note>
        </notes>
      </scm:Change>
      
      <scm:Change>
        <date>2009-04-24
        </date>
        
        <path>/source/spiralcraft
        </path>
        
        <resources>
          <URI>task/*
          </URI>
          <URI>data/task/Fetch.java
          </URI>
          <URI>data/util/DataBatchProcessor.java
          </URI>
        </resources>
        
        
        <notes>
          <scm:Note>Scenario is now a CommandFactory, and always creates 
            TaskCommands to allow for interaction between tasks.
          </scm:Note>
          <scm:Note>Created Fetch to run data queries from a Task
          </scm:Note>
          <scm:Note>Added stateless result processing chain to Task
             infrastructure
          </scm:Note>
          <scm:Note>TaskRunner publishes the Service tree into into the
            Focus.
          </scm:Note>
          <scm:Note>Clarified Scenario hierarchical compositional model.
          </scm:Note>
          <scm:Note>Refactored the BatchScenario into multiple components-
            Batch, Reference and Exec.
          </scm:Note>
        </notes>
      </scm:Change>
    </detail>
    
  </scm:Change>
  
  <scm:Change>
    <revision>0.3.3
    </revision>
    
    <date>2009-04-21
    </date>
    
    <authorId>miketoth
    </authorId>
    
    <notes>
      <scm:Note>Ongoing spiralcraft-sql module support and integration
      </scm:Note>
    </notes>
    

    <detail>
      <scm:Change>
        <date>2009-04-21
        </date>
        
        <path>/source/spiralcraft/io/
        </path>
        
        <resources>
          <URI>FileSequence.java</URI>
          <URI>RotatingFileOutputAgent.java</URI>
        </resources>
        
        <notes>
          <scm:Note>Handle situation where log fails to rotate because file
            is opened by something else. Put off rotate for 2 seconds
            default.
          </scm:Note>
        </notes>
      </scm:Change>

      <scm:Change>
        <date>2009-04-20
        </date>
        
        <path>/source/spiralcraft/data/sax/
        </path>
        
        <resources>
          <URI>DataHandler.java</URI>
          <URI>DataHandlerBase.java</URI>
          <URI>DataReader.java</URI>
          <URI>DataSAXException.java</URI>
        </resources>
        
        <notes>
          <scm:Note>Ensure that document location is provided for parser
            generated SAX exceptions
          </scm:Note>
        </notes>
      </scm:Change>

      <scm:Change>
        <date>2009-04-20
        </date>
        
        <path>/source/spiralcraft/builder/AssemblyLoader.java
        </path>
        
        <notes>
          <scm:Note>Write dataURI builder attribute to PropertySpecifier
          </scm:Note>
        </notes>
      </scm:Change>
    
      <scm:Change>
        <date>2009-04-20
        </date>
        
        <path>/source/spiralcraft/task/TaskRunner.java
        </path>
        
        <notes>
          <scm:Note>Throw better exception when no scenario configured
          </scm:Note>

          <scm:Note>Integrate a Service (or ServiceGroup) to be run
            along with the Scenario.
          </scm:Note>
        </notes>
      </scm:Change>

      <scm:Change>
        <date>2009-04-20
        </date>
        
        <resources>
          <URI>/source/spiralcraft/data/persist/AbstractXmlObject.java
          </URI>
        </resources>
            
        
        <notes>
          <scm:Note>Renamed method create() to activate(). New method
             create() only instantiates object.
          </scm:Note>
        </notes>
        
        <detail>
        
          <resources>
            <URI>/source/spiralcraft/builder/PropertyBinding.java
            </URI>
            <URI>/source/spiralcraft/exec/Executor.java
            </URI>
            <URI>/source/spiralcraft/task/BatchScenario.java
            </URI>
          </resources>
          
          <notes>
            <scm:Note>Refactoring sorted out
            </scm:Note>
          </notes>
        </detail>
      </scm:Change>

      <scm:Change>
        <date>2009-04-20
        </date>
        
        <path>/source/spiralcraft/data/reflect/
        </path>
        
        <resources>
          <URI>ReflectionType.java
          </URI>
          <URI>ReflectioTypeFactory.java
          </URI>
        </resources>
        
        <notes>
          <scm:Note>Remove spiralcraft.data related ClassNotFoundException that
           prints to stderr. Move to using ClassLog instead of stderr
          </scm:Note>
        </notes>
        
      </scm:Change>
      
      <scm:Change>
        <date>2009-04-20
        </date>
        
        <resources>
          <URI>/source/spiralcraft/service/Service.java
          </URI>
          <URI>/source/spiralcraft/service/ThreadService.java
          </URI>
          <URI>/source/spiralcraft/service/ServiceGroup.java
          </URI>
        </resources>
        
        <notes>
          <scm:Note>spiralcraft.service.Service interface now extends
             Registrant, as many components that fit in the Service role
             are also Registrants, and would benefit from top-down
             reachability.
          </scm:Note>
        </notes>
        <detail>

          
          <scm:Change>
            <path>/source/spiralcraft/data/Space
            </path>
            
            <notes>
              <scm:Note>Implements Service
              </scm:Note>
            </notes>
          </scm:Change>
          
          <scm:Change>
            <notes>
              <scm:Note>ServiceAdapter obsoleted
              </scm:Note>
              
            </notes>
            <resources>
              <URI>/source/spiralcraft/service/ServiceAdapter.java
              </URI>
              <URI>/source/spiralcraft/service/ThreadService.java
              </URI>
              <URI>/source/spiralcraft/ui/UiService.java
              </URI>
              
            </resources>
          </scm:Change>

          <scm:Change>
            <path>/source/spiralcraft/service/Daemon.java
            </path>

            <notes>
            
              <scm:Note>Removed old JUL logging code
                 in register(), remove method and defer to super.register()
              </scm:Note>  
            </notes>
          </scm:Change>
                    
        </detail>
        
      </scm:Change>    
    </detail>
  </scm:Change>
  
  <scm:Change>
    <revision>0.3.2
    </revision>
    
    <authorId>miketoth
    </authorId>
    
    <notes>
      <scm:Note>Bug fixes
      </scm:Note>
      <scm:Note>Change management system testing
      </scm:Note>
      <scm:Note>Ongoing spiralcraft-sql module support and integration
      </scm:Note>
    </notes>
    
    <detail>
      <scm:Change>
        <date>2009-04-20
        </date>
        
        <path>/source/spiralcraft/builder
        </path>
        
        <notes>
          <scm:Note>Fix problem using drill-down property specifier - 
            "More than one Assembly in property" introduced
            with latest builder upgrade set. PropertySpecifier now correctly
            uses "replace" mode when computing override for non-aggregate
            properties.
            
          </scm:Note>
        </notes>
      </scm:Change>

      <scm:Change>
        <date>2009-04-19
        </date>
        
        <path>/source/spiralcraft/lang/reflect/BeanPropertyChannel
        </path>
        
        <notes>
          <scm:Note>Fix null exception thrown in WebUI on REQUEST event in
                 Editor. When trying to set a property of a null value, return
                 false from set() instead of throwing an exception. Encountering
                 a null should be a soft failure.
          </scm:Note>
        </notes>
      </scm:Change>
          
      <scm:Change>
        <date>2009-04-19
        </date>
        
        <path>/source/spiralcraft/task/Scenario
        </path>
        
        <notes>
          <scm:Note>Removed bindCommand and associated ThreadLocalChannel for
            command, as it appears that this functionality is no longer used
            and no longer has a purpose.
          </scm:Note>
        </notes>
      </scm:Change>
    
      <scm:Change>
        <date>2009-04-19
        </date>
        
        <path>/source/spiralcraft/task/TaskRunner
        </path>
        
        <notes>
          <scm:Note>Provide bean configuration for the root Focus into
            which the referenced Scenario will be bound. This is anticipated
            as being generally useful, but the specific case that prompted
            it is no longer applicable.
          </scm:Note>
        </notes>
      </scm:Change>
    
      <scm:Change>
        <date>2009-04-19
        </date>
        
        <path>/source/spiralcraft/builder
        </path>
        
        <notes>
          <scm:Note>Functionally transparent refactoring to modularize 
            configuration source scenarios and split up large methods.
          </scm:Note>
        </notes>
      </scm:Change>
    
      <scm:Change>
        <date>2009-04-17
        </date>
        
        <path>/source/spiralcraft/lang/util/Configurator.java
        </path>
        
        <notes>
          <scm:Note>Improved debug message when bean property is not found
          </scm:Note>
                  
        </notes>
      </scm:Change>
          
      <scm:Change>
        <date>2009-04-17
        </date>
        
        <path>/source/spiralcraft/log/
        </path>
        
        <resources>
          <URI>DefaultFormatter.java
          </URI>
        </resources>
        
        <notes>
          <scm:Note>Improved readability of default formatter by putting 
            message up front and
            source data at end of single line, eliminating the previous
            multi-line format.
          </scm:Note>
        
        </notes>
        
      </scm:Change>

      <scm:Change>
        <date>2009-04-16
        </date>
        
        <path>/source/spiralcraft/data/flatfile/
        </path>
        
        <resources>
          <URI>DelimitedRecordFormat.java
          </URI>
          <URI>Writer.java
          </URI>
        </resources>
        
        <notes>
          <scm:Note>Integrated DelimitedRecordFormat into Writer
          </scm:Note>
          
          <scm:Note>Auto-configure DelimitedRecordFormat from supplied Type
            or FieldSet when no  FieldMapping[] is provided.
          </scm:Note>
        
        </notes>
      </scm:Change>
    </detail>
  </scm:Change>
</scm:Change.list>