<scm:Change.list
  xmlns:scm="class:/spiralcraft/scm/meta/"
  >
  <scm:Change>
  
    <revision>0.4.17
    </revision>
    
    <authorId>miketoth
    </authorId>
    
    

    <detail> 
      <scm:Change>
        <revision>-dev123
        </revision>
      
        <notes>
          <scm:Note>Added a ForId method prototype for basic primary key
            lookup in pattern-conformant entities.
          </scm:Note>
          <scm:Note>Added an "All" method prototype to retrieve all instances
            of a type.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/data/methods
        </path>
        
        <resources>
          <URI>ForId.proto.xml</URI>
          <URI>All.proto.xml</URI>
        </resources>
      </scm:Change>

      <scm:Change>
        <revision>-dev123
        </revision>
      
        <notes>
          <scm:Note>Basic mechanism for "Prototypes- a Type URI can refer to
            an object tree defined in a ".proto.xml" which represents an
            instance of the type. The archetype of a Prototype is the type
            declared for the root of the tree.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/data
        </path>
        
        <resources>
          <URI>TypeResolver.java
          </URI>
          <URI>core/Prototype.java
          </URI>
          <URI>reflect/ReflectionType.java
          </URI>
          <URI>xml/XmlPrototypeFactory.java
          </URI>
        </resources>
        
      </scm:Change>

      <scm:Change>
        <revision>-dev122
        </revision>
      
        <notes>
          <scm:Note>Contextualizeed Runtime Exception to report instance 
            declaration information for the source of a RuntimeException 
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/common/ContextualRuntimeException.java
        </path>
        
      </scm:Change>

      <scm:Change>
        <revision>-dev122
        </revision>
      
        <notes>
          <scm:Note>Improved reporting for configuration errors in Authenticator
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/security/auth
        </path>
        
        <resources>
          <URI>Authenticator.java
          </URI>
          <URI>AuthSession.java
          </URI>
        </resources>
        
      </scm:Change>

      <scm:Change>
        <revision>-dev121
        </revision>
      
        <notes>
          <scm:Note>Utility function to add a query parameter to a URI
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/util/URIUtil.java
        </path>
        
      </scm:Change>

      <scm:Change>
        <revision>-dev121
        </revision>
      
        <notes>
          <scm:Note>Fix NPE when no peer is specified
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/data/sax/XmlFrame.java
        </path>
        
      </scm:Change>

      <scm:Change>
        <revision>-dev121
        </revision>
      
        <notes>
          <scm:Note>Add a subsequence method to Sequence
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/util
        </path>
        
        <resources>
          <URI>ArrayUtil.java
          </URI>
          <URI>Sequence.java
          </URI>
        </resources>
        
      </scm:Change>

      <scm:Change>
        <revision>-dev121
        </revision>
      
        <notes>
          <scm:Note>Add declaration info to exception when a component is 
            called from out of scope.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft
        </path>
        
        <resources>
          <URI>app/kit/AbstractController.java
          </URI>
          <URI>app/kit/StateReferenceHandler.java
          </URI>
          <URI>lang/spi/ThreadLocalChannel.java
          </URI>
        </resources>
        
      </scm:Change>

      <scm:Change>
        <revision>-dev121
        </revision>
      
        <notes>
          <scm:Note>Allow plugins to manage and export file containers as part
            of the data model they contribute to a PlaceContext.
          </scm:Note>
          <scm:Note>Fix issue where presence of trailing slash in contextual
            mapping would affect resolution of relative contextual VFS urls.
          </scm:Note>
          <scm:Note>Add hooks that get invoked when a thread enters or leaves a
            PathContext
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft
        </path>
        
        <resources>
          <URI>app/PathContext.java
          </URI>
          <URI>app/PlaceContext.java
          </URI>
          <URI>app/PluginContext.java
          </URI>
          <URI>vfs/context/Authority.java
          </URI>
          <URI>vfs/context/FileSpace.java
          </URI>
        </resources>
        
      </scm:Change>

      <scm:Change>
        <revision>-dev121
        </revision>
      
        <notes>
          <scm:Note>Fix exception when sorting collections containing different
            subtypes of Number by comparing the double values of each pair.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/lang/functions/Ordering.java
        </path>
        
      </scm:Change>

      <scm:Change>
        <revision>-dev120
        </revision>
      
        <notes>
          <scm:Note>Utility to read character data from a Resource
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft
        </path>
        
        <resources>
          <URI>text/io/ReaderCharSequence.java
          </URI>
          <URI>vfs/ResourceUtil.java
          </URI>
        </resources>
      </scm:Change>

      <scm:Change>
        <revision>-dev119
        </revision>
      
        <notes>
          <scm:Note>Add a null-coalescing operator "??" to streamline syntax
            of providing defaults when something is null. 
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/data/lang/parser
        </path>
        
        <resources>
          <URI>ExpressionParser.java
          </URI>
          <URI>Node.java
          </URI>
          <URI>NullDefaultNode.java
          </URI>
        </resources>
      </scm:Change>

      <scm:Change>
        <revision>-dev119
        </revision>
      
        <notes>
          <scm:Note>When a static method is referenced in a non-static way
            or vice-versa, throw a more specific exception instead of 
            "Method not found"
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/data/lang/TupleReflector.java
        </path>
        
      </scm:Change>

      <scm:Change>
        <revision>-dev119
        </revision>
      
        <notes>
          <scm:Note>Added a numeric literal suffix "G" to indicate a
            BigDecimal or BigInteger, determined by the presence of a decimal
            point.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/lang/parser/ExpressionParser.java
        </path>
        
      </scm:Change>

      <scm:Change>
        <revision>-dev119
        </revision>
      
        <notes>
          <scm:Note>TaskRunner now resolves the specified task URI from
            inside the root context / place to ensure that all referenced
            resources are available when loading.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/task/TaskRunner.java
        </path>
        
      </scm:Change>

      <scm:Change>
        <revision>-dev118
        </revision>
      
        <notes>
          <scm:Note>Enhance the DateToString converter to provide control over
            the precision and rounding of the millisecond value for dates
            with coarser than millisecond precision- e.g. allow the millisecond
            value to round to the beginning or end of the day when a date
            does not have a time component.
          </scm:Note>
          <scm:Note>
            Provide a StringConverter for TimeField for specification of 
              values in declarative markup.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft
        </path>
        
        <resources>
          <URI>util/string/DateToString.java
          </URI>
          <URI>util/string/StringConverter.java
          </URI>
          <URI>util/string/TimeFieldToString.java
          </URI>
          <URI>time/TimeField.java
          </URI>
        </resources>
        
      </scm:Change>

      <scm:Change>
        <revision>-dev116
        </revision>
      
        <notes>
          <scm:Note>Add Type.getArrayType() and Type.getAggregateType() 
            methods for more concise metaprogramming.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/data/Type.java
        </path>
        
      </scm:Change>

      <scm:Change>
        <revision>-dev116
        </revision>
      
        <notes>
          <scm:Note>Improve the flat-file output utility to write headers,
            provide additional configurability, and optionally return the
            result as a byte[] if no output destination is selected.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/data/flatfile
        </path>
        
        <resources>
          <URI>DelimitedRecordFormat.java
          </URI>
          <URI>FieldMapping.java
          </URI>
          <URI>Output.java
          </URI>
          <URI>RecordFormat.java
          </URI>
          <URI>Writer.java
          </URI>
        </resources>
        
      </scm:Change>

      <scm:Change>
        <revision>-dev115
        </revision>
      
        <notes>
          <scm:Note>Provide access to contextual Type and Method meta-objects
            in method definitions to facilitate metaprogramming and generic
            methods.
          </scm:Note>
          <scm:Note>Method definitions now have a returnTypeX property to
            allow the method return type to be computed based on contextual
            metadata at resolution time.
          </scm:Note>
          <scm:Note>Enhance exception handling by including declaration info
            (source code location) in the exception stack for methods.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/data
        </path>
        
        <resources>
          <URI>DataException.java
          </URI>
          <URI>Type.java
          </URI>
        </resources>
        
      </scm:Change>

      <scm:Change>
        <revision>-dev115
        </revision>
      
        <notes>
          <scm:Note>Improve exception handling in the spiralcraft.task
            subsystem by added declaration info (source location) to the
            exception stack.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/task/TaskCommand.java
        </path>
        
      </scm:Change>

      <scm:Change>
        <revision>-dev114
        </revision>
      
        <notes>
          <scm:Note>New XmlFrame frame handler uses an expression to resolve
            or create the object that will "memoize" the frame. Useful when
            information in the frame doesn't correspond to a specific type or
            is denormalized.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/data/sax/XmlFrame.java
        </path>
        
      </scm:Change>
          
      <scm:Change>
        <revision>-dev114
        </revision>
      
        <notes>
          <scm:Note>XML parser configuration can use absolute URIs by prefixing
            URI with a colon.
          </scm:Note>
          <scm:Note>Added "afterClose" binding to allow any type of frame to
            perform an action after a frame closes.
          </scm:Note>

        </notes>
        
        <path>source/spiralcraft/data/sax/AbstractFrameHandler.java
        </path>
        
      </scm:Change>

      <scm:Change>
        <revision>-dev114
        </revision>
      
        <notes>
          <scm:Note>Use a type expression to determine type so XML parser
            can be configured from an assembly.
          </scm:Note>

        </notes>
        
        <path>source/spiralcraft/data/sax/TupleFrame.java
        </path>
        
      </scm:Change>

      <scm:Change>
        <revision>-dev114
        </revision>
      
        <notes>
          <scm:Note>Rename onSave to afterSave in Editor hierarchy to better
            indicate when the binding will fire.
          </scm:Note>

        </notes>
        
        <path>source/spiralcraft/data
        </path>
        
        <resources>
          <URI>editor/EditorBase.java
          </URI>
          <URI>editor/TupleEditor.java
          </URI>
          <URI>task/Edit.java
          </URI>
        </resources>
      </scm:Change>

      <scm:Change>
        <revision>-dev114
        </revision>
      
        <notes>
          <scm:Note>Remove hardcoded debug state for TransactionMethod
          </scm:Note>

        </notes>
        
        <path>source/spiralcraft/data/core/TransactionMethod.java
        </path>
      </scm:Change>

      <scm:Change>
        <revision>-dev114
        </revision>
      
        <notes>
          <scm:Note>Fix NPE when comparing a primitive type to a data-defined
            type via isAssignableFrom()
          </scm:Note>

        </notes>
        
        <path>source/spiralcraft/data/core/TypeImpl.java
        </path>
      </scm:Change>


      <scm:Change>
        <revision>-dev114
        </revision>
      
        <notes>
          <scm:Note>Add a row limit to flat file scan for testing or sampling
          </scm:Note>
          <scm:Note>Add 'afterParseRecord' binding to permit modification of
            data before finalizing
          </scm:Note>

        </notes>
        
        <path>source/spiralcraft/data/flatfile/Scan.java
        </path>
      </scm:Change>

      <scm:Change>
        <revision>-dev113
        </revision>
      
        <notes>
          <scm:Note>Support selectors for arrays of primitives
          </scm:Note>

        </notes>
        
        <path>source/spiralcraft/lang
        </path>
        
        <resources>
          <URL>reflect/ArrayReflector.java
          </URL>
          <URL>spi/PrimitiveArraySelectChannel.java
          </URL>
        </resources>
        
      </scm:Change>

      <scm:Change>
        <revision>-dev112
        </revision>
      
        <notes>
          <scm:Note>Enhancements to PathContext to import and export constant
            and dynamic references to support the contextualization of plugins
            for a given portion of the URL tree.
          </scm:Note>

        </notes>
        
        <path>source/spiralcraft/
        </path>
        
        <resources>
          <URL>app/PathContext.java
          </URL>
          <URL>lang/kit/ConstantChannel.java
          </URL>
        </resources>
        
      </scm:Change>

      <scm:Change>
        <revision>-dev111
        </revision>
      
        <notes>
          <scm:Note>StateMachine.restart() no longer skips state.onExit() and
            state.onEnter() when the initial state is the same as the current
            state before restart() was called.
          </scm:Note>

        </notes>
        
        <path>source/spiralcraft/fsm/StateMachine.java
        </path>
        
      </scm:Change>
          
      <scm:Change>
        <revision>-dev110
        </revision>
      
        <notes>
          <scm:Note>Fix issue where VFS Resource based classloader choked on
            resources containing invalid URL path characters.
          </scm:Note>

        </notes>
        
        <path>source/spiralcraft/classloader/ResourceArchive.java
        </path>
        
      </scm:Change>

      <scm:Change>
        <revision>-dev109
        </revision>
      
        <notes>
          <scm:Note>New feature- static data fields. For constant data
            associated with a data Type.
          </scm:Note>

        </notes>
        
        <path>source/spiralcraft/data
        </path>
        
        <resources>
          <URI>Field.java
          </URI>
          <URI>core/DeltaType.java
          </URI>
          <URI>core/FieldImpl.java
          </URI>
          <URI>sax/DataWriter.java
          </URI>
          <URI>session/BufferTuple.java
          </URI>
          <URI>spi/EditableArrayTuple.java
          </URI>
          <URI>xml/XmlQueryable.java
          </URI>
        </resources>


      </scm:Change>


      <scm:Change>
        <revision>-dev109
        </revision>
      
        <notes>
          <scm:Note>Add indexOf function to Array reflector
          </scm:Note>

        </notes>
        
        <path>source/spiralcraft/lang
        </path>
        
        <resources>
          <URI>reflect/ArrayReflector.java
          </URI>
          <URI>reflect/BeanReflector.java
          </URI>
          <URI>reflect/ArrayReverseIndexTranslator.java
          </URI>
        </resources>


      </scm:Change>

      <scm:Change>
        <revision>-dev108
        </revision>
      
        <notes>
          <scm:Note>Template SequenceFields in archetypes are now extended
            so the subtypes don't share a sequence id.
          </scm:Note>

        </notes>
        
        <path>source/spiralcraft/data/core
        </path>
        
        <resources>
          <URI>FieldImpl.java
          </URI>
          <URI>KeyImpl.java
          </URI>
          <URI>SchemeImpl.java
          </URI>
          <URI>SequenceField.java
          </URI>
        </resources>


      </scm:Change>

      <scm:Change>
        <revision>-dev107
        </revision>
      
        <notes>
          <scm:Note>Flow delegates state initialization to StateMachine
          </scm:Note>

        </notes>
        
        <path>source/spiralcraft
        </path>
        
        <resources>
          <URI>fsm/StateMachine.java
          </URI>
          <URI>app/components/Flow.java
          </URI>
        </resources>

      </scm:Change>

      <scm:Change>
        <revision>-dev107
        </revision>
      
        <notes>
          <scm:Note>Fix NPE when a Transition's next state is set to an
            invalid name.
          </scm:Note>

        </notes>
        
        <path>source/spiralcraft/fsm
        </path>
        
        <resources>
          <URI>StateMachine.java
          </URI>
          <URI>Transition.java
          </URI>
        </resources>

      </scm:Change>

      <scm:Change>
        <revision>-dev106
        </revision>
      
        <notes>
          <scm:Note>Fix NPE when State has no transitions
          </scm:Note>

        </notes>
        
        <path>source/spiralcraft/fsm/State.java
        </path>

      </scm:Change>

      <scm:Change>
        <revision>-dev105
        </revision>
      
        <notes>
          <scm:Note>Fix issue where the session instance of the Flow model
            was not in scope when accessed from the initializer, resulting
            in a ThreadLocalNotInitialized runtime exception.
          </scm:Note>

        </notes>
        
        <path>source/spiralcraft/app/components/Flow.java
        </path>

      </scm:Change>
      
      <scm:Change>
        <revision>-dev104
        </revision>
      
        <notes>
          <scm:Note>A GenericReflector can now be used to add additional
            members to underlying types.
          </scm:Note>

        </notes>
        
        <path>source/spiralcraft/lang/spi/GenericReflector.java
        </path>

      </scm:Change>

      <scm:Change>
        <revision>-dev104
        </revision>
      
        <notes>
          <scm:Note>A function definition can now have an empty formal
            argument list
          </scm:Note>

        </notes>
        
        <path>source/spiralcraft/lang/parser/FunctionNode.java
        </path>

      </scm:Change>

      <scm:Change>
        <revision>-dev104
        </revision>
      
        <notes>
          <scm:Note>The Edit task now accepts a Reflector as a constructor
          </scm:Note>

        </notes>
        
        <path>source/spiralcraft/data/task/Edit.java
        </path>

      </scm:Change>

      <scm:Change>
        <revision>-dev104
        </revision>
      
        <notes>
          <scm:Note>Infrastructure for generics / data type parameterization
          </scm:Note>

        </notes>
        
        <path>source/spiralcraft/data
        </path>
        
        <resources>
          <URI>Field.java
          </URI>
          <URI>Type.java
          </URI>
          <URI>TypeParameter.java
          </URI>
          <URI>core/AbstractAggregateType.java
          </URI>
          <URI>core/DataDefinedType.java
          </URI>
          <URI>core/DataDefinedType.java
          </URI>
          <URI>core/DeltaType.java
          </URI>
          <URI>core/FieldImpl.java
          </URI>
          <URI>core/MetaType.java
          </URI>
          <URI>core/RelativeField.java
          </URI>
          <URI>core/SchemeImpl.java
          </URI>
          <URI>core/TypeImpl.java
          </URI>
          <URI>core/TypeParameterField.java
          </URI>
          <URI>core/TypeParameterField.java
          </URI>
          <URI>lang/AggregateReflector.java
          </URI>
          <URI>reflect/ReflectionType.java
          </URI>
          <URI>session/BufferType.java
          </URI>
          <URI>spi/AbstractAggregateQueryable.java
          </URI>
          <URI>types/meta/TypeParameterType.java
          </URI>
          <URI>types/meta/TypeType.java
          </URI>
          <URI>xml/XmlTypeFactory.java
          </URI>
          
        </resources>

      </scm:Change>

      <scm:Change>
        <revision>-dev104
        </revision>
      
        <notes>
          <scm:Note>Fix issue where the session instance of the Flow model
            was not in scope when accessed from components inside the Flow,
            resulting in a different instance being created on every access.
          </scm:Note>

        </notes>
        
        <path>source/spiralcraft/app/components/Flow.java
        </path>

      </scm:Change>

      <scm:Change>
        <revision>-dev103
        </revision>
      
        <notes>
          <scm:Note>Allow spiralcraft.builder to replace an inherited collection
            instead of augmenting it via a new PropertySpecifier 
            "replaceCollection" attribute
          </scm:Note>

        </notes>
        
        <path>source/spiralcraft/builder
        </path>
        
        <resources>
          <URI>PropertySpecifier.java
          </URI>
          <URI>AssemblyLoader.java
          </URI>
        </resources>

      </scm:Change>

      <scm:Change>
        <revision>-dev102
        </revision>
      
        <notes>
          <scm:Note>Any constant expression reflecting a Reflector can be
            used to declare the type of a struct field. 
          </scm:Note>

        </notes>
        
        <path>source/spiralcraft/lang
        </path>
        
        <resources>
          <URI>BindException.java
          </URI>
          <URI>parser/ExpressionParser.java
          </URI>
          <URI>parser/Node.java
          </URI>
          <URI>parser/StructField.java
          </URI>
          <URI>parser/StructNode.java
          </URI>
        </resources>

      </scm:Change>

      <scm:Change>
        <revision>-dev101
        </revision>
      
        <notes>
          <scm:Note>Add an "afterStart" binding to PlaceContext so that
            various conditions can be checked and normalized on startup.
          </scm:Note>

        </notes>
        
        <path>source/spiralcraft/apps/PlaceContext.java
        </path>

      </scm:Change>

      <scm:Change>
        <revision>-dev100
        </revision>
      
        <notes>
          <scm:Note>Turn session debug off and make it track Method.debug
          </scm:Note>

        </notes>
        
        <path>source/spiralcraft/data/core/TransactionMethod.java
        </path>

      </scm:Change>

      <scm:Change>
        <revision>-dev99
        </revision>
      
        <notes>
          <scm:Note>Allow configuration of the initial state via
            expression binding supplied to the initialStateX property.
          </scm:Note>

        </notes>
        
        <path>source/spiralcraft/fsm/StateMachine.java
        </path>

      </scm:Change>
      
      <scm:Change>
        <revision>-dev99
        </revision>
      
        <notes>
          <scm:Note>Added a TransactionMethod meta type to simplify creating
            methods that modify data.
          </scm:Note>

        </notes>
        
        <path>source/spiralcraft
        </path>
        
        <resources>
          <URI>data/types/meta/TransactionMethodType.java
          </URI>    
          <URI>data/task/Session.java
          </URI>    
          <URI>data/TransactionMethod.java
          </URI>    
          <URI>data/AbstractTaskMethod.java
          </URI>    
          <URI>task/Chain.java
          </URI>    
          <URI>task/Scenario.java
          </URI>    
          <URI>command/AbstractCommandFactory.java
          </URI>    
        </resources>
        
      </scm:Change>

      <scm:Change>
        <revision>-dev98
        </revision>
      
        <notes>
          <scm:Note>the Case component can now be configured with solely an id
            and no constant expression.
          </scm:Note>
          <scm:Note>The Flow component "model" property is now optional.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/app/components
        </path>
        
        <resources>
          <URI>Case.java
          </URI>    
          <URI>Flow.java
          </URI>    
        </resources>
        
      </scm:Change>
          
      <scm:Change>
        <revision>-dev98
        </revision>
      
        <notes>
          <scm:Note>Fix npe in StateMachine when afterTransition binding is
            null
          </scm:Note>
          <scm:Note>Transitions with no next state cycle back to the
            current state.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft
        </path>
        
        <resources>
          <URI>fsm/StateMachine.java
          </URI>    
          <URI>fsm/Transition.java
          </URI>    
        </resources>
        
      </scm:Change>

      <scm:Change>
        <revision>-dev97
        </revision>
      
        <notes>
          <scm:Note>Added a Flow component and a fsm (finite state machine)
            package
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft
        </path>
        
        <resources>
          <URI>app/components/Flow.java
          </URI>    
          <URI>fsm/StateMachine.java
          </URI>    
          <URI>fsm/Transition.java
          </URI>    
          <URI>fsm/State.java
          </URI>    
        </resources>
        
      </scm:Change>

      <scm:Change>
        <revision>-dev97
        </revision>
      
        <notes>
          <scm:Note>Completed the Switch component, fixed dispatch issue in
            FrameHandler
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/app
        </path>
        
        <resources>
          <URI>components/Switch.java
          </URI>    
          <URI>kit/FrameHandler.java
          </URI>    
          
        </resources>
        
      </scm:Change>
        
      <scm:Change>
        <revision>-dev96
        </revision>
      
        <notes>
          <scm:Note>MessageFormat can reference other constant MessageFormats
            to facilitate composeability in messages.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/text/MessageFormat.java
        </path>
        
      </scm:Change>

      <scm:Change>
        <revision>-dev95
        </revision>
      
        <notes>
          <scm:Note>Arithmetic operations involving null always return null
            at the language level. Whether null is treated as zero or not in
            an arithmetic operation 
            must be decided at a higher level. This may break existing
            computations that may have taken advantage of the 
            previous null-treated-as-zero behavior.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/lang/parser/BinaryOpNode.java
        </path>
        
      </scm:Change>

      <scm:Change>
        <revision>-dev95
        </revision>
      
        <notes>
          <scm:Note>Partial work towards preserving declaration context info
            for data method definitions.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/
        </path>
        
        <resources>
          <URI>data/core/MethodImpl.java
          </URI>
          <URI>data/core/TaskMethod.java
          </URI>
          <URI>lang/BindException.java
          </URI>
        </resources>
        
      </scm:Change>

      <scm:Change>
        <revision>-dev95
        </revision>
      
        <notes>
          <scm:Note>Enhancements to give management tools better access to
            data storage internals.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/data/
        </path>
        
        <resources>
          <URI>Space.java
          </URI>
          <URI>access/Schema.java
          </URI>
          <URI>task/Fetch.java
          </URI>
        </resources>
        
      </scm:Change>

      <scm:Change>
        <revision>-dev94
        </revision>
      
        <notes>
          <scm:Note>Fix issue where the Object DataReflector was not assignable
            from beans due to Object being a special case.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/data/lang/DataReflector.java
        </path>
        
      </scm:Change>

      <scm:Change>
        <revision>-dev94
        </revision>
      
        <notes>
          <scm:Note>Simplified the calling of functors with positional
            parameters by mapping the positional parameters to fields of the
            parameter context in order.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/lang
        </path>
        
        <resources>
          <URI>parser/StructField.java
          </URI>
          <URI>spi/AbstractFunctorChannel.java
          </URI>
        </resources>
      </scm:Change>

      <scm:Change>
        <revision>-dev93
        </revision>
      
        <notes>
          <scm:Note>Fix collision with new Java 8 Map.remove(K,V) method
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft
        </path>
        
        <resources>
          <URI>util/ListMap.java
          </URI>
          <URI>util/MultiMap.java
          </URI>
          <URI>util/AutoListMap.java
          </URI>
          <URI>ui/PreferenceTree.java
          </URI>
        </resources>
      </scm:Change>

      <scm:Change>
        <revision>-dev93
        </revision>
      
        <notes>
          <scm:Note>Return null instead of throwing an NPE when reading 
            a field of a null bean.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/lang/reflect/BeanFieldTranslator.java
        </path>
      </scm:Change>

      <scm:Change>
        <revision>-dev92
        </revision>
      
        <notes>
          <scm:Note>Add specific functionality for handling HTTP based 
            vfs URLResources in order to capture the HTTP response code.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/vfs/url
        </path>
        
        <resources>
          <URI>HttpURLMessage.java
          </URI>
          <URI>HttpURLResource.java
          </URI>
          <URI>URLResource.java
          </URI>
        </resources>
      </scm:Change>

      <scm:Change>
        <revision>-dev92
        </revision>
      
        <notes>
          <scm:Note>Fix bug where method channels were not marked read-only,
            causing side effects when used with write-back operations.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft
        </path>
        
        <resources>
          <URI>data/core/AbstractTaskMethod.java
          </URI>
          <URI>data/session/BufferChannel.java
          </URI>
          <URI>lang/spi/AbstractChannel.java
          </URI>
        </resources>
      </scm:Change>

      <scm:Change>
        <revision>-dev91
        </revision>
      
        <notes>
          <scm:Note>Add a description field to method definitions.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/data
        </path>
        
        <resources>
          <URI>Method.java
          </URI>
          <URI>core/MethodImpl.java
          </URI>
        </resources>
      </scm:Change>

      <scm:Change>
        <revision>-dev91
        </revision>
      
        <notes>
          <scm:Note>Make sure that URI paths are properly encoded and decoded
            when converting between URIs and JAR file paths.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft
        </path>
        
        <resources>
          <URI>util/URIUtil.java
          </URI>
          <URI>vfs/jar/JarFileResource.java
          </URI>
        </resources>
      </scm:Change>

      <scm:Change>
        <revision>-dev90
        </revision>
      
        <notes>
          <scm:Note>Make CoercionChannel bidirectional
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/lang/kit/CoercionChannel.java
        </path>
      </scm:Change>

      <scm:Change>
        <revision>-dev90
        </revision>
      
        <notes>
          <scm:Note>Fix NPE when reverting empty BufferAggregate
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/data/session/BufferAggregate.java
        </path>
      </scm:Change>
      
      <scm:Change>
        <revision>-dev89
        </revision>
      
        <notes>
          <scm:Note>Reflectors now comprehend immutability, primarily to 
            support the computation of constants at bind-time. A function
            of immutable constants is guaranteed to be constant.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft
        </path>
        
        <resources>
          <URI>lang/Reflector.java
          </URI>
          <URI>lang/kit/AbstractReflector.java
          </URI>
          <URI>lang/parser/EqualityNode.java
          </URI>
          <URI>lang/parser/StructNode.java
          </URI>
          <URI>lang/reflect/ArrayReflector.java
          </URI>
          <URI>lang/reflect/BeanReflector.java
          </URI>
          <URI>lang/reflect/IterableReflector.java
          </URI>
          <URI>lang/spi/GenericReflector.java
          </URI>
          <URI>lang/spi/NamespaceReflector.java
          </URI>
          <URI>lang/spi/VoidReflector.java
          </URI>
        </resources>
      </scm:Change>

      <scm:Change>
        <revision>-dev88
        </revision>
      
        <notes>
          <scm:Note>Added logging to assist in debugging the binding process
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft
        </path>
        
        <resources>
          <URI>app/components/Trace.java
          </URI>
          <URI>task/Scenario.java
          </URI>
        </resources>
      </scm:Change>

      <scm:Change>
        <revision>-dev87
        </revision>
      
        <notes>
          <scm:Note>Add config property "inherit" to Session task to allow
            nested Session tasks to use a common DataSession
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/data/task/Session.java
        </path>
        
        <resources>
          <URI>session/BufferTuple.java
          </URI>
          <URI>data/UpdateConflictException.java
          </URI>
        </resources>
      </scm:Change>

      <scm:Change>
        <revision>-dev87
        </revision>
      
        <notes>
          <scm:Note>Fix erroneous UpdateConflictException due to non-specific
            BufferTuple.equals() implementation.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/data
        </path>
        
        <resources>
          <URI>session/BufferTuple.java
          </URI>
          <URI>data/UpdateConflictException.java
          </URI>
        </resources>
      </scm:Change>

      <scm:Change>
        <revision>-dev86
        </revision>
      
        <notes>
          <scm:Note>BufferAggregate.revert() now reverts all the Buffers it
            contains
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/data/session/BufferAggregate.java
        </path>
      </scm:Change>
      
      
      <scm:Change>
        <revision>-dev85
        </revision>
      
        <notes>
          <scm:Note>Add a Sequence function to generate sequences of values
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/lang/functions/Sequence
        </path>
      </scm:Change>

      <scm:Change>
        <revision>-dev84
        </revision>
      
        <notes>
          <scm:Note>Add functionality to the spiralcraft.time library to
            compute the start of standard calendar periods.
          </scm:Note>
       </notes>
        
        <path>source/spiralcraft/time
        </path>
        
        <resources>
          <URI>Calendar.java
          </URI>
          <URI>Chronology.java
          </URI>
          <URI>Chronom.java
          </URI>
          <URI>DayOfWeek.java
          </URI>
          <URI>TimeField.java
          </URI>
        </resources>
      </scm:Change>

      <scm:Change>
        <revision>-dev83
        </revision>
      
        <notes>
          <scm:Note>Provide a convenience method to obtain a reference to
            the base resource corresponding to an overlay resource
          </scm:Note>
       </notes>
        
        <path>source/spiralcraft/vfs/Package.java
        </path>
      </scm:Change>

      <scm:Change>
        <revision>-dev83
        </revision>
      
        <notes>
          <scm:Note>Combine child containers that exist in both the 
            base and the overlay 
          </scm:Note>
       </notes>
        
        <path>source/spiralcraft/vfs/ovl/OverlayResource.java
        </path>
      </scm:Change>

      <scm:Change>
        <revision>-dev82
        </revision>
      
        <notes>
          <scm:Note>Support the use of candidateKeys in StoredCopy function.
          </scm:Note>
          <scm:Note>Make sure that local key definitions in override/hide 
            keys defined in archetypes.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/data/
        </path>
        <resources>
          <URI>util/StoredCopy.java
          </URI>
          <URI>Type.java
          </URI>
        </resources>
      </scm:Change>

      <scm:Change>
        <revision>-dev81
        </revision>
      
        <notes>
          <scm:Note>Fix logic error in evaluation of `!value` when value is null
            which should always return true, because null is coerced to false
            when binary logic is used.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/lang/parser/LogicalNegateNode.java
        </path>
        
      </scm:Change>

      <scm:Change>
        <revision>-dev80
        </revision>
      
        <notes>
          <scm:Note>Fix silent failure in an object literal constructor when
            an expression is assigned to a property of
            type spiralcraft.lang.Binding.
          </scm:Note>
          <scm:Note>Fix issue when using object literals in expressions
            where a constructor assigning an expression literal to a target
            of type spiralcraft.lang.Binding failed silently due to ambiguous
            design contract. Expression literals are now coerced to Binding
            objects and a warning is logged when a type mismatch for a 
            target of type Binding results in a "dynamic" Binding being
            created directly from the source channel (injecting a scaffolding
            construct into the binding process.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/lang/spi/BindingChannel.java
        </path>
        
      </scm:Change>

      <scm:Change>
        <revision>-dev80
        </revision>
      
        <notes>
          <scm:Note>A new Trigger accumulator function performs an action
            whenever the source value changes.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/lang/functions/Trigger.java
        </path>
        
      </scm:Change>

      <scm:Change>
        <revision>-dev80
        </revision>
      
        <notes>
          <scm:Note>The Edit task will create its own DataSession if one is
            not in scope instead of throwing an exception.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/data/task/Edit.java
        </path>
        
      </scm:Change>

      <scm:Change>
        <revision>-dev79
        </revision>
      
        <notes>
          <scm:Note>Added BatchQueueService to simplify batch data processing
            functions such as delayed-write logs.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/data
        </path>
        
        <resources>
          <URI>kit/AbstractBatchService.java
          </URI>
          <URI>util/BatchQueueService.java
          </URI>
        </resources>
      </scm:Change>

      <scm:Change>
        <revision>-dev78
        </revision>
      
        <notes>
          <scm:Note>Refactor references to ArrayJournalTuple to reference
            the JournalTuple interface instead.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/data/access/cache
        </path>
        
        <resources>
          <URI>CacheBranch.java
          </URI>
          <URI>CacheIndex.java
          </URI>
          <URI>EntityCache.java
          </URI>
          <URI>IndexBranch.java
          </URI>
          <URI>IndexBranchEntry.java
          </URI>
          <URI>IndexEntry.java
          </URI>
          <URI>PrimarySet.java
          </URI>
        </resources>

      </scm:Change>

      <scm:Change>
        <revision>-dev78
        </revision>
      
        <notes>
          <scm:Note>Make sure that multiple updates to the same data create
            a correct journal.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/data
        </path>
        
        <resources>
        
          <URI>DeltaTuple.java
          </URI>
          <URI>session/BufferTuple.java
          </URI>
          <URI>spi/ArrayDeltaTuple.java
          </URI>
          <URI>spi/ArrayJournalTuple.java
          </URI>
          <URI>xml/XmlBranch.java
          </URI>
        </resources>

      </scm:Change>

      <scm:Change>
        <revision>-dev78
        </revision>
      
        <notes>
          <scm:Note>Fix issue when a buffer is saved more than once in the same
            transaction resulting in an initial insert and an update that
            fails due to the original not being globally visible.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/data/session/DataSession.java
        </path>

      </scm:Change>

      <scm:Change>
        <revision>-dev77
        </revision>
      
        <notes>
          <scm:Note>Queries against the XmlStore now consider uncommitted
            data in the current transaction.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/data
        </path>
        
        <resources>
          <URI>session/BufferTuple.java
          </URI>
          <URI>session/DataSession.java
          </URI>
          <URI>session/DataSessionBranch.java
          </URI>
          <URI>xml/XmlBranch.java
          </URI>
        </resources>

      </scm:Change>

      <scm:Change>
        <revision>-dev76
        </revision>
      
        <notes>
          <scm:Note>Add a guardX property to PathContext to control access to
            the path subtree.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/app/PathContext.java
        </path>

      </scm:Change>

      <scm:Change>
        <revision>-dev76
        </revision>
      
        <notes>
          <scm:Note>Fix issue where a method defined in a base type would not
            be found when resolved against the subtype.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/data/lang/TupleReflector.java
        </path>

      </scm:Change>

      <scm:Change>
        <revision>-dev75
        </revision>
      
        <notes>
          <scm:Note>Fix issue where methods and fields on a session data object
            would bind to the wrong DataSession, causing a ThreadLocal not
            initialized error.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft
        </path>
        
        <resouces>
          <URI>data/Space.java
          </URI>
          <URI>data/session/BufferChannel.java
          </URI>
          <URI>data/session/DataSessionFocus.java
          </URI>
          <URI>lang/spi/AbstractChannel.java
          </URI>
        </resouces>
        
      </scm:Change>

      <scm:Change>
        <revision>-dev74
        </revision>
      
        <notes>
          <scm:Note>Add a "Repeat" inline function to repeat evaluation of 
            input until a certain condition is reached.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/lang/functions/Repeat.java
        </path>
        
      </scm:Change>

      <scm:Change>
        <revision>-dev74
        </revision>
      
        <notes>
          <scm:Note>Fix issue where writing to functor result channel caused
            a hard exception and not a soft failure. 
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/command/CommandFunctorChannel.java
        </path>
        
        
      </scm:Change>

      <scm:Change>
        <revision>-dev73
        </revision>
      
        <notes>
          <scm:Note>Traceability enhancements to track down ThreadLocal not
            initialized issues (when expressions are bound to a context that
            is not in scope when the expression is evaluated)
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft
        </path>
        
        <resources>
          <URI>data/core/CalculatedFieldImpl.java
          </URI>
          <URI>data/core/FieldImpl.java
          </URI>
          <URI>data/core/RelativeField.java
          </URI>
          <URI>lang/spi/AbstractChannel.java
          </URI>
          <URI>lang/spi/ClosureFocus.java
          </URI>
          <URI>task/Eval.java
          </URI>
        </resources>
        
      </scm:Change>

      <scm:Change>
        <revision>-dev73
        </revision>
      
        <notes>
          <scm:Note>Fix issue where multiple updates to the same entity in
            a transaction caused issues holding locks on intermediate copies
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/data
        </path>
        
        <resources>
          <URI>access/cache/CacheBranch.java
          </URI>
          <URI>data/spi/ArrayJournalTuple.java
          </URI>
        </resources>
      </scm:Change>

      <scm:Change>
        <revision>-dev72
        </revision>
      
        <notes>
          <scm:Note>Reduce duplicate string references from MessageFormat by
            pooling the template string.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/text/MessageFormat.java
        </path>
        
      </scm:Change>

      <scm:Change>
        <revision>-dev72
        </revision>
      
        <notes>
          <scm:Note>Reduce memory consumption of ThreadLocalChannel by omitting
            the snapshot of the initialization stack trace unless a system
            property "spiralcraft.lang.spi.ThreadLocalChannel.retainInitTrace"
            is set.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/lang/spi/ThreadLocalChannel.java
        </path>
        
      </scm:Change>

      <scm:Change>
        <revision>-dev71
        </revision>
      
        <notes>
          <scm:Note>All Chain task subtypes now accept an optional resultX 
            expression to return a specific value from the task.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/task
        </path>
        
        <resources>
          <URI>Chain.java
          </URI>
          <URI>Scenario.java
          </URI>
        </resources>
        
      </scm:Change>

      <scm:Change>
        <revision>-dev70
        </revision>
      
        <notes>
          <scm:Note>Fix error in StringUtil.prepad() function which added
            character values instead of appending them
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/util/string/StringUtil.java
        </path>
        
      </scm:Change>

      <scm:Change>
        <revision>-dev69
        </revision>
      
        <notes>
          <scm:Note>New function and new ArrayUtil.reverse method to support
            collection reversal from spiralcraft.lang code in a monadic fashion.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft
        </path>
        
        <resources>
          <URI>lang/functions/Reverse.java
          </URI>
          <URI>util/ArrayUtil.java
          </URI>
        </resources>
        
      </scm:Change>
    
      <scm:Change>
        <revision>-dev68
        </revision>
      
        <notes>
          <scm:Note>Filter the results of another cursor using a pre-bound
            filter.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft
        </path>
        
        <resources>
          <URI>lang/util/ContextualFilter.java
          </URI>
          <URI>data/access/kit/FilteringSerialCursor.java
          </URI>
        </resources>
        
      </scm:Change>

      <scm:Change>
        <revision>-dev68
        </revision>
      
        <notes>
          <scm:Note>Make sure that spiralcraft.data method signatures are
            matched to calls that pass null as a parameter.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/data/lang/TupleReflector.java
        </path>
        
      </scm:Change>

      <scm:Change>
        <revision>-dev68
        </revision>
      
        <notes>
          <scm:Note>Make sure that spiralcraft.data method signatures are
            matched to calls that pass null as a parameter.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/data/lang/TupleReflector.java
        </path>
        
      </scm:Change>

      <scm:Change>
        <revision>-dev67
        </revision>
      
        <notes>
          <scm:Note>Fetch task queries the nearest Space unless a specific
            Queryable is supplied, fixing an issue where it mistakenly
            queried the specific, possibly wrong Store in context 
            when binding a field default expression.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/data/task/Fetch.java
        </path>
        
      </scm:Change>

      <scm:Change>
        <revision>-dev66
        </revision>
      
        <notes>
          <scm:Note>Fix issue where last record in stream with no record
            terminator before EOF is not processed
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft
        </path>
        
        <resources>
          <URI>data/flatfile/RecordCursor.java
          </URI>
          <URI>io/record/InputStreamRecordIterator.java
          </URI>
        </resources>
        
      </scm:Change>

      <scm:Change>
        <revision>-dev65
        </revision>
      
        <notes>
          <scm:Note>Minor refactoring in the task package to support branching
            tasks.
          </scm:Note>
          <scm:Note>Made "If" task a branching task with "then" and "else"
            children.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/task
        </path>
        
        <resources>
          <URI>Branch.java
          </URI>
          <URI>Chain.java
          </URI>
          <URI>If.java
          </URI>
          <URI>Scenario.java
          </URI>
          <URI>Sequence.java
          </URI>
          <URI>TaskRunner.java
          </URI>
        </resources>
        
      </scm:Change>

      <scm:Change>
        <revision>-dev64
        </revision>
      
        <notes>
          <scm:Note>Fix NPE when deleted delta tuple has no original- write
            warning to log in this case
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/data/access
        </path>
        
        <resources>
          <URI>CacheBranch.java
          </URI>
          <URI>EntityCache.java
          </URI>
          <URI>SerialCacheCursor.java
          </URI>
          <URI>kit/SerialCursorAdapter.java
          </URI>
        </resources>
        
      </scm:Change>

      <scm:Change>
        <revision>-dev63
        </revision>
      
        <notes>
          <scm:Note>Facility to wrap a source cursor to interact with
            the cache and provide canonical tuple instances.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/data/access
        </path>
        
        <resources>
          <URI>CacheBranch.java
          </URI>
          <URI>EntityCache.java
          </URI>
          <URI>SerialCacheCursor.java
          </URI>
          <URI>kit/SerialCursorAdapter.java
          </URI>
        </resources>
        
      </scm:Change>

      <scm:Change>
        <revision>-dev62
        </revision>
      
        <notes>
          <scm:Note>Re-fix concatenation operator after regressing in dev61
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/lang/parser/BinaryOpNode.java
        </path>
        
      </scm:Change>

      <scm:Change>
        <revision>-dev61
        </revision>
      
        <notes>
          <scm:Note>Fixed issue where concatenation operator was very 
            inefficient when operands were arrays.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/lang/parser/BinaryOpNode.java
        </path>
        
      </scm:Change>

      <scm:Change>
        <revision>-dev60
        </revision>
      
        <notes>
          <scm:Note>When child tasks to a Chain and the list of tasks consists
            of a single task, the Chain will
            support returning the results of the child task and no intermediate
            Sequence task will be used. 
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/task/Chain.java
        </path>
        
      </scm:Change>

      <scm:Change>
        <revision>-dev60
        </revision>
      
        <notes>
          <scm:Note>When looking up a bean-based type, follow indirection through
            VFS package links when the "bundle" scheme is used (in addition
            to the already supported "context" scheme).
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/lang/reflect/BeanTypeModel.java
        </path>
        
      </scm:Change>

      <scm:Change>
        <revision>-dev60
        </revision>
      
        <notes>
          <scm:Note>Fix issue where nested PlaceContext obscured the data
          Space for the parent PlaceContext
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/app/PlaceContext.java
        </path>
        
      </scm:Change>

      <scm:Change>
        <revision>-dev59
        </revision>
      
        <notes>
          <scm:Note>Fix regression caused by inheritance of archetype keys-
            primary key and tuple id were improperly specialized for delta
            and buffer types.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/data
        </path>
        
        <resources>
          <URI>core/DeltaType.java
          </URI>
          <URI>session/BufferTuple.java
          </URI>
          <URI>session/BufferType.java
          </URI>
        </resources>
      </scm:Change>

      <scm:Change>
        <revision>-dev59
        </revision>
      
        <notes>
          <scm:Note>Refactor XML store to add support for querying uncommitted 
            results in the current transaction, specifically deletes.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/data/xml
        </path>
        
        <resources>
          <URI>BoundIndexScan.java
          </URI>
          <URI>BoundScan.java
          </URI>
          <URI>XmlBranch.java
          </URI>
          <URI>XmlQueryable.java
          </URI>
          <URI>XmlResourceManager.java
          </URI>
          <URI>XmlStore.java
          </URI>
        </resources>
      </scm:Change>

      <scm:Change>
        <revision>-dev58
        </revision>
      
        <notes>
          <scm:Note>Markup attribute name-value pairs use the StringPool
            to save memory.
          </scm:Note>

        </notes>
        
        <path>source/spiralcraft/text/xml/AttributeReader.java
        </path>
      </scm:Change>

      <scm:Change>
        <revision>-dev58
        </revision>
      
        <notes>
          <scm:Note>Textual representation of an expression uses the StringPool
            to save memory.
          </scm:Note>

        </notes>
        
        <path>source/spiralcraft/lang/Expression.java
        </path>
      </scm:Change>

      <scm:Change>
        <revision>-dev58
        </revision>
      
        <notes>
          <scm:Note>Context resources get matched using raw URI paths to
            prevent excessive and premature path decoding.
          </scm:Note>

        </notes>
        
        <path>source/spiralcraft/vfs/context
        </path>

        <resources>
          <URI>Authority.java
          </URI>
          <URI>ContextResourceMap.java
          </URI>
        </resources>
      </scm:Change>

      <scm:Change>
        <revision>-dev58
        </revision>
      
        <notes>
          <scm:Note>Fix NPE when finding children of an overlay resource
            and either the base or the overlay root is null
          </scm:Note>

        </notes>
        
        <path>source/spiralcraft/vfs/ovl/OverlayResource.java
        </path>

      </scm:Change>

      <scm:Change>
        <revision>-dev58
        </revision>
      
        <notes>
          <scm:Note>Make BooleanToString a public class and allow the
            textual representation of true,false and null to be configured.
          </scm:Note>

        </notes>
        
        <path>source/spiralcraft/util/string
        </path>
        
        <resources>
          <URI>BooleanToString.java
          </URI>
          <URI>StringConverter.java
          </URI>
        </resources>

      </scm:Change>


      <scm:Change>
        <revision>-dev58
        </revision>
      
        <notes>
          <scm:Note>TaskCommand now catches and registers runtime exceptions
          </scm:Note>

        </notes>
        
        <path>source/spiralcraft/task/TaskCommand.java
        </path>

      </scm:Change>

      <scm:Change>
        <revision>-dev58
        </revision>
      
        <notes>
          <scm:Note>New utility function associates a Tuple from an external
            source to an internal copy, and will create or update the internal
            copy when assigned a value.
          </scm:Note>

        </notes>
        
        <path>source/spiralcraft/data/util/StoredCopy.java
        </path>

      </scm:Change>

      <scm:Change>
        <revision>-dev58
        </revision>
      
        <notes>
          <scm:Note>Configurability enhancements to flatfile reader
          </scm:Note>
          <scm:Note>Skip n lines in header
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/data/flatfile
        </path>
        
        <resources>
          <URI>DelimitedRecordFormat.java
          </URI>
          <URI>FieldMapping.java
          </URI>
          <URI>Scan.java
          </URI>
          <URI>TabDelimitedRecordFormat.assy.xml
          </URI>
        </resources>
      </scm:Change>

      <scm:Change>
        <revision>-dev58
        </revision>
      
        <notes>
          <scm:Note>Editor.save() is public to allow for finer control
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/data
        </path>
        
        <resources>
          <URI>editor/AggregateEditor.java
          </URI>
          <URI>editor/EditorBase.java
          </URI>
          <URI>task/Edit.java
          </URI>
        </resources>
      </scm:Change>

      <scm:Change>
        <revision>-dev58
        </revision>
      
        <notes>
          <scm:Note>Inherit key definitions from archetypes
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/data/core
        </path>
        
        <resources>
          <URI>DeltaType.java
          </URI>
          <URI>KeyImpl.java
          </URI>
          <URI>SchemeImpl.java
          </URI>
        </resources>
      </scm:Change>

      <scm:Change>
        <revision>-dev58
        </revision>
      
        <notes>
          <scm:Note>Throw an exception in Store.query when a query cannot be 
            solved
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/data/access/kit/AbstractStore.java
        </path>
        
      </scm:Change>

      <scm:Change>
        <revision>-dev58
        </revision>
      
        <notes>
          <scm:Note>Suppress log messages
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/data/access/cache
        </path>
        
        <resources>
          <URI>CacheBranch.java
          </URI>
          <URI>EntityCache.java
          </URI>
          <URI>IndexBranch.java
          </URI>
        </resources>
        
      </scm:Change>

      <scm:Change>
        <revision>-dev57
        </revision>
      
        <notes>
          <scm:Note>Support programmatic override of field definitions in
            structs when defined programmatically.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/lang/parser/StructNode.java
        </path>
        
      </scm:Change>

      <scm:Change>
        <revision>-dev57
        </revision>
      
        <notes>
          <scm:Note>Provide access to enum constants using [@type].@name syntax
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/lang
        </path>
        
        <resources>
          <URI>Reflector.java
          </URI>
          <URI>kit/AbstractReflector.java
          </URI>
          <URI>reflect/BeanReflector.java
          </URI>
        </resources>
        
      </scm:Change>

      <scm:Change>
        <revision>-dev57
        </revision>
      
        <notes>
          <scm:Note>Added Sequence.resultX property to return a value
            on completion.
          </scm:Note>
          <scm:Note>Added Sequence.sequence property to specify contained
            tasks.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/task
        </path>
        
        <resources>
          <URI>Sequence.java
          </URI>
          <URI>Chain.java
          </URI>
        </resources>
        
      </scm:Change>

      <scm:Change>
        <revision>-dev57
        </revision>
      
        <notes>
          <scm:Note>new Log task to simplify logging messages
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/task/Log.java
        </path>
        
      </scm:Change>

      <scm:Change>
        <revision>-dev57
        </revision>
      
        <notes>
          <scm:Note>New Session.isolate property to specify that the 
            session should create a new isolated transaction.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/data/task/Session.java
        </path>
        
      </scm:Change>

      <scm:Change>
        <revision>-dev57
        </revision>
      
        <notes>
          <scm:Note>Fix premature decoding of URIs when using the "context"
            VFS scheme.
          </scm:Note>
          <scm:Note>If the FileResource URI has a query component, construct
            the File pathname using the decoded path + '?' + decoded query.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/vfs
        </path>
        
        <resources>
          <URI>context/ContextResourceMap.java
          </URI>
          <URI>file/FileResource.java
          </URI>
        </resources>
      </scm:Change>

      <scm:Change>
        <revision>-dev57
        </revision>
      
        <notes>
          <scm:Note>Added PathContext.publishContent property to ensure
            that resolveContent only works when explicitly permitted
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/app/PathContext.java
        </path>
      </scm:Change>

      <scm:Change>
        <revision>-dev57
        </revision>
      
        <notes>
          <scm:Note>Added PathContext.publishContent property to ensure
            that resolveContent only works when explicitly permitted
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/app/PathContext.java
        </path>
      </scm:Change>

      <scm:Change>
        <revision>-dev57
        </revision>
      
        <notes>
          <scm:Note>Added VFS Scan task for directory traversal based
            operations
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/vfs/task/Scan.java
        </path>
      </scm:Change>

      <scm:Change>
        <revision>-dev57
        </revision>
      
        <notes>
          <scm:Note>Added Field.derived property so storage engines know to
            store non-transient derived fields on every update
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/data
        </path>
        
        <resources>
          <URI>Field.java
          </URI>
          <URI>core/FieldImpl.java
          </URI>
          <URI>core/CalculatedField.java
          </URI>
          <URI>core/QueryField.java
          </URI>
          <URI>core/CursorField.java
          </URI>
        </resources>
      </scm:Change>

      <scm:Change>
        <revision>-dev56
        </revision>
      
        <notes>
          <scm:Note>Memory optimizations- pool URLs and return constant
            values for common BigInteger and BigDecimal objects.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft
        </path>
        
        <resources>
          <URI>beans/BeanInfoCache.java
          </URI>
          <URI>builder/AssemblyLoader.java
          </URI>
          <URI>bundle/Bundle.java
          </URI>
          <URI>bundle/BundleClassLoader.java
          </URI>
          <URI>common/namespace/QName.java
          </URI>
          <URI>data/Space.java
          </URI>
          <URI>data/Type.java
          </URI>
          <URI>data/TypeResolver.java
          </URI>
          <URI>data/access/Snapshot.java
          </URI>
          <URI>data/access/Updater.java
          </URI>
          <URI>data/access/kit/AbstractStore.java
          </URI>
          <URI>data/builder/BuilderType.java
          </URI>
          <URI>data/builder/BuilderTypeFactory.java
          </URI>
          <URI>data/core/AbstractAggregateType.java
          </URI>
          <URI>data/core/FieldImpl.java
          </URI>
          <URI>data/core/FieldSetType.java
          </URI>
          <URI>data/core/MetaType.java
          </URI>
          <URI>data/core/MethodImpl.java
          </URI>
          <URI>data/core/TaskMethod.java
          </URI>
          <URI>data/core/TypeImpl.java
          </URI>
          <URI>data/flatfile/Parser.java
          </URI>
          <URI>data/lang/DataTypeMpdel.java
          </URI>
          <URI>data/query/Queryable.java
          </URI>
          <URI>data/reflect/ReflectionType.java
          </URI>
          <URI>data/sax/DataHandlerBase.java
          </URI>
          <URI>data/sax/DataWriter.java
          </URI>
          <URI>data/sax/PrefixMapping.java
          </URI>
          <URI>data/session/Buffer.java
          </URI>
          <URI>data/session/BufferType.java
          </URI>
          <URI>data/session/DataSession.java
          </URI>
          <URI>data/types/meta/MetadataType.java
          </URI>
          <URI>data/types/meta/TypeType.java
          </URI>
          <URI>data/types/standard/AnyType.java
          </URI>
          <URI>data/types/standard/BLOBType.java
          </URI>
          <URI>data/types/standard/URIType.java
          </URI>
          <URI>data/xml/XmlQueryable.java
          </URI>
          <URI>data/xml/XmlStore.java
          </URI>
          <URI>data/xml/XmlTypeFactory.java
          </URI>
          <URI>exec/Executor.java
          </URI>
          <URI>lang/Expression.java
          </URI>
          <URI>lang/kit/members/MetaCastMember.java
          </URI>
          <URI>lang/kit/members/MetaTuneMember.java
          </URI>
          <URI>lang/parser/AbsoluteFocusNode.java
          </URI>
          <URI>lang/parser/BinaryOpNode.java
          </URI>
          <URI>lang/parser/ChannelMetaNode.java
          </URI>
          <URI>lang/parser/Node.java
          </URI>
          <URI>lang/parser/ObjectLiteralNode.java
          </URI>
          <URI>lang/parser/StructNode.java
          </URI>
          <URI>lang/parser/TypeFocusNode.java
          </URI>
          <URI>sax/ParseTree.java
          </URI>
          <URI>security/auth/AuthSession.java
          </URI>
          <URI>security/spi/DataAuthenticator.java
          </URI>
          <URI>security/spi/DataAuthModule.java
          </URI>
          <URI>task/TaskRunner.java
          </URI>
          <URI>test/TestGroup.hava
          </URI>
          <URI>text/ParsePosition.java
          </URI>
          <URI>ui/MetadataType.java
          </URI>
          <URI>util/Path.java
          </URI>
          <URI>util/ReferencePool.java
          </URI>
          <URI>util/URIResolvePool.java
          </URI>
          <URI>util/URIUtil.java
          </URI>
          <URI>util/refpool/ReferencePool.java
          </URI>
          <URI>util/refpool/URIPool.java
          </URI>
          <URI>util/string/StringConverter.java
          </URI>
          <URI>vfs/Package.java
          </URI>
          <URI>vfs/Resolver.java
          </URI>
          <URI>vfs/ResourceUtil.java
          </URI>
          <URI>vfs/batch/PrependOperation.java
          </URI>
          <URI>vfs/batch/Search.java
          </URI>
          <URI>vfs/classpath/ClasspathResource.java
          </URI>
          <URI>vfs/context/Authority.java
          </URI>
          <URI>vfs/context/ContextResourceMap.java
          </URI>
          <URI>vfs/context/Mirror.java
          </URI>
          <URI>vfs/file/FileResource.java
          </URI>
          <URI>vfs/jar/JarFileResource.java
          </URI>
          <URI>vfs/url/URLResource.java
          </URI>
          <URI>vfs/util/NullResoure.java
          </URI>
        
        </resources>
      </scm:Change>
      <scm:Change>
        <revision>-dev55
        </revision>
      
        <notes>
          <scm:Note>Make sure DataSession doesn't return stale buffers, which
            can happen when data is edited in more than one DataSession
            instance.
          </scm:Note>
          <scm:Note>Enhance the default presentation of UpdateConflictException
          </scm:Note>
        </notes>
        <path>source/spiralcraft/data
        </path>
        <resources>
          <URI>UpdateConflictException.java
          </URI>
          <URI>spi/ArrayDeltaTuple.java
          </URI>
          <URI>session/DataSession.java
          </URI>
        </resources>
      </scm:Change>

      <scm:Change>
        <revision>-dev54
        </revision>
      
        <notes>
          <scm:Note>The "not" operator (!x) now returns true when its input
            is null or false. For a more explicit check, use "x==false"
          </scm:Note>
        </notes>
        <path>source/spiralcraft/lang/parser/LogicalNegateNode.java
        </path>
      </scm:Change>

      <scm:Change>
        <revision>-dev53
        </revision>
      
        <notes>
          <scm:Note>Fix issue where Entity declarations for abstract types
            were not picked up during Store initialization
          </scm:Note>
        </notes>
        <path>source/spiralcraft/data/access/kit/AbstractStore.java
        </path>
      </scm:Change>
      
      <scm:Change>
        <revision>-dev52
        </revision>
      
        <notes>
          <scm:Note>Implement mechanism for global sequences, allowing schemas
            to declare when a sequence is imported or exported.
          </scm:Note>
        </notes>
        <path>source/spiralcraft/data
        </path>
        <resources>
          <URI>Sequence.java
          </URI>
          <URI>Space.java
          </URI>
          <URI>access/Entity.java
          </URI>
          <URI>access/ExportSequence.java
          </URI>
          <URI>access/ImportSequence.java
          </URI>
          <URI>access/kit/AbstractStore.java
          </URI>
          <URI>access/kit/AbstractStoreSequence.java
          </URI>
          <URI>spi/ResourceSequence.java
          </URI>
          <URI>data/xml/XmlStore.java
          </URI>
        </resources>
      </scm:Change>

      <scm:Change>
        <revision>-dev51
        </revision>
      
        <notes>
          <scm:Note>Fix issue where iterable concatenation operator result would 
            erroneously claim it can be assigned to an array, causing a
            runtime exception.
          </scm:Note>
        </notes>
        <path>source/spiralcraft/lang/reflect/IterableReflector.java
        </path>
      </scm:Change>
      
      <scm:Change>
        <revision>-dev51
        </revision>
      
        <notes>
          <scm:Note>Add transactional semantics to caching system
          </scm:Note>
          <scm:Note>Add support for multiple edits per transaction in 
            dataSession/buffering system 
          </scm:Note>
          <scm:Note>Add new constructor to transaction WorkUnit to simplify
            use.
          </scm:Note>
        </notes>

        <path>source/spiralcraft/data
        </path>
        
        <resources>
          <URI>access/cache/CacheBranch.java
          </URI>
          <URI>access/cache/CacheEntry.java
          </URI>
          <URI>access/cache/CacheIndex.java
          </URI>
          <URI>access/cache/CacheResourceManager.java
          </URI>
          <URI>access/cache/EntityCache.java
          </URI>
          <URI>access/cache/IndexBranch.java
          </URI>
          <URI>access/cache/IndexBranchEntry.java
          </URI>
          <URI>access/cache/PrimarySet.java
          </URI>
          <URI>access/cache/ReferenceSet.java
          </URI>
          <URI>session/Buffer.java
          </URI>
          <URI>session/BufferAggregate.java
          </URI>
          <URI>session/BufferTuple.java
          </URI>
          <URI>session/DataSessionBranch.java
          </URI>
          <URI>spi/ArrayDeltaTuple.java
          </URI>
          <URI>transaction/WorkUnit.java
          </URI>
        </resources>
                
      </scm:Change>

      <scm:Change>
        <revision>-dev50
        </revision>
      
        <notes>
          <scm:Note>Add a data caching and normalization mechanism for use by
            Stores.
          </scm:Note>
        </notes>

        <path>source/spiralcraft/data
        </path>
        
        <resources>
          <URI>access/cache/CacheEntry.java
          </URI>
          <URI>access/cache/CacheIndex.java
          </URI>
          <URI>access/cache/EntityCache.java
          </URI>
          <URI>access/cache/KeyedDataProvider.java
          </URI>
          <URI>access/cache/ReferenceSet.java
          </URI>
          <URI>spi/EditableArrayListAggregate.java
          </URI>
          <URI>spi/EditableListAggregate.java
          </URI>
        </resources>
                
      </scm:Change>

      <scm:Change>
        <revision>-dev50
        </revision>
      
        <notes>
          <scm:Note>Make query.factor() public so Stores can make finer query 
            path optimization decisions.
          </scm:Note>
        </notes>

        <path>source/spiralcraft/data/query
        </path>
        
        <resources>
          <URI>Join.java
          </URI>
          <URI>Query.java
          </URI>
          <URI>Selection.java
          </URI>
        </resources>
                
      </scm:Change>

      <scm:Change>
        <revision>-dev50
        </revision>
      
        <notes>
          <scm:Note>Fix issues that prevented the re-use of Projection
            instances
          </scm:Note>
          <scm:Note>Implement hashCode/equals in key parser nodes so 
            projection expressions can be used as hash keys
          </scm:Note>
          <scm:Note>Normalize the representation of key signatures in
            equijoin queries.
          </scm:Note>
        </notes>

        <path>source/spiralcraft
        </path>
        
        <resources>
          <URI>data/Scheme.java
          </URI>
          <URI>data/core/SchemeImpl.java
          </URI>
          <URI>data/core/ProjectionImpl.java
          </URI>
          <URI>data/query/EquiJoin.java
          </URI>
          <URI>lang/parser/ResolveNode.java
          </URI>
          <URI>lang/parser/ContextIdentifierNode.java
          </URI>
          <URI>lang/parser/CurrentFocusNode.java
          </URI>
          <URI>lang/parser/ResolveNode.java
          </URI>
        </resources>
                
      </scm:Change>
      
      <scm:Change>
        <revision>-dev50
        </revision>
      
        <notes>
          <scm:Note>Fix issues that prevented the re-use of Projection
            instances
          </scm:Note>
          <scm:Note>Implement hashCode/equals in key parser nodes so 
            projection expressions can be used as hash keys
          </scm:Note>
        </notes>

        <path>source/spiralcraft
        </path>
        
        <resources>
          <URI>data/Scheme.java
          </URI>
          <URI>data/core/SchemeImpl.java
          </URI>
          <URI>data/core/ProjectionImpl.java
          </URI>
          <URI>lang/parser/ContextIdentifierNode.java
          </URI>
          <URI>lang/parser/CurrentFocusNode.java
          </URI>
          <URI>lang/parser/ResolveNode.java
          </URI>
        </resources>
                
      </scm:Change>

      <scm:Change>
        <revision>-dev50
        </revision>
      
        <notes>
          <scm:Note>Added timeReads property to Field for performance tuning
          </scm:Note>
        </notes>

        <path>source/spiralcraft/data/core/FieldImpl.java
        </path>
                
      </scm:Change>

      <scm:Change>
        <revision>-dev50
        </revision>
      
        <notes>
          <scm:Note>BlockTimer utility simplifies the timing of code blocks.
          </scm:Note>
        </notes>

        <path>source/spiralcraft/util/thread/BlockTimer.java
        </path>
                
      </scm:Change>
    
      <scm:Change>
        <revision>-dev50
        </revision>
      
        <notes>
          <scm:Note>Add "bypass" property to AssemblyClass to improve
             configurability.
          </scm:Note>
        </notes>

        <path>source/spiralcraft/builder
        </path>
        
        <resources>
          <URI>AssemblyClass.java
          </URI>
          <URI>AssemblyLoader.java
          </URI>
          <URI>PropertyBinding.java
          </URI>
        </resources>
        
                
      </scm:Change>

      <scm:Change>
        <revision>-dev50
        </revision>
      
        <notes>
          <scm:Note>Output component declaration info (source code location)
            in TraceHandler log messages.
          </scm:Note>
        </notes>

        <path>source/spiralcraft/app/kit/TraceHandler.java
        </path>
        
                
      </scm:Change>

      <scm:Change>
        <revision>-dev49
        </revision>
      
        <notes>
          <scm:Note>Added spiralcraft.text.xml.AttributeEncoder.encode(String)
            method for convenience.
          </scm:Note>
        </notes>

        <path>source/spiralcraft/text/xml/AttributeEncoder.java
        </path>
        
                
      </scm:Change>

      <scm:Change>
        <revision>-dev49
        </revision>
      
        <notes>
          <scm:Note>New vfs Session class provides a way for resources to
            be cleaned up after an operation.
          </scm:Note>
        </notes>

        <path>source/spiralcraft/vfs/Session.java
        </path>
        
                
      </scm:Change>

      <scm:Change>
        <revision>-dev49
        </revision>
      
        <notes>
          <scm:Note>Fix NPE in URIType.fromString()
          </scm:Note>
        </notes>

        <path>source/spiralcraft/data/types/standard/URIType.java
        </path>
        
                
      </scm:Change>

      <scm:Change>
        <revision>-dev49
        </revision>
      
        <notes>
          <scm:Note>The data Edit task now has a typeX property to set the
            type using an expression
          </scm:Note>
        </notes>

        <path>source/spiralcraft/data/task/Edit.java
        </path>
        
                
      </scm:Change>

      <scm:Change>
        <revision>-dev49
        </revision>
      
        <notes>
          <scm:Note>Refactor delta computation to fix issues when a
            DeltaTuple is computed from two standard Tuples
          </scm:Note>
        </notes>

        <path>source/spiralcraft/data/spi/ArrayDeltaTuple.java
        </path>
        
                
      </scm:Change>

      <scm:Change>
        <revision>-dev49
        </revision>
      
        <notes>
          <scm:Note>Fix bug in Sequence where we read past the end of the 
            cursor and caused SqlStore to throw an exception 
          </scm:Note>
        </notes>

        <path>source/spiralcraft/data/access/kit/AbstractStoreSequence.java
        </path>
        
                
      </scm:Change>

      <scm:Change>
        <revision>-dev49
        </revision>
      
        <notes>
          <scm:Note>Provide a canonical way to get a data reference to a Type
            via Type.getReference()
          </scm:Note>
        </notes>

        <path>source/spiralcraft/data/Type.java
        </path>
        
                
      </scm:Change>

      <scm:Change>
        <revision>-dev49
        </revision>
      
        <notes>
          <scm:Note>TaskRunner will now start/stop the rootContext if it is
            a LifeCycle
          </scm:Note>
          <scm:Note>Add start/stop logging to PathContext
          </scm:Note>
        </notes>

        <path>source/spiralcraft
        </path>
        
        <resources>
          <URI>app/PathContext.java
          </URI>
          <URI>task/TaskRunner.java
          </URI>
        </resources>
                
      </scm:Change>

      <scm:Change>
        <revision>-dev48
        </revision>
      
        <notes>
          <scm:Note>Add numeric type coercion to BindingChannel to support
            parameter coercion
          </scm:Note>
        </notes>

        <path>source/spiralcraft/lang/spi/BindingChannel
        </path>
                
      </scm:Change>

      <scm:Change>
        <revision>-dev48
        </revision>
      
        <notes>
          <scm:Note>Enhance spiralcraft.lang expression syntax to support
            struct-based type declarations
          </scm:Note>
          <scm:Note>Struct type constructor functor now accepts parameters
          </scm:Note>
        </notes>

        <path>source/spiralcraft/lang/parser
        </path>
        
        <resources>
          <URI>ExpressionParser.java</URI>
          <URI>TypeFocusNode.java</URI>
          <URI>StructNode.java</URI>
        </resources>
                
      </scm:Change>

      <scm:Change>
        <revision>-dev48
        </revision>
      
        <notes>
          <scm:Note>Fix hashCode computation for Tuples to account for base
            extent
          </scm:Note>
        </notes>

        <path>source/spiralcraft/data/spi/ArrayTuple.java
        </path>
                
      </scm:Change>

      <scm:Change>
        <revision>-dev48
        </revision>
      
        <notes>
          <scm:Note>Provide more informative exception when an
            ArrayStoreException is thrown from a "Map" ('#{ ... }') operation
          </scm:Note>
        </notes>

        <path>source/spiralcraft/lang/spi/MapProjector.java
        </path>
                
      </scm:Change>

      <scm:Change>
        <revision>-dev48
        </revision>
      
        <notes>
          <scm:Note>Enhance spiralcraft.lang syntax to use single line comments
            beginning with "//"
          </scm:Note>
        </notes>

        <path>source/spiralcraft/lang/parser
        </path>
        
        <resources>
          <URI>ExpressionParser.java
          </URI>
        </resources>
        
      </scm:Change>

      <scm:Change>
        <revision>-dev47
        </revision>
      
        <notes>
          <scm:Note>Enhance spiralcraft.lang syntax by using focus selector
            to resolve this "[.]" and context "[]" in order to permit
            application of all postfix operations.
          </scm:Note>
        </notes>

        <path>source/spiralcraft/lang/parser
        </path>
        
        <resources>
          <URI>ContextNode.java
          </URI>
          <URI>ExpressionParser.java
          </URI>
          <URI>FunctionNode.java
          </URI>
        </resources>
        
      </scm:Change>

      <scm:Change>
        <revision>-dev47
        </revision>
      
        <notes>
          <scm:Note>Allow for String input to source and target bindings 
            by coercing to URI types.
          </scm:Note>
        </notes>

        <path>source/spiralcraft/vfs/task/Copy.java
        </path>
        
      </scm:Change>

      <scm:Change>
        <revision>-dev47
        </revision>
      
        <notes>
          <scm:Note>Provide acyclic string conversion for arrays 
          </scm:Note>
        </notes>

        <path>source/spiralcraft
        </path>
        
        <resource>
          <URI>lang/parser/BinaryOpNode.java
          </URI>
          <URI>lang/parser/Struct.java
          </URI>
          <URI>lang/parser/StructNode.java
          </URI>
          <URI>lang/reflect/ArrayReflector.java
          </URI>
          <URI>util/string/ArrayToString.java
          </URI>
        </resource>
      </scm:Change>


      <scm:Change>
        <revision>-dev47
        </revision>
      
        <notes>
          <scm:Note>New Collect function accumulates the result of
            a reduction.
          </scm:Note>
        </notes>

        <path>source/spiralcraft/lang/functions/Collect.java
        </path>
      </scm:Change>

      <scm:Change>
        <revision>-dev47
        </revision>
      
        <notes>
          <scm:Note>Improve reusability and garbage collection for segments 
            of the data flow graph.
          </scm:Note>
          <scm:Note>Simplify the use of compound hash keys based on arrays.
          </scm:Note>
          <scm:Note>Make sure that cached bindings are garbage collected
            once they are no longer used.
          </scm:Note>
          <scm:Note>Make sure that data projections are re-used when the
            field signature is identical.
          </scm:Note>
        </notes>

        <path>source/spiralcraft
        </path>
        
        <resources>
          <URI>data/core/SchemeImpl.java
          </URI>
          <URI>lang/spi/WeakChannelCache.java
          </URI>
          <URI>util/ArrayKey.java
          </URI>
          <URI>util/ArrayUtil.java
          </URI>
        </resources>
      </scm:Change>

      <scm:Change>
        <revision>-dev46
        </revision>
      
        <notes>
          <scm:Note>FileResource.delete() throws an exception on failure
          </scm:Note>
        </notes>

        <path>source/spiralcraft/vfs/file/FileResource.java
        </path>
      </scm:Change>

      <scm:Change>
        <revision>-dev46
        </revision>
      
        <notes>
          <scm:Note>Tasks to create and delete containers (directories)
          </scm:Note>
        </notes>

        <path>source/spiralcraft/vfs
        </path>
                
        <resources>
          <URI>ResourceUtil.java
          </URI>
          <URI>task/Delete.java
          </URI>
          <URI>task/MakeDir.java
          </URI>
        </resources>
      </scm:Change>

      <scm:Change>
        <revision>-dev46
        </revision>
      
        <notes>
          <scm:Note>Utility functions to write ASCII text to resources/streams
          </scm:Note>
        </notes>

        <path>source/spiralcraft/vfs
        </path>
                
        <resources>
          <URI>ResourceUtil.java
          </URI>
          <URI>StreamUtil.java
          </URI>
        </resources>
      </scm:Change>

      <scm:Change>
        <revision>-dev46
        </revision>
      
        <notes>
          <scm:Note>KeyedList.containsKey() method
          </scm:Note>
        </notes>

        <path>source/spiralcraft/util/KeyedList.java
        </path>
                
      </scm:Change>

      <scm:Change>
        <revision>-dev46
        </revision>
      
        <notes>
          <scm:Note>ToString now reports its reflector type properly as a
            String
          </scm:Note>
        </notes>

        <path>source/spiralcraft/lang/functions/ToString.java
        </path>
                
      </scm:Change>

      <scm:Change>
        <revision>-dev46
        </revision>
      
        <notes>
          <scm:Note>Consolidated binary pattern matcher functionality and added
            a PatternReplacingInputStream class
          </scm:Note>
        </notes>

        <path>source/spiralcraft/io
        </path>
        
        <resources>
          <URI>KmpMatcher.java
          </URI>
          <URI>PatternReplacingInputStream.java
          </URI>
          <URI>FileRecordIterator.java
          </URI>
          <URI>InputStreamRecordIterator.java
          </URI>
        </resources>
        
      </scm:Change>

      <scm:Change>
        <revision>-dev46
        </revision>
      
        <notes>
          <scm:Note>isNew() method on buffer to determine whether the entity
            has ever been persisted
          </scm:Note>
        </notes>

        <path>source/spiralcraft/data/session
        </path>
        
        <resources>
          <URI>Buffer.java
          </URI>
          <URI>BufferTuple.java
          </URI>
          <URI>BufferAggregate.java
          </URI>
        </resources>
        
      </scm:Change>

      <scm:Change>
        <revision>-dev45
        </revision>
      
        <notes>
          <scm:Note>Pool now supports deferred checkin where the background
            thread will recycle the resource instead of the application thread
          </scm:Note>
          <scm:Note>Removed excessive "Waiting for pool"/"Waited 0 for pool"
            log messages
          </scm:Note>
        </notes>

        <path>source/spiralcraft/pool/Pool.java
        </path>
        
      </scm:Change>

      <scm:Change>
        <revision>-dev45
        </revision>
      
        <notes>
          <scm:Note>Keep static instance for ByteArrayToHex
          </scm:Note>
        </notes>

        <path>source/spiralcraft/util/string/ByteArrayToHex.java
        </path>
        
      </scm:Change>

      <scm:Change>
        <revision>-dev45
        </revision>
      
        <notes>
          <scm:Note>New ByteBuffer constructors to wrap an existing array and 
            start writing at a specified point.
          </scm:Note>
        </notes>

        <path>source/spiralcraft/util/ByteBuffer.java
        </path>
        
      </scm:Change>

      <scm:Change>
        <revision>-dev45
        </revision>
      
        <notes>
          <scm:Note>Support for coordination of XA resources in transactions
          </scm:Note>
          <scm:Note>Fix issue where propogated subtransaction commits cause
            main transaction rollback on commit.
          </scm:Note>
        </notes>

        <path>source/spiralcraft/data/transaction
        </path>
        
        <resources>
          <URI>Branch.java
          </URI>
          <URI>Transaction.java
          </URI>
          <URI>XidImpl.java
          </URI>
        </resources>
      </scm:Change>

      <scm:Change>
        <revision>-dev45
        </revision>
      
        <notes>
          <scm:Note>Standardize on using an internal identifier (defaults to
            to Login.principalId) for linking logins to application specific 
            identities to provide flexibility in the application username 
            policies.
          </scm:Note>
        </notes>

        <path>source/spiralcraft/security/auth
        </path>
        
        <resources>
          <URI>AuthModule.java
          </URI>
          <URI>AuthPrincipal.java
          </URI>
          <URI>AuthSession.java
          </URI>
          <URI>TestAuthenticator.java
          </URI>
          <URI>spi/AbstractAuthModule.java
          </URI>
          <URI>spi/DataAuthModule.java
          </URI>
          <URI>spi/DataAuthenticator.java
          </URI>
        </resources>
        
      </scm:Change>

      <scm:Change>
        <revision>-dev44
        </revision>
      
        <notes>
          <scm:Note>Make sure that spiralcraft.lang reflection types can be 
            found even when aliased through "context" URIs that resolve
            through VFS Packages.
          </scm:Note>
        </notes>

        <path>source/spiralcraft/lang/reflect/BeanTypeModel.java
        </path>
        
      </scm:Change>

      <scm:Change>
        <revision>-dev44
        </revision>
      
        <notes>
          <scm:Note>Instant.add(Duration) performs a millisecond based
            computation without using a calendar.
          </scm:Note>
        </notes>

        <path>source/spiralcraft/time/Instant.java
        </path>
        
      </scm:Change>
          
      
      <scm:Change>
        <revision>-dev44
        </revision>
      
        <notes>
          <scm:Note>Login.findBySearchName() finds an account by the
            case insensitive user name
          </scm:Note>
        </notes>

        <path>source/spiralcraft/security/Login.type.xml
        </path>
        
      </scm:Change>

      <scm:Change>
        <revision>-dev44
        </revision>
      
        <notes>
          <scm:Note>Duration is a standard spiralcraft.data type
          </scm:Note>
        </notes>

        <path>source/spiralcraft/data/types/standard/DurationType.java
        </path>
        
      </scm:Change>

      <scm:Change>
        <revision>-dev44
        </revision>
      
        <notes>
          <scm:Note>Refactor RandomUtil->Random to provide for pluggable
            random number generator and default secure and standard 
            generators.
          </scm:Note>
        </notes>

        <path>source/spiralcraft/util
        </path>
        
        <resources>
          <URI>RandomUtil.java
          </URI>
          <URI>Random.java
          </URI>
        </resources>
        
      </scm:Change>
      
      <scm:Change>
        <revision>-dev44
        </revision>
      
        <notes>
          <scm:Note>Secure Ticket objects for multi-factor authentication, lost
            passwords, session persistence, etc.
          </scm:Note>
        </notes>

        <path>source/spiralcraft/security/Ticket.type.xml
        </path>
        
      </scm:Change>

      <scm:Change>
        <revision>-dev43
        </revision>
      
        <notes>
          <scm:Note>New DerivativeCache utility keeps track of objects
            derived from VFS resources and expires them when the underlying
            resource changes. 
          </scm:Note>
        </notes>

        <path>source/spiralcraft/vfs/watcher/DerivativeCache.java
        </path>
        
      </scm:Change>

      <scm:Change>
        <revision>-dev43
        </revision>
      
        <notes>
          <scm:Note>Load a new version of an AssemblyClass when its underlying
            resource or that of any dependencies have changed.
          </scm:Note>
        </notes>

        <path>source/spiralcraft/builder
        </path>
        
        <resources>
          <URI>AssemblyClass.java
          </URI>
          <URI>AssemblyLoader.java
          </URI>
          <URI>PropertySpecifier.java
          </URI>
        </resources>
      </scm:Change>

      <scm:Change>
        <revision>-dev42
        </revision>
      
        <notes>
          <scm:Note>Add query string encoding functions to URIUtil
          </scm:Note>
        </notes>

        <path>source/spiralcraft/util/URIUtil.java
        </path>
      </scm:Change>
      
      <scm:Change>
        <revision>-dev42
        </revision>
      
        <notes>
          <scm:Note>Fix NPE in URLDataEncoder when passing null
          </scm:Note>
        </notes>

        <path>source/spiralcraft/text/html/URLDataEncoder.java
        </path>
      </scm:Change>

      <scm:Change>
        <revision>-dev42
        </revision>
      
        <notes>
          <scm:Note>Add a constructor argument to StringCat which adds a
            separator in-between substrings.
          </scm:Note>
        </notes>

        <path>source/spiralcraft/lang/functions/StringCat.java
        </path>
      </scm:Change>

      <scm:Change>
        <revision>-dev42
        </revision>
      
        <notes>
          <scm:Note>Improve performance of XML data reader by reducing 
            use of "instanceof" in copyData()
          </scm:Note>
        </notes>

        <path>source/spiralcraft/data/spi/ArrayTuple.java
        </path>
      </scm:Change>

      <scm:Change>
        <revision>-dev42
        </revision>
      
        <notes>
          <scm:Note>Improve performance of XML data reader by intermediating
            a thread local string cache in front of the global StringPool and
            by caching type URIs resolved from qnames.
          </scm:Note>
        </notes>

        <path>source/spiralcraft
        </path>
        
        <resources>
          <URI>data/sax/DataHandler.java
          </URI>
          <URI>data/sax/DataHandlerBase.java
          </URI>
          <URI>data/sax/ForeignDataHandler.java
          </URI>
          <URI>util/URIResolvePool.java
          </URI>
          <URI>util/string/StringPool.java
          </URI>
        </resources>
      </scm:Change>

      <scm:Change>
        <revision>-dev41
        </revision>
      
        <notes>
          <scm:Note>ArrayUtil.arrayClass() method to obtain array class for
            a given component type without creating an array.
          </scm:Note>
        </notes>

        <path>source/spiralcraft/util/ArrayUtil.java
        </path>
      </scm:Change>

      <scm:Change>
        <revision>-dev41
        </revision>
      
        <notes>
          <scm:Note>Add "data" context authority as configuration property
            to ResourceContext
          </scm:Note>
        </notes>

        <path>source/spiralcraft/service/ResourceContext.java
        </path>
      </scm:Change>

      <scm:Change>
        <revision>-dev41
        </revision>
      
        <notes>
          <scm:Note>Add info to "not found" exception in LangUtil findFocus
            operations.
          </scm:Note>
        </notes>

        <path>source/spiralcraft/lang/util/LangUtil.java
        </path>
      </scm:Change>

      <scm:Change>
        <revision>-dev41
        </revision>
      
        <notes>
          <scm:Note>Add info to "duplicate LLR" exception in Transaction
          </scm:Note>
        </notes>

        <path>source/spiralcraft/data/transaction/Transaction.java
        </path>
      </scm:Change>

      <scm:Change>
        <revision>-dev41
        </revision>
      
        <notes>
          <scm:Note>Add @internalize() built-in method to Tuple based objects.
          </scm:Note>
        </notes>

        <path>source/spiralcraft/data/lang/TupleReflector.java
        </path>
      </scm:Change>

      <scm:Change>
        <revision>-dev41
        </revision>
      
        <notes>
          <scm:Note>Fix NPE
          </scm:Note>
        </notes>

        <path>source/spiralcraft/data/lang/ToDataTranslator.java
        </path>
      </scm:Change>

      <scm:Change>
        <revision>-dev41
        </revision>
      
        <notes>
          <scm:Note>Fix onInit expression not firing b/c it was in the
            wrong conditional.
          </scm:Note>
        </notes>

        <path>source/spiralcraft/data/editor/TupleEditor.java
        </path>
      </scm:Change>

      <scm:Change>
        <revision>-dev41
        </revision>
      
        <notes>
          <scm:Note>Enhancements and fixes for persisting fields that
            contain arrays and lists and embedded data.
          </scm:Note>
          <scm:Note>Arrays and lists of primitives cannot be buffered as they
            cannot be partially updated.
          </scm:Note>
          <scm:Note>Auto-link type when getScheme() is called. Provide scheme()
            internal method to prevent premature linking.
          </scm:Note>
          <scm:Note>When externalizing a collection, leave primitive elements
            and other non-convertable elements in place.
          </scm:Note>
          <scm:Note>Provide a way for Tuple implementations to delegate
            the creation of embedded data instances to themselves.
          </scm:Note>
          <scm:Note>Prevent copying of Buffers into ArrayDeltaTuples.
          </scm:Note>
          <scm:Note>Refine the auto-buffering policy implemented in
            BufferTuple.set()
          </scm:Note>
          <scm:Note>DataWriter now uses dynamic polymorphic resolution when 
            writing the contents of aggregates to XML.
          </scm:Note>
          <scm:Note>Internalization of reflection based data types now properly
            converts aggregates to collections or arrays.
          </scm:Note>
          <scm:Note>Do not register a default constructor if it is not public
          </scm:Note>
        </notes>

        <path>source/spiralcraft
        </path>
        
        <resources>
          <URI>data/Type.java
          </URI>
          <URI>data/core/TypeImpl.java
          </URI>
          <URI>data/core/AbstractAggregateType.java
          </URI>
          <URI>data/core/AbstractCollectionType.java
          </URI>
          <URI>data/lang/BoundTuple.java
          </URI>
          <URI>data/reflect/ReflectionField.java
          </URI>
          <URI>data/reflect/ReflectionType.java
          </URI>
          <URI>data/session/DataSession.java
          </URI>
          <URI>data/session/BufferAggregate.java
          </URI>
          <URI>data/session/BufferTuple.java
          </URI>
          <URI>data/session/BufferType.java
          </URI>
          <URI>data/spi/AbstractTuple.java
          </URI>
          <URI>data/spi/ArrayTuple.java
          </URI>
          <URI>data/spi/ArrayJournalTuple.java
          </URI>
          <URI>data/spi/ArrayDeltaTuple.java
          </URI>

        </resources>
      </scm:Change>


      <scm:Change>
        <revision>-dev41
        </revision>
      
        <notes>
          <scm:Note>New mechanism for specifying contextual properties in
            spiralcraft.builder modules using the this.foo.bar and 
            context.foo.bar attributes. The old mechanism did not account for
            multiple properties and was more verbose.
          </scm:Note>
        </notes>

        <path>source/spiralcraft/builder/AssemblyLoader.java
        </path>
      </scm:Change>

      <scm:Change>
        <revision>-dev41
        </revision>
      
        <notes>
          <scm:Note>Fix issue where PluginContext tried to chain contextual
            after chain was sealed.
          </scm:Note>
        </notes>

        <path>source/spiralcraft/app/PluginContext.java
        </path>
      </scm:Change>



      <scm:Change>
        <revision>-dev41
        </revision>
      
        <notes>
          <scm:Note>Add imports, exports and task scheduling to PlaceContext
          </scm:Note>
        </notes>

        <path>source/spiralcraft
        </path>
        
        <resources>
          <URI>app/PlaceContext.java
          </URI>
          <URI>lang/kit/BindingContext.java
          </URI>
        </resources>
      </scm:Change>

      <scm:Change>
        <revision>-dev40
        </revision>
      
        <notes>
          <scm:Note>OnMessage component simplifies the triggering of an
            expression for specific messages.
          </scm:Note>
        </notes>

        <path>source/spiralcraft/app/components/OnMessage.java
        </path>
      </scm:Change>

      <scm:Change>
        <revision>-dev39
        </revision>
      
        <notes>
          <scm:Note>TaskRunner can now be configured to run tasks in any
            Context, since a PlaceContext often depends on a more general
            environment.
          </scm:Note>
        </notes>

        <path>source/spiralcraft/data/task/TaskRunner.java
        </path>
      </scm:Change>

      <scm:Change>
        <revision>-dev38
        </revision>
      
        <notes>
          <scm:Note>Fix issue where CalculatedField throws a bind
            exception when referenced in a method
          </scm:Note>
        </notes>

        <path>source/spiralcraft/data/core/CalculatedFieldImpl.java
        </path>
      </scm:Change>

      <scm:Change>
        <revision>-dev38
        </revision>
      
        <notes>
          <scm:Note>Add reflector info to error message for method
            return type incompatibility
          </scm:Note>
        </notes>

        <path>source/spiralcraft/data/lang/TupleReflector.java
        </path>
      </scm:Change>

      <scm:Change>
        <revision>-dev38
        </revision>
      
        <notes>
          <scm:Note>Fix NPE when generating parse error for missing RHS
            of Binding Expression
          </scm:Note>
        </notes>

        <path>source/spiralcraft/lang/parser/ExpressionParser.java
        </path>
      </scm:Change>

      <scm:Change>
        <revision>-dev38
        </revision>
      
        <notes>
          <scm:Note>Added a word tokenizer utility to the text package
          </scm:Note>
        </notes>

        <path>source/spiralcraft/text/WordTokenizer.java
        </path>
      </scm:Change>


      <scm:Change>
        <revision>-dev37
        </revision>
      
        <notes>
          <scm:Note>Added automatic string conversion to binding expressions
            and to assignments via the "$=" operator.
          </scm:Note>
        </notes>

        <path>source/spiralcraft/lang
        </path>
        
        <resources>
          <URI>parser/AssignmentNode.java
          </URI>
          <URI>parser/ExpressionParser.java
          </URI>
          <URI>parser/Node.java
          </URI>
          <URI>spi/BindingChannel.java
          </URI>
        </resources>
      </scm:Change>

      <scm:Change>
        <revision>-dev37
        </revision>
      
        <notes>
          <scm:Note>TextSearch query now supports "limit" and "matchAll" 
            properties
          </scm:Note>
        </notes>

        <path>source/spiralcraft/data/query/TextSearch.java
        </path>
      </scm:Change>

      <scm:Change>
        <revision>-dev37
        </revision>
      
        <notes>
          <scm:Note>Added a new constructor to Fetch task to simplify 
            arbitrary selects
          </scm:Note>
        </notes>

        <path>source/spiralcraft/data/task/Fetch.java
        </path>
      </scm:Change>
      
      <scm:Change>
        <revision>-dev37
        </revision>
      
        <notes>
          <scm:Note>Add metadata query to Field api
          </scm:Note>
          <scm:Note>Fix metadata query to delegate to field archetype chain
          </scm:Note>
        </notes>

        <path>source/spiralcraft/data
        </path>
        
        <resources>
          <URI>Field.java
          </URI>
          <URI>core/FieldImpl.java
          </URI>
          <URI>core/RelativeField.java
          </URI>
          <URI>session/BufferField.java
          </URI>
        </resources>
      </scm:Change>

      <scm:Change>
        <revision>-dev36
        </revision>
      
        <notes>
          <scm:Note>Fix regression resulting in members not found when
            a Type references its own subtypes (re-entrant linking)
          </scm:Note>
        </notes>

        <path>source/spiralcraft/data/core/TypeImpl.java
        </path>
      </scm:Change>

      <scm:Change>
        <revision>-dev35
        </revision>
      
        <notes>
          <scm:Note>Check actual type of method implementations against declared
            return type.
          </scm:Note>
        </notes>

        <path>source/spiralcraft/
        </path>
        
        <resources>
          <URI>data/Method.java
          </URI>
          <URI>data/lang/TupleReflector.java
          </URI>
          <URI>data/core/MethodImpl.java
          </URI>
          <URI>security/Login.type.xml
          </URI>
        </resources>
        
      </scm:Change>

      <scm:Change>
        <revision>-dev35
        </revision>
      
        <notes>
          <scm:Note>Make sure that "x==null" comparisons do not throw a
            "types are not comparable" exception.
          </scm:Note>
        </notes>

        <path>source/spiralcraft/lang/parser/EqualityNode.java
        </path>
        
      </scm:Change>

      <scm:Change>
        <revision>-dev34
        </revision>
      
        <notes>
          <scm:Note>Detect cycles when resolving resources
          </scm:Note>
        </notes>

        <path>source/spiralcraft/vfs/context/ContextResourceMap.java
        </path>
        
      </scm:Change>

      <scm:Change>
        <revision>-dev34
        </revision>
      
        <notes>
          <scm:Note>Fix issues related to the creation of empty path elements.
          </scm:Note>
        </notes>

        <path>source/spiralcraft
        </path>
        
        <resources>
          <URI>ui/NavContext.java
          </URI>
          <URI>util/Path.java
          </URI>
        </resources>
      </scm:Change>

      <scm:Change>
        <revision>-dev34
        </revision>
      
        <notes>
          <scm:Note>Work on infrastructure to support data-driven component
            models.
          </scm:Note>
        </notes>

        <path>source/spiralcraft/app
        </path>
        
        <resources>
          <URI>components/SetManager.java
          </URI>
          <URI>kit/DynamicProxyComponent.java
          </URI>
          <URI>kit/TupleState.java
          </URI>
          <URI>kit/ValueState.java
          </URI>
        </resources>
      </scm:Change>

      <scm:Change>
        <revision>-dev33
        </revision>
      
        <notes>
          <scm:Note>Added onCreate, onInit, preSave and onSave hooks to the
            data Editor system and the Edit tasklet.
          </scm:Note>
        </notes>

        <path>source/spiralcraft/data
        </path>
        
        <resources>
          <URI>editor/EditorBase.java
          </URI>
          <URI>editor/TupleEditor.java
          </URI>
          <URI>task/Edit.java
          </URI>
        </resources>
      </scm:Change>
          
      <scm:Change>
        <revision>-dev33
        </revision>
      
        <notes>
          <scm:Note>The ToString lang function will always fall back to using
            the one-way StringConverter which uses Object.toString() in the
            absence of a more suitable Converter.
          </scm:Note>
        </notes>

        <path>source/spiralcraft/lang/functions/ToString.java
        </path>
      </scm:Change>

      <scm:Change>
        <revision>-dev33
        </revision>
      
        <notes>
          <scm:Note>XML data reader optimizations
          </scm:Note>
          <scm:Note>TypeImpl.getField(String name) optimization
          </scm:Note>
          <scm:Note>Speed up character processing in DataHandler
          </scm:Note>
          <scm:Note>Speed up Tuple.widen(Type) by inlining baseExtent
          </scm:Note>
        </notes>

        <path>source/spiralcraft/data
        </path>
        
        <resources>
          <URI>core/TypeImpl.java
          </URI>
          <URI>sax/DataHandler.java
          </URI>
          <URI>sax/DataHandlerBase.java
          </URI>
          <URI>spi/AbstractTuple.java
          </URI>
        </resources>
      </scm:Change>

      <scm:Change>
        <revision>-dev32
        </revision>
      
        <notes>
          <scm:Note>The second operand of a conditional expression can now
            be an assignment expression
          </scm:Note>
        </notes>

        <path>source/spiralcraft/lang/parser/ExpressionParser.java
        </path>
      </scm:Change>

      <scm:Change>
        <revision>-dev32
        </revision>
      
        <notes>
          <scm:Note>String concatenation and channel logging now use standard 
            StringConverters instead of plain Object.toString()
          </scm:Note>
        </notes>

        <path>source/spiralcraft/lang
        </path>
        
        <resources>
          <URI>kit/members/MetaLogMember.java
          </URI>
          <URI>parser/BinaryOpNode.java
          </URI>
          <URI>spi/LogChannel.java
          </URI>
        </resources>
      </scm:Change>

      <scm:Change>
        <revision>-dev32
        </revision>
      
        <notes>
          <scm:Note>PlaceContext can now contain Services
          </scm:Note>
        </notes>

        <path>source/spiralcraft/app/PlaceContext.java
        </path>
      </scm:Change>

      <scm:Change>
        <revision>-dev32
        </revision>
      
        <notes>
          <scm:Note>Fix issue where Channel.isWritable() erroneously returned 
            false for Channels that directly referenced a public field, even 
            though set() functioned properly.
          </scm:Note>
        </notes>

        <path>source/spiralcraft/data/core/TypeImpl.java
        </path>
      </scm:Change>

      <scm:Change>
        <revision>-dev32
        </revision>
      
        <notes>
          <scm:Note>Add support for scaffolding to components to allow generic
            components to be used in any scaffolding model.
          </scm:Note>
        </notes>

        <path>source/spiralcraft/app
        </path>
        
        <resources>
          <URI>Component.java
          </URI>
          <URI>kit/AbstractComponent.java
          </URI>
          <URI>kit/StandardContainer.java
          </URI>
        </resources>
      </scm:Change>

      <scm:Change>
        <revision>-dev31
        </revision>
      
        <notes>
          <scm:Note>Fix "not linked" exception when binding EntityFields
          </scm:Note>
        </notes>

        <path>source/spiralcraft/data/core/TypeImpl.java
        </path>
      </scm:Change>

      <scm:Change>
        <revision>-dev30
        </revision>
      
        <notes>
          <scm:Note>ArrayReflector.getComponentReflector and 
            .getRootComponentReflector() provide helpful info for 
            meta-operations involving array data.
          </scm:Note>
        </notes>

        <path>source/spiralcraft/lang/reflect/ArrayReflector.java
        </path>
      </scm:Change>
      
      <scm:Change>
        <revision>-dev29
        </revision>
      
        <notes>
          <scm:Note>Throw exception for "==" operator when operand types are
            not derived from one another and would silently return false
          </scm:Note>
          <scm:Note>Throw exception when the parameters for an index search
            query are of incompatible types to the indexed fields.
          </scm:Note>
        </notes>

        <path>source/spiralcraft
        </path>
        
        <resources>
          <URI>data/spi/AbstractAggregateQueryable.java
          </URI>
          <URI>lang/parser/EqualityNode.java
          </URI>
          <URI>lang/parser/LogicalNode.java
          </URI>
          <URI>lang/parser/RelationalNode.java
          </URI>
        </resources>
        
      </scm:Change>

      <scm:Change>
        <revision>-dev28
        </revision>
      
        <notes>
          <scm:Note>Complete implementation of Function Literal syntax
          </scm:Note>
        </notes>

        <path>source/spiralcraft/lang/parser
        </path>
        
        <resources>
          <URI>ExpressionParser.java
          </URI>
          <URI>FunctionNode.java
          </URI>
          <URI>SubcontextNode.java
          </URI>
        </resources>
        
      </scm:Change>

      <scm:Change>
        <revision>-dev27
        </revision>
      
        <notes>
          <scm:Note>Fix bugs in delete pathway when multiple deletes for
             the same tuple are received in the same transaction.
          </scm:Note>
        </notes>

        <path>source/spiralcraft/data
        </path>
        
        <resources>
          <URI>session/BufferTuple.java
          </URI>
          <URI>spi/ArrayDeltaTuple.java
          </URI>
          <URI>spi/ArrayJournalTuple.java
          </URI>
          <URI>xml/XmlQueryable.java
          </URI>
        </resources>
        
      </scm:Change>
          
      <scm:Change>
        <revision>-dev27
        </revision>
      
        <notes>
          <scm:Note>Component message tracing support
          </scm:Note>
        </notes>

        <path>source/spiralcraft/app
        </path>
        
        <resources>
          <URI>components/Trace.java
          </URI>
          <URI>kit/TraceHandler.java
          </URI>
        </resources>
        
      </scm:Change>

      <scm:Change>
        <revision>-dev26
        </revision>
      
        <notes>
          <scm:Note>Fix issue where array concatenation didn't find common
            base type for spiralcraft.data types.
          </scm:Note>
        </notes>

        <path>source/spiralcraft/data/lang/DataReflector.java
        </path>
        
      </scm:Change>

      <scm:Change>
        <revision>-dev25
        </revision>
      
        <notes>
          <scm:Note>Login.findByName() static method
          </scm:Note>
        </notes>

        <path>source/spiralcraft/security/Login.type.xml
        </path>
        
      </scm:Change>
    
      <scm:Change>
        <revision>-dev24
        </revision>
      
        <notes>
          <scm:Note>Implement RI delete cascade trigger
          </scm:Note>
          <scm:Note>Remove extraneous Focus argument from Space.getUpdater()
            and Store.getUpdater()
          </scm:Note>
          <scm:Note>Make the current DataSession available to data management 
            Components inside the Space.
          </scm:Note>
        
        </notes>

        <path>source/spiralcraft
        </path>
        
        <resources>
          <URI>data/DeletionConstraint.java
          </URI>
          <URI>data/Space.java
          </URI>
          <URI>data/access/DataSynchronizer.java
          </URI>
          <URI>data/access/DeleteCascadeTrigger.java
          </URI>
          <URI>data/access/Store.java
          </URI>
          <URI>data/access/kit/EntityBinding.java
          </URI>
          <URI>data/core/RelativeField.java
          </URI>
          <URI>data/session/Buffer.java
          </URI>
          <URI>data/session/BufferAggregate.java
          </URI>
          <URI>data/session/BufferTuple.java
          </URI>
          <URI>data/session/DataSession.java
          </URI>
          <URI>data/session/DataSessionBranch.java
          </URI>
          <URI>data/session/DataSessionFocus.java
          </URI>
          <URI>data/util/UpdaterService.java
          </URI>
          <URI>data/xml/XmlStore.java
          </URI>
          <URI>security/spi/DataAuthModule.java
          </URI>
        </resources>
        
      </scm:Change>

      <scm:Change>
        <revision>-dev23
        </revision>
      
        <notes>
          <scm:Note>Assertions can now compare output to a textLiteral
            property for testing code that generates small amounts of text.
          </scm:Note>
        </notes>

        <path>source/spiralcraft/test/Assertion.java
        </path>
        
      </scm:Change>
          
      <scm:Change>
        <revision>-dev23
        </revision>
      
        <notes>
          <scm:Note>Struct provides access to its Reflector
          </scm:Note>
          <scm:Note>StructReflector is now a Functor that constructs its
            struct.
          </scm:Note>
        
        </notes>

        <path>source/spiralcraft
        </path>
        
        <resources>
          <URI>lang/parser/Struct.java
          </URI>
          <URI>lang/parser/StructNode.java
          </URI>
        </resources>
        
      </scm:Change>

      <scm:Change>
        <revision>-dev23
        </revision>
      
        <notes>
          <scm:Note>Reflector.getProperties() provides signatures for
            property members.
          </scm:Note>
        
        </notes>

        <path>source/spiralcraft
        </path>
        
        <resources>
          <URI>lang/Reflector.java
          </URI>
          <URI>data/lang/TupleReflector.java
          </URI>
          <URI>lang/kit/AbstractReflector.java
          </URI>
          <URI>lang/reflect/BeanReflector.java
          </URI>
        </resources>
        
      </scm:Change>

      <scm:Change>
        <revision>-dev23
        </revision>
      
        <notes>
          <scm:Note>Builder xml attribute to normalize line endings to
            CRLF.
          </scm:Note>
          <scm:Note>Allow preservation of whitespace via "whitespace" xml
            attribute when reading object constructor values.
          </scm:Note>
          <scm:Note>StringUtil.convertLineEndings()
          </scm:Note>
        </notes>

        <path>source/spiralcraft
        </path>
        
        <resources>
          <URI>builder/AssemblyLoader.java
          </URI>
          <URI>builder/PropertySpecifier.java
          </URI>
          <URI>util/string/StringUtil.java
          </URI>
        </resources>
        
      </scm:Change>

      <scm:Change>
        <revision>-dev22
        </revision>
      
        <notes>
          <scm:Note>Log data load timing when over 1 second.
          </scm:Note>
        </notes>

        <path>source/spiralcraft/data/xml/XmlQueryable.java
        </path>
        
      </scm:Change>

      <scm:Change>
        <revision>-dev22
        </revision>
      
        <notes>
          <scm:Note>Added a constructor which accepts a data type and an
            array of equijoin expressions.
          </scm:Note>
        </notes>

        <path>source/spiralcraft/data/task/Fetch.java
        </path>
        
      </scm:Change>

      <scm:Change>
        <revision>-dev22
        </revision>
      
        <notes>
          <scm:Note>Fix bug which threw an exception when concrete base types
            are used.
          </scm:Note>
        </notes>

        <path>source/spiralcraft/data/access/kit
        </path>
        
        <resources>
          <URI>AbstractStore.java
          </URI>
          <URI>EntityBinding.java
          </URI>
        </resources>
        
      </scm:Change>

      <scm:Change>
        <revision>-dev21
        </revision>
      
        <notes>
          <scm:Note>Add meaningful exception to ResourceUtil.addCopy when
            container is null
          </scm:Note>
        </notes>

        <path>source/spiralcraft/vfs/ResourceUtil.java
        </path>
        
      </scm:Change>

      <scm:Change>
        <revision>-dev21
        </revision>
      
        <notes>
          <scm:Note>Struct labels no longer need to be globally unique. This
            means that namespacing any exported labels is now very important.
          </scm:Note>
        </notes>

        <path>source/spiralcraft/lang/parser/StructNode.java
        </path>
        
      </scm:Change>

      <scm:Change>
        <revision>-dev21
        </revision>
      
        <notes>
          <scm:Note>Fix bug in AbstractChainableContext which interrupted
            the push/pop chain when there was a non-Context in the chain.
          </scm:Note>
        </notes>

        <path>source/spiralcraft/lang/kit/AbstractChainableContext.java
        </path>
        
      </scm:Change>

      <scm:Change>
        <revision>-dev21
        </revision>
      
        <notes>
          <scm:Note>Add exportMounts to PlaceContext to make VFS paths
            available to children without affecting the internal mappings.
          </scm:Note>
        </notes>

        <path>source/spiralcraft/app/PlaceContext.java
        </path>
        
      </scm:Change>

      <scm:Change>
        <revision>-dev20
        </revision>
      
        <notes>
          <scm:Note>When a EnumToString receives an incorrect string, include
            the list of correct strings in the exception.
          </scm:Note>
        </notes>

        <path>source/spiralcraft/util/string/EnumToString.java
        </path>
        
      </scm:Change>

      <scm:Change>
        <revision>-dev20
        </revision>
      
        <notes>
          <scm:Note>Add support via static methods on Login.type for
            registration and automatic login.
          </scm:Note>
        </notes>

        <path>source/spiralcraft/security
        </path>
        
        <resources>
          <URI>Login.type.xml
          </URI>
          <URI>auth/LoginEntry.java
          </URI>
        </resources>

      </scm:Change>

      <scm:Change>
        <revision>-dev19
        </revision>
      
        <notes>
          <scm:Note>TaskRunner now supports setting context://code location so 
            that task definitions can use portable references.
          </scm:Note>
        </notes>

        <path>source/spiralcraft
        </path>
        
        <resources>
          <URI>service/ResourceContext.java
          </URI>
          <URI>task/TaskRunnerjava
          </URI>
        </resources>

      </scm:Change>

      <scm:Change>
        <revision>-dev19
        </revision>
      
        <notes>
          <scm:Note>Executor now supports setting context://code location so 
            that executable definitions can use portable references.
          </scm:Note>
        </notes>

        <path>source/spiralcraft/exec/Executor.java
        </path>

      </scm:Change>
      
      <scm:Change>
        <revision>-dev19
        </revision>
      
        <notes>
          <scm:Note>Convenience static methods to better support creating 
            channels from Java code that externalize/internalize data.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/data/task
        </path>
        
        <resources>
          <URI>Externalize.java
          </URI>
          <URI>Internalize.java
          </URI>
        </resources>
       
      </scm:Change>

      <scm:Change>
        <revision>-dev19
        </revision>
      
        <notes>
          <scm:Note>The thread context classloader in effect when loading
            resources must be the context classloader in effect when the loader
            was created in order to ensure that bundle resources made available
            from within the launcher are properly scoped to the correct
            package library.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/classloader/Loader.java
        </path>
       
      </scm:Change>

      <scm:Change>
        <revision>-dev19
        </revision>
      
        <notes>
          <scm:Note>The data directory name for a local store will is now based 
            on the store name. If null, the schema name will be used. This
            was reversed before.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/app/PluginContext.java
        </path>
       
      </scm:Change>

      <scm:Change>
        <revision>-dev18
        </revision>
      
        <notes>
          <scm:Note>The data directory name for a local store will is now based 
            on the store name. If null, the schema name will be used. This
            was reversed before.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/app/PlaceContext.java
        </path>
       
      </scm:Change>

      <scm:Change>
        <revision>-dev18
        </revision>
      
        <notes>
          <scm:Note>Fix problems where Declarables weren't getting 
            their DeclarationInfo in some circumstances when declared as
            inner assemblies.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/builder
        </path>
        
        <resources>
          <URI>Assembly.java
          </URI>
          <URI>AssemblyClass.java
          </URI>
          <URI>PropertySpecifier.java
          </URI>
        </resources>
       
      </scm:Change>

      <scm:Change>
        <revision>-dev18
        </revision>
      
        <notes>
          <scm:Note>Added Switch component
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/app
        </path>
        
        <resources>
          <URI>DispatchFilter.java
          </URI>
          <URI>components/Switch.java
          </URI>
          <URI>components/Case.java
          </URI>
          <URI>kit/StandardContainer.java
          </URI>
        </resources>
       
      </scm:Change>


      <scm:Change>
        <revision>-dev17
        </revision>
      
        <notes>
          <scm:Note>Fix compilation error due to unbounded type parameter
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/lang/util/LangUtil.java
        </path>
       
      </scm:Change>

      <scm:Change>
        <revision>-dev17
        </revision>
      
        <notes>
          <scm:Note>ClosureFocus always pins its subject last, after the 
            all its scope elements have been pinned.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/lang/spi/ClosureFocus.java
        </path>
       
      </scm:Change>

      <scm:Change>
        <revision>-dev17
        </revision>
      
        <notes>
          <scm:Note>Fix issue in FieldBinding vtable mechanism which caused
            subtype to bind to the wrong input.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/data/core/FieldImpl.java
        </path>
       
      </scm:Change>

      <scm:Change>
        <revision>-dev17
        </revision>
      
        <notes>
          <scm:Note>Better exception reporting for ChainableContext
            implementations.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/lang/kit
        </path>
        
        <resources>
          <URI>AbstractChainableContext.java
          </URI>
          <URI>ChainableContextAdapter.java
          </URI>
          <URI>ChainableContextualAdapter.java
          </URI>
        </resources>
       
      </scm:Change>

      <scm:Change>
        <revision>-dev17
        </revision>
      
        <notes>
          <scm:Note>Base component for DynamicProxyComponent which manages
            a child component within the State lifecycle.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/app/kit/DynamicProxyComponent.java
        </path>
       
      </scm:Change>

      <scm:Change>
        <revision>-dev17
        </revision>
      
        <notes>
          <scm:Note>Fix issue where Initialize message was sent twice- once
            by relay, and once for pre-initialization.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/app/kit/ExpansionContainer.java
        </path>
       
      </scm:Change>

      <scm:Change>
        <revision>-dev17
        </revision>
      
        <notes>
          <scm:Note>Dispatcher.getForwardPath() interface method to 
            pull remainder path for re-dispatch.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/app
        </path>
       
        <resources>
          <URI>Dispatcher.java
          </URI>
          <URI>kit/StandardDispatcher.java
          </URI>
        </resources>
      </scm:Change>

      <scm:Change>
        <revision>-dev17
        </revision>
      
        <notes>
          <scm:Note>Fix issue where plugins were chained in the wrong sequence
            with respect to the Place data space.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/app/PlaceContext.java
        </path>
       
      </scm:Change>
      
      
      <scm:Change>
        <revision>-dev16
        </revision>
      
        <notes>
          <scm:Note>A generic array type should always resolve to
            Object[].class when no runtime type information is available.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/util/lang/ClassUtil.java
        </path>
      </scm:Change>

      <scm:Change>
        <revision>-dev16
        </revision>
      
        <notes>
          <scm:Note>ArrayUtil.difference(), ArrayUtil.symmetricDifference()
            set operations for arrays
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/util/ArrayUtil.java
        </path>
      </scm:Change>

      <scm:Change>
        <revision>-dev16
        </revision>
      
        <notes>
          <scm:Note>MessageFormat.create() for safe creation of
            MessageFormat in code
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/text/MessageFormat.java
        </path>
      </scm:Change>

      <scm:Change>
        <revision>-dev16
        </revision>
      
        <notes>
          <scm:Note>Catch a RuntimeException and convert to a BuildException
            when resolving a PropertyBinding
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/builder/
        </path>
        
        <resources>
          <URI>BuildException.java
          </URI>
          <URI>PropertyBinding.java
          </URI>
        </resources>
        
      </scm:Change>

      <scm:Change>
        <revision>-dev15
        </revision>
      
        <notes>
          <scm:Note>Don't crash when asked to load a Builder Type for 
            multidimensional arrays.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/data/builder/BuilderType.java
        </path>
        
      </scm:Change>

      <scm:Change>
        <revision>-dev15
        </revision>
      
        <notes>
          <scm:Note>Expose DeclarationInfo.base for Focus aliasing
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/common/declare/DeclarationInfo.java
        </path>
        
      </scm:Change>

      <scm:Change>
        <revision>-dev14
        </revision>
      
        <notes>
          <scm:Note>Fix problem using jdk1.7 api for 1.6 target
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/meta/Version.java
        </path>
        
      </scm:Change>

      <scm:Change>
        <revision>-dev13
        </revision>
      
        <notes>
          <scm:Note>Fix problem where chain would seal when using insertNext()
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/lang/kit/AbstractChainableContext.java
        </path>
        
      </scm:Change>

      <scm:Change>
        <revision>-dev13
        </revision>
      
        <notes>
          <scm:Note>Fix NPE when a subtype has no extra fields
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/data/core/UnifiedFieldSet.java
        </path>
        
      </scm:Change>


      <scm:Change>
        <revision>-dev12
        </revision>
      
        <notes>
          <scm:Note>PathContext exposes the String form of its path
            for efficient comparison.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/app/PathContext.java
        </path>
        
      </scm:Change>

      <scm:Change>
        <revision>-dev12
        </revision>
      
        <notes>
          <scm:Note>ResourceCharSequence now accepts a Resource instead of
            a URI b/c URI resolution is a higher level concern.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/text/io/ResourceCharSequence.java
        </path>
        
      </scm:Change>

      <scm:Change>
        <revision>-dev12
        </revision>
      
        <notes>
          <scm:Note>Package now has static methods to search for existing
            resources.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/vfs/Package.java
        </path>
        
      </scm:Change>

      <scm:Change>
        <revision>-dev11
        </revision>
      
        <notes>
          <scm:Note>New append method in ArrayUtil.java that accepts a 
            component type and creates a new array if it doesn't exist.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/util/ArrayUtil.java
        </path>
        
      </scm:Change>
      
      <scm:Change>
        <revision>-dev11
        </revision>

        <notes>
          <scm:Note>Add StreamPump and StreamEvent functionality to IO package
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/io
        </path>
        
        <resources>
          <URI>StreamEvent.java
          </URI>
          <URI>StreamListener.java
          </URI>
          <URI>StreamListenerSupport.java
          </URI>
          <URI>StreamPump.java
          </URI>
        </resources>
      </scm:Change>

      <scm:Change>
        <revision>-dev11
        </revision>

        <notes>
          <scm:Note>Bind to Void instead of throwing an exception to permit
            certain valid operations
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/lang/parser
        </path>
        
        <resources>
          <URI>ContextNode.java
          </URI>
          <URI>FocusNode.java
          </URI>
        </resources>
      </scm:Change>

      <scm:Change>
        <revision>-dev11
        </revision>

        <notes>
          <scm:Note>Factored Application (root Component) functionality out
            of Daemon (Executable interface).
          </scm:Note>
          <scm:Note>An Application can now have a PlaceContext
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/service
        </path>
        
        <resources>
          <URI>Application.java
          </URI>
          <URI>Daemon.java
          </URI>
        </resources>
      </scm:Change>

      <scm:Change>
        <revision>-dev11
        </revision>

        <notes>
          <scm:Note>Generic KeyValue class for map-related functionality
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/util/KeyValue.java
        </path>
      </scm:Change>

      <scm:Change>
        <revision>-dev11
        </revision>

        <notes>
          <scm:Note>Generic Listener framework, in util package for now. 
            Incomplete/Experimental
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/util/listener
        </path>
        
        <resources>
          <URI>Listener.java
          </URI>
          <URI>ListenerSupport.java
          </URI>
        </resources>
      </scm:Change>

      <scm:Change>
        <revision>-dev11
        </revision>

        <notes>
          <scm:Note>URIUtil.encodeURIPath(String path) encodes a path string
            to a value that conforms to the path syntax of a hierachical URI
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/util/URIUtil.java
        </path>
      </scm:Change>

      <scm:Change>
        <revision>-dev11
        </revision>

        <notes>
          <scm:Note>The experimental automatic Task chain nesting functionality
            has been deprecated due to poor cost/benefit.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft
        </path>
        
        <resources>
          <URI>data/task/Collect.java
          </URI>
          <URI>task/Chain.java
          </URI>
          <URI>task/If.java
          </URI>
          <URI>task/TaskRunner.java
          </URI>
        </resources>
      </scm:Change>


      <scm:Change>
        <revision>-dev11
        </revision>

        <notes>
          <scm:Note>ParseXML can be used to read from a contextual resource
             when constructed with single Type or Reflector argument
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/data/sax/ParseXml.java
        </path>
      </scm:Change>
        
        

      <scm:Change>
        <revision>-dev11
        </revision>
        
        <notes>
          <scm:Note>All Components are Declarable and Reflectable
          </scm:Note>
          <scm:Note>AbstractController.getState() hides mechanics of 
            StateReferenceHandler thread local
          </scm:Note>
          <scm:Note>Support path based Call mechanism into component
            hierarchy to provide external API.
          </scm:Note>
          <scm:Note>Added infrastructure to organize CommandFactories into a 
            CallInterface that processes Calls.
          </scm:Note>
          <scm:Note>Fix and enhance support for expansion/set based components
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft
        </path>
        
        <resources>
          <URI>app/Component.java
          </URI>
          <URI>app/State.java
          </URI>
          <URI>app/kit/AbstractComponent.java
          </URI>
          <URI>app/kit/AbstractController.java
          </URI>
          <URI>app/CallContext.java
          </URI>
          <URI>app/CallMessage.java
          </URI>
          <URI>app/kit/CallHandler.java
          </URI>
          <URI>app/kit/StandardContainer.java
          </URI>
          <URI>app/components/SetManager.java
          </URI>
          <URI>app/kit/AbstractExpansionController.java
          </URI>
          <URI>app/kit/ExpansionContainer.java
          </URI>
          <URI>app/kit/ExpansionState.java
          </URI>
          <URI>app/kit/SimpleState.java
          </URI>
          <URI>app/kit/ThreadLocalHandler.java
          </URI>
          <URI>command/AbstractCommandFactory.java
          </URI>
          <URI>command/Call.java
          </URI>
          <URI>command/CallInterface.java
          </URI>
          <URI>command/CommandFactory.java
          </URI>
          <URI>command/CommandProcessor.java
          </URI>
          <URI>command/SimpleCall.java
          </URI>
          <URI>command/SimpleCommandFactory.java
          </URI>
          <URI>task/Scenario.java
          </URI>
        </resources>
      </scm:Change>

      <scm:Change>
        <revision>-dev11
        </revision>
        
        <notes>
          <scm:Note>OverlayRedirect is a Graft that provides support for
            directory overlays (default/fallback dir contents)
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/vfs/context/OverlayRedirect.java
        </path>
      </scm:Change>
      
      
      <scm:Change>
        <revision>-dev11
        </revision>
        
        <notes>
          <scm:Note>Enhancements to Store abstraction to re-use some XmlStore
            functionality for the SqlStore
          </scm:Note>
          <scm:Note>Abstracted Sequence logic to AbstractStoreSequence
          </scm:Note>
          <scm:Note>Fix bug in default binding for EquiJoin when created
            with the "field:=expr" syntax
          </scm:Note>
        </notes>
      
        <path>source/spiralcraft/data
        </path>
        
        <resources>
          <URI>access/kit/AbstractStoreSequence.java
          </URI>
          <URI>xml/XmlStore.java
          </URI>
          <URI>query/EquiJoin.java
          </URI>
        </resources>
        
      </scm:Change>

      <scm:Change>
        <revision>-dev11
        </revision>
        
        <notes>
          <scm:Note>Promote URI based application path mechanism to core
            component model from webui. 
          </scm:Note>
        </notes>
      
        <path>source/spiralcraft/app
        </path>
        
        <resources>
          <URI>PathContext.java
          </URI>
          <URI>PathContextMapping.java
          </URI>
        </resources>
        
      </scm:Change>
          
      <scm:Change>
        <revision>-dev11
        </revision>
        
        <notes>
          <scm:Note>When updating data that has unique constraints but no
            primary key (and thus no consistent Tuple identity), fix issue 
            where unique constraint fails erroneously by adding a system 
            identity comparison.
          </scm:Note>
        </notes>
      
        <path>source/spiralcraft/data/xml/XmlQueryable.java
        </path>
        
      </scm:Change>

      <scm:Change>
        <revision>-dev11
        </revision>
        
        <notes>
          <scm:Note>Enhanced the system for importing foreign XML formats
            to support a default mechanism for linking elements of the
            data tree via the FrameHandler.captureChildObject property
          </scm:Note>
        </notes>
      
        <path>source/spiralcraft/data/sax
        </path>
        
        <resources>
          <URI>AbstractFrameHandler.java
          </URI>
          <URI>AggregateFrame.java
          </URI>
          <URI>AggregateFrameHandler.java
          </URI>
          <URI>ForeignDataHandler.java
          </URI>
          <URI>FrameHandler.java
          </URI>
          <URI>RecursiveFrame.java
          </URI>
          <URI>RootFrame.java
          </URI>
        </resources>
        
      </scm:Change>

      <scm:Change>
        <revision>-dev11
        </revision>
        
        <notes>
          <scm:Note>Moved the data.access inheritable attributes system to a 
            common package for use by any subsystem.
          </scm:Note>
        </notes>
      
        <path>source/spiralcraft
        </path>
        
        <resources>
          <URI>common/attributes/AbstractAttributeContext.java
          </URI>
          <URI>common/attributes/Attribute.java
          </URI>
          <URI>common/attributes/AttributeSet.java
          </URI>
          <URI>data/Type.java
          </URI>
          <URI>data/access/Entity.java
          </URI>
          <URI>data/access/EntityField.java
          </URI>
          <URI>data/access/IndexableText.java
          </URI>
          <URI>data/access/Schema.java
          </URI>
          <URI>data/access/SchemaAttribute.java
          </URI>
          <URI>data/access/SchemaMetaObject.java
          </URI>
        </resources>
        
      </scm:Change>

      <scm:Change>
        <revision>-dev11
        </revision>
        
        <notes>
          <scm:Note>VFS Query task Operations now provide an overridable
            method to retrieve the content of the resource
          </scm:Note>
        </notes>
      
        <path>source/spiralcraft/vfs/task/Query.java
        </path>
        
      </scm:Change>

      <scm:Change>
        <revision>-dev11
        </revision>
        
        <notes>
          <scm:Note>Add LangUtil methods findInstance, assertInstance,
            findChannel, assertChannel that accept URIs
          </scm:Note>
        </notes>
      
        <path>source/spiralcraft/lang/util/LangUtil.java
        </path>
        
      </scm:Change>

      <scm:Change>
        <revision>-dev11
        </revision>
        
        <notes>
          <scm:Note>ByteArrayResource.copyOf(InputStream)
          </scm:Note>
        </notes>
      
        <path>source/spiralcraft/vfs/util/ByteArrayResource.java
        </path>
        
      </scm:Change>

      <scm:Change>
        <revision>-dev11
        </revision>
        
        <notes>
          <scm:Note>URLResource now exposes openConnection
          </scm:Note>
        </notes>
      
        <path>source/spiralcraft/vfs/url/URLResource.java
        </path>
        
      </scm:Change>

      <scm:Change>
        <revision>-dev11
        </revision>
        
        <notes>
          <scm:Note>Executor now accepts a --config argument to specify
            the context://config location
          </scm:Note>
          <scm:Note>Executor now defines context://data and accepts a --data
            argument to specify the context://data location
          </scm:Note>
        </notes>
      
        <path>source/spiralcraft/exec/Executor.java
        </path>
        
      </scm:Change>

      <scm:Change>
        <revision>-dev11
        </revision>
        
        <notes>
          <scm:Note>Fix NPE due to Path.parent returning null
          </scm:Note>
        </notes>
      
        <path>source/spiralcraft/data/builder/BuilderTypeFactory.java
        </path>
        
      </scm:Change>

      <scm:Change>
        <revision>-dev11
        </revision>
        
        <notes>
          <scm:Note>Make sure that AssemblyLoader can also locate
            raw Java classes using the package inheritance mechanism
          </scm:Note>
          <scm:Note>Add additional exception handling to builder to
            trace .assy.xml file composition.
          </scm:Note>
          <scm:Note>Use 'x' attribute (instead of 'expression' attribute) in
            PropertySpecifier XML to provide
            a bind-time expression for the property
          </scm:Note>
        </notes>
      
        <path>source/spiralcraft/builder
        </path>
        
        <resources>
          <URI>AssemblyLoader.java
          </URI>
          <URI>AssemblyClass.java
          </URI>
          <URI>BuildException.java
          </URI>
          <URI>PropertySpecifier.java
          </URI>
        </resources>
      </scm:Change>

      <scm:Change>
        <revision>-dev11
        </revision>
        
        <notes>
          <scm:Note>Add findById static method to Login type
          </scm:Note>
        </notes>
      
        <path>source/spiralcraft/security/Login.type.xml
        </path>
        
      </scm:Change>

      <scm:Change>
        <revision>-dev11
        </revision>
        
        <notes>
          <scm:Note>Allow for programmatic mapping of VFS contextual mount 
            points
          </scm:Note>
        </notes>
      
        <path>source/spiralcraft/vfs/context
        </path>
        
        <resources>
          <URI>Authority.java
          </URI>
          <URI>Redirect.java
          </URI>
        </resources>
        
      </scm:Change>

      <scm:Change>
        <revision>-dev11
        </revision>
        
        <notes>
          <scm:Note>Added Resource.resolve(Path) and Resource.getURL()
          </scm:Note>
          <scm:Note>Fix NPEs in some corner-case path computation logic 
            in JarFileResource
          </scm:Note>
        </notes>
      
        <path>source/spiralcraft/vfs
        </path>
        
        <resources>
          <URI>Resource.java
          </URI>
          <URI>classpath/ClasspathResource.java
          </URI>
          <URI>jar/JarFileResource.java
          </URI>
          <URI>ovl/OverlayResource.java
          </URI>
          <URI>spi/AbstractResource.java
          </URI>
          <URI>util/ResourceWrapper.java
          </URI>
        </resources>
        
      </scm:Change>

      <scm:Change>
        <revision>-dev11
        </revision>
        
        <notes>
          <scm:Note>Path.subPath(0) returns non-absolute identity path
          </scm:Note>
          <scm:Note>Path.toURI() encodes a path into a URI
          </scm:Note>
        </notes>
      
        <path>source/spiralcraft/util/Path.java
        </path>
        
      </scm:Change>

      <scm:Change>
        <revision>-dev11
        </revision>
        
        <notes>
          <scm:Note>Authenticator and AuthSession are now set up for use
            outside a specialized UI container (e.g. inside a PlaceContext)
          </scm:Note>
        </notes>
      
        <path>source/spiralcraft/security/auth
        </path>
        
        <resources>
          <URI>Authenticator.java
          </URI>
          <URI>AuthSession.java
          </URI>
        </resources>
      </scm:Change>

      <scm:Change>
        <revision>-dev11
        </revision>
        
        <notes>
          <scm:Note>Integrate bundles into the executable environment.
          </scm:Note>
          <scm:Note>Define context://run to point to the working directory
            of the VM process or Executable isolate.
          </scm:Note>
        </notes>
      
        <path>source/spiralcraft/exec/Executor.java
        </path>
      </scm:Change>

      <scm:Change>
        <revision>-dev11
        </revision>
        
        <notes>
          <scm:Note>Type.toXMLResource(Resource resource,data) method provides
            a convenient way to persist an object to an XML resource
            in the canonical format.
          </scm:Note>
          <scm:Note>Fix ReflectionScheme so that the "class" property is 
            transient.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/data
        </path>
        
        <resources>
          <URI>Type.java
          </URI>
          <URI>reflect/ReflectionScheme.java
          </URI>
        </resources>
      </scm:Change>
      
      
      <scm:Change>
        <revision>-dev11
        </revision>
        
        <notes>
          <scm:Note>Make sure that the CommandScheduler uses the thread
            context classloader it was instantiated with
          </scm:Note>
        </notes>
      
        <path>source/spiralcraft/command/CommandScheduler.java
        </path>
      </scm:Change>
      
      <scm:Change>
        <revision>-dev11
        </revision>
        
        <notes>
          <scm:Note>New "bundle" packaging mechanism provides
            a more direct system for managing sets of resources that are
            integrated into various parts of an application.            
          </scm:Note>
          <scm:Note>added ClassLoaderLocal.getNearestInstance() method for when
            the associated objects are sparsely allocated
          </scm:Note>
        </notes>
      
        <path>source/spiralcraft/
        </path>
        
        <resources>
          <URI>bundle/Bundle.java
          </URI>
          <URI>bundle/BundleClassLoader.java
          </URI>
          <URI>bundle/BundleException.java
          </URI>
          <URI>bundle/Library.java
          </URI>
          <URI>bundle/Package.java
          </URI>
          <URI>vfs/Resolver.java
          </URI>
          <URI>vfs/bundle/BundleResource.java
          </URI>
          <URI>vfs/bundle/BundleResourceFactory.java
          </URI>
          <URI>util/ClassLoaderLocal.java
          </URI>
        </resources>
        
      </scm:Change> 

      <scm:Change>
        <revision>-dev11
        </revision>
        
        <notes>
          <scm:Note>Update classloader components to deal with loading from
            arbitrary VFS resources  
          </scm:Note>
          <scm:Note>Intercept ClassNotFound exception from the parent 
            ClassLoader in order to properly load local non-precedent
            resources.
          </scm:Note>
          <scm:Note>Make sure that the Loader works even when it is not
            'started', even if this is inefficient (jars must be re-opened on
            every call)
          </scm:Note>
        </notes>
      
        <path>source/spiralcraft/classloader
        </path>
        
        <resources>
          <URI>Archive.java
          </URI>
          <URI>FileArchive.java
          </URI>
          <URI>Loader.java
          </URI>
          <URI>ResourceArchive.java
          </URI>
          <URI>JarArchive.java
          </URI>
        </resources>
        
      </scm:Change> 

      <scm:Change>
        <revision>-dev11
        </revision>
        
        <notes>
          <scm:Note>Assembly now adds all supertype URIs as focus aliases so 
            they can be inspected by debugging code.
          </scm:Note>
        </notes>
      
        <path>source/spiralcraft/builder/Assembly.java
        </path>
        
      </scm:Change> 

      <scm:Change>
        <revision>-dev11
        </revision>
        
        <notes>
          <scm:Note>Enhancements to PlaceContext to detect a new installation
            or an upgrade and provide hooks for application code to handle
            these scenarios.
          </scm:Note>
          <scm:Note>Allow Stores to be added directly to a PlaceContext
          </scm:Note>
          <scm:Note>ChainableContext now supports inserting a chain
            immediately after a link using insertNext(ChainableContext)
          </scm:Note>
        </notes>
      
        <path>source/spiralcraft
        </path>
        
        <resources>
          <URI>app/PlaceContext.java
          </URI>
          <URI>app/PlaceStatus.java
          </URI>
          <URI>lang/ChainableContext.java
          </URI>
          <URI>lang/kit/AbstractChainableContext.java
          </URI>
          <URI>meta/Version.java
          </URI>
        </resources>
      </scm:Change> 

      <scm:Change>
        <revision>-dev11
        </revision>
        
        <notes>
          <scm:Note>Add LangUtil.constantChannel to simplify the creation
            of a constant channel for a component
          </scm:Note>
        </notes>
      
        <path>source/spiralcraft/
        </path>
       
        <resources>
          <URI>app/kit/AbstractComponent.java
          </URI>
          <URI>data/access/kit/AbstractStore.java
          </URI>
          <URI>data/access/kit/EntityBinding.java
          </URI>
          <URI>data/lang/TupleDelegate.java
          </URI>
          <URI>data/task/Edit.java
          </URI>
          <URI>data/xml/XmlStore.java
          </URI>
          <URI>lang/BaseFocus.java
          </URI>
          <URI>lang/FocusWrapper.java
          </URI>
          <URI>lang/kit/AbstractReflector.java
          </URI>
          <URI>lang/kit/SelectorContext.java
          </URI>
          <URI>lang/kit/members/MetaChannelMember.java
          </URI>
          <URI>lang/parser/ExpressionLiteralNode.java
          </URI>
          <URI>lang/parser/MetaNode.java
          </URI>
          <URI>lang/spi/ViewCache.java
          </URI>
          <URI>lang/util/LangUtil.java
          </URI>
          <URI>sax/ElementRenderer.java
          </URI>
          <URI>task/Value.java
          </URI>
          <URI>vfs/context/Mirror.java
          </URI>
        </resources>
                  
      </scm:Change>

      <scm:Change>
        <revision>-dev10
        </revision>
        
        <notes>
          <scm:Note>Add sanity check to Package resolution when specified
            search resource exists but is not a container
          </scm:Note>
        </notes>
      
         <path>source/spiralcraft/vfs/Package.java
         </path>
                  
      </scm:Change>

      <scm:Change>
        <revision>-dev10
        </revision>
        
        <notes>
          <scm:Note>Fix exception when searching for resources when a jar
            on the classpath is located on a path that contains characters
            invalid for a URI. 
          </scm:Note>
          <scm:Note>Fix miscellaneous improper URI encoding bugs
          </scm:Note>
        </notes>
      
         <path>source/spiralcraft
         </path>
         
         <resources>
           <URI>vfs/jar/JarResourceFactory.java
           </URI>
           <URI>vfs/jar/JarFileResourceFactory.java
           </URI>
           <URI>util/URIUtil.java
           </URI>
         </resources>
         
      </scm:Change>

      <scm:Change>
        <revision>-dev10
        </revision>
        
        <notes>
          <scm:Note>Add onCheckout and onCheckin sinks to allow the application
            to perform actions on the checked-out/checked-in resource 
            before it is given to the client / made available in the pool
            respectively
          </scm:Note>
        </notes>
      
         <path>source/spiralcraft/pool/Pool.java
         </path>
         
      </scm:Change>

      <scm:Change>
        <revision>-dev9
        </revision>
        
        <notes>
          <scm:Note>Fix NPE in OverlayResource.getChild()
          </scm:Note>
        </notes>
      
         <path>source/spiralcraft/vfs/ovl/OverlayResource.java
         </path>
         
      </scm:Change>

      <scm:Change>
        <revision>-dev9
        </revision>
        
        <notes>
          <scm:Note>Path.asContainer() method adds a trailing delimiter to
            a path if required
          </scm:Note>
        </notes>
      
         <path>source/spiralcraft/util/Path.java
         </path>
         
      </scm:Change>

     
      <scm:Change>
        <revision>-dev9
        </revision>
        
        <notes>
          <scm:Note>Build type conversion option into Binding to facilitate
            type coercions in safe scenarios
          </scm:Note>
        </notes>
      
         <path>source/spiralcraft/lang
         </path>
         
         <resources>
           <URI>Binding.java
           </URI>
           <URI>spi/ProxyChannel.java
           </URI>
         </resources>
      </scm:Change>

      <scm:Change>
        <revision>-dev8
        </revision>
      
        <notes>
          <scm:Note>Attempt to provide a sensible default for baseResourceURI
            and force a bind failure if the attempt was not successful.
          </scm:Note>
          <scm:Note>AbstractStore is now Declarable, to assist in exception
            reporting.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/data
        </path>
        
        <resources>
          <URI>access/kit/AbstractStore.java
          </URI>
          <URI>xml/XmlStore.java
          </URI>
        </resources>
        
        
      </scm:Change>

      <scm:Change>
        <revision>-dev7
        </revision>
      
        <notes>
          <scm:Note>Make sure that the DeclarationContext is pushed when
            Expressions are parsed by spiralcraft.builder to provide 
            traceback info.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft
        </path>
        
        <resources>
          <URI>builder/PropertyBinding.java
          </URI>
          <URI>builder/PropertySpecifier.java
          </URI>
          <URI>common/declare/DeclarationContext.java
          </URI>
        </resources>
        
        
      </scm:Change>

      <scm:Change>
        <revision>-dev7
        </revision>
      
        <notes>
          <scm:Note>Add "spiralcraft.lang.strictDeprecation" contextual
            property to throw an exception when a deprecated feature is
            used.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/lang/ExpressionParser.java
        </path>
        
        
      </scm:Change>

      <scm:Change>
        <revision>-dev7
        </revision>
      
        <notes>
          <scm:Note>Implement map literals using a struct that composed 
            anonymous members, where each member is a pair (a struct with
            2 anonymous members).
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/lang
        </path>
        
        <resources>
          <URI>MapDecorator.java
          </URI>
          <URI>kit/MapLookupChannel.java
          </URI>
          <URI>parser/StructNode.java
          </URI>
        </resources>
        
      </scm:Change>
      
      <scm:Change>
        <revision>-dev7
        </revision>
      
        <notes>
          <scm:Note>Changed named struct syntax to put name declaration
            before struct definition instead of inside it
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/lang/ExpressionParser.java
        </path>
        
      </scm:Change>

      <scm:Change>
        <revision>-dev7
        </revision>
      
        <notes>
          <scm:Note>Utility method for creating a set of Archives from 
            a library resource
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/classloader/Archive.java
        </path>
        
      </scm:Change>

      <scm:Change>
        <revision>-dev6
        </revision>
      
        <notes>
          <scm:Note>Fix NPE when getting a child of the root path
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/vfs/classpath/ClasspathResource.java
        </path>
        
      </scm:Change>

      <scm:Change>
        <revision>-dev6
        </revision>
      
        <notes>
          <scm:Note>Type.fromXMLResource(Resource resource) method provides
            a convenient way to instantiate an object from an XML resource
            in the canonical format.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/data
        </path>
        
        <resources>
          <URI>Type.java
          </URI>
          <URI>reflect/AssemblyType.java
          </URI>
        </resources>
      </scm:Change>

      <scm:Change>
        <revision>-dev6
        </revision>
      
        <notes>
          <scm:Note>Executor now adds context://config to the environment
            using the spiralcraft.config.id and/or the spiralcraft.config.uri 
            property.           
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/exec/Executor.java
        </path>
      </scm:Change>

      <scm:Change>
        <revision>-dev6
        </revision>
      
        <notes>
          <scm:Note>New URIUtil.replaceScheme() method
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/util/URIUtil.java
        </path>
      </scm:Change>

      <scm:Change>
        <revision>-dev6
        </revision>
      
        <notes>
          <scm:Note>spiralcraft.builder now uses the Package mechanism to 
            locate assy.xml resources.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/builder/AssemblyLoader.java
        </path>
      </scm:Change>
      
      <scm:Change>
        <revision>-dev6
        </revision>
      
        <notes>
          <scm:Note>Standardized on a new Package mechanism to provide
            directory metadata to VFS clients, including an initial
            implementation of VFS overlays.
          </scm:Note>
          <scm:Note>Fixed ClasspathResource.exists() to call 
            ClassLoader.getResource()
          </scm:Note>
          <scm:Note>Added isContextual() method to Resource interface
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/vfs
        </path>
        
        <resources>
          <URI>Package.java
          </URI>
          <URI>Resolver.java
          </URI>
          <URI>Resource.java
          </URI>
          <URI>classpath/ClasspathResource.java
          </URI>
          <URI>context/ContextResource.java
          </URI>
          <URI>spi/AbstractResource.java
          </URI>
          <URI>ovl/OverlayContext.java
          </URI>
          <URI>ovl/OverlayResource.java
          </URI>
          <URI>ovl/OverlayResourceFactory.java
          </URI>
          <URI>util/NullResource.java
          </URI>
        </resources>
      </scm:Change>

      <scm:Change>
        <revision>-dev5
        </revision>
      
        <notes>
          <scm:Note>Create new experimental OverlayResource to implement
            VFS directory inheritance hierarchies.
          </scm:Note>
          <scm:Note>Removed deprecated Container.asResource() method
          </scm:Note>
          <scm:Note>Implement delete(), renameTo() and getParent() in
            AbstractResource
          </scm:Note>
          <scm:Note>New NullResource for use as a stub
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/vfs
        </path>
        
        <resources>
          <URI>Container.java
          </URI>
          <URI>Resolver.java
          </URI>
          <URI>classpath/ClasspathResource.java
          </URI>
          <URI>ovl/OverlayContext.java
          </URI>
          <URI>ovl/OverlayResource.java
          </URI>
          <URI>ovl/OverlayResourceFactory.java
          </URI>
          <URI>file/FileResource.java
          </URI>
          <URI>jar/JarFileResource.java
          </URI>
          <URI>spi/AbstractResource.java
          </URI>
          <URI>util/NullResource.java
          </URI>
        </resources>
        
      </scm:Change>

      <scm:Change>
        <revision>-dev5
        </revision>
      
        <notes>
          <scm:Note>New concat method in ArrayUtil.java
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/util/ArrayUtil.java
        </path>
        
      </scm:Change>
    
      <scm:Change>
        <revision>-dev5
        </revision>
      
        <notes>
          <scm:Note>New methods addUnencodedPathSegment and toParentPath
            in URIUtil
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/util/URIUtil.java
        </path>
        
      </scm:Change>

      <scm:Change>
        <revision>-dev5
        </revision>
      
        <notes>
          <scm:Note>Path.getParent() now returns null for a root or empty
            path.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/util/Path.java
        </path>
        
      </scm:Change>


      <scm:Change>
        <revision>-dev5
        </revision>
      
        <notes>
          <scm:Note>Add more synchronization to XmlStore.XmlSequence to
            ensure that no values are changed during allocation or deallocation
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/data/xml/XmlStore.java
        </path>
        
      </scm:Change>

      <scm:Change>
        <revision>-dev5
        </revision>
      
        <notes>
          <scm:Note>An Assembly object can now be constructed via an 
            an expression in the "x" attribute of the assembly tag.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/
        </path>
        
        <resources>
          <URI>builder/Assembly.java
          </URI>
          <URI>builder/AssemblyClass.java
          </URI>
          <URI>builder/AssemblyLoader.java
          </URI>
          <URI>data/reflect/AssemblyType.java
          </URI>
        </resources>
        
      </scm:Change>

      <scm:Change>
        <revision>-dev4
        </revision>
      
        <notes>
          <scm:Note>A new IfBound language function provides a way to
            conditionally bind an expression. If the expression fails to bind,
            the function will bind to a null value of the optionally supplied
            type and will not otherwise abort the binding process.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/lang/functions/IfBound.java
        </path>
        
      </scm:Change>

      <scm:Change>
        <revision>-dev4
        </revision>
      
        <notes>
          <scm:Note>A new DynamicHandler class provides a way to add
            MessageHandlers during the binding of descendant components. This
            is used in webui to add Script emitters in the page head for 
            scripts required by Components in the Page's body.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft
        </path>
        
        <resources>
          <URI>app/kit/DynamicHandler.java
          </URI>
          <URI>util/tree/Order.java
          </URI>
        </resources>
      </scm:Change>

      <scm:Change>
        <revision>-dev4
        </revision>
      
        <notes>
          <scm:Note>The Component interface now exposes the getId() property,
            which provides a standard way to refer to one of a Component's
            children. 
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/app
        </path>
        
        <resources>
          <URI>Component.java
          </URI>
          <URI>kit/AbstractComponent.java
          </URI>
        </resources>
      </scm:Change>

      <scm:Change>
        <revision>-dev4
        </revision>
      
        <notes>
          <scm:Note>Move the Scaffold interface to spiralcraft.app, now
            that the textgen/webui and the gui models are converging.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/
        </path>
        
        <resources>
          <URI>app/Scaffold.java
          </URI>
          <URI>scaffold/Scaffold.java
          </URI>
        </resources>
      </scm:Change>

      <scm:Change>
        <revision>-dev3
        </revision>
      
        <notes>
          <scm:Note>Make sure that Expression registers a StringConverter now
            that the constructor is missing
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/lang
        </path>
        
        <resources>
          <URI>Expression.java
          </URI>
          <URI>reflect/Initializer.java
          </URI>
        </resources>
      </scm:Change>

      <scm:Change>
        <revision>-dev2
        </revision>
      
        <notes>
          <scm:Note>ClassUtil now has an equals(a,b) method to reduce
            null check verbosity
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/util/lang/ClassUtil.java
        </path>
      </scm:Change>

      <scm:Change>
        <revision>-dev2
        </revision>
      
        <notes>
          <scm:Note>ReferencePool now accepts Sinks to allow clients to be
            alerted when items are matched and created.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/util/ReferencePool.java
        </path>
      </scm:Change>
      
      <scm:Change>
        <revision>-dev2
        </revision>
      
        <notes>
          <scm:Note>Fixed overly optimistic Expression caching issue which
            prevented namespace definition changes from being recognized.
          </scm:Note>
          <scm:Note>Expressions are now constructed using static methods and 
            cached using a ReferencePool instead of by using their textual 
            representation as a key.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/
        </path>
        
        <resources>
          <URI>lang/Expression.java
          </URI>
          <URI>lang/kit/Computation.java
          </URI>
          <URI>lang/parser/AbsoluteFocusNode.java
          </URI>
          <URI>lang/parser/AssignmentNode.java
          </URI>
          <URI>lang/parser/BinaryOpNode.java
          </URI>
          <URI>lang/parser/BindingNode.java
          </URI>
          <URI>lang/parser/ContainsNode.java
          </URI>
          <URI>lang/parser/ExpressionLiteralNode.java
          </URI>
          <URI>lang/parser/ExpressionParser.java
          </URI>
          <URI>lang/parser/LiteralNode.java
          </URI>
          <URI>lang/parser/LogicalNode.java
          </URI>
          <URI>lang/parser/MapReduceNode.java
          </URI>
          <URI>lang/parser/MethodCallNode.java
          </URI>
          <URI>lang/parser/Node.java
          </URI>
          <URI>lang/parser/NumericNegateNode.java
          </URI>
          <URI>lang/parser/ObjectLiteralNode.java
          </URI>
          <URI>lang/parser/OpNode.java
          </URI>
          <URI>lang/parser/RangeNode.java
          </URI>
          <URI>lang/parser/StructNode.java
          </URI>
          <URI>lang/parser/SubcontextNode.java
          </URI>
          <URI>lang/parser/SubscriptNode.java
          </URI>
          <URI>lang/parser/TypeFocusNode.java
          </URI>
          <URI>lang/spi/ReduceProjector.java
          </URI>
          <URI>lang/util/DictionaryBinding.java
          </URI>
          <URI>data/query/EquiJoin.java
          </URI>
          <URI>data/query/Selection.java
          </URI>
          <URI>data/core/ProjectionImpl.java
          </URI>
        </resources>
      </scm:Change>

      <scm:Change>
        <revision>-dev2
        </revision>
      
        <notes>
          <scm:Note>Expanded utilities for for debugging IO streams, including
            a byte[] to String converter that replaces all non-7-bit
            characters with a "?" symbol.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/
        </path>
        
        <resources>
          <URI>io/DebugInputStream.java
          </URI>
          <URI>io/DebugOutputStream.java
          </URI>
          <URI>io/TappedOutputStream.java
          </URI>
          <URI>util/string/ByteArrayTo7BitAscii.java
          </URI>
        </resources>
      </scm:Change>
          
      <scm:Change>
        <revision>-dev2
        </revision>
      
        <notes>
          <scm:Note>Fix URLResource.delete()
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/vfs/url/URLResource.java
        </path>
      </scm:Change>

      <scm:Change>
        <revision>-dev2
        </revision>
      
        <notes>
          <scm:Note>Created an UpdaterService to batch incoming data and
            insert it into a space periodically.
          </scm:Note>
          <scm:Note>Factored out kit class for generic data batching operations
            and updated service infrastructure to facilitate integration of 
            this kind of functionality.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft
        </path>
        
        <resources>
          <URI>data/kit/AbstractBatchService.java
          </URI>
          <URI>data/util/SummarizerService.java
          </URI>
          <URI>data/util/UpdaterService.java
          </URI>
          <URI>service/SchedulerService.java
          </URI>
          <URI>service/ServiceGroup.java
          </URI>
        </resources>
        
      </scm:Change>

      <scm:Change>
        <revision>-dev2
        </revision>
      
        <notes>
          <scm:Note>Created spiralcraft.common.callable package for
            single-method interfaces designed to be used as functor objects.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft
        </path>
        
        <resources>
          <URI>common/callable/Sink.java
          </URI>
          <URI>common/callable/UnaryFunction.java
          </URI>
          <URI>common/UnaryFunction.java
          </URI>
          <URI>lang/kit/Callable.java
          </URI>
          <URI>lang/spi/ContextualFunction.java
          </URI>
        </resources>
        
      </scm:Change>

      <scm:Change>
        <revision>-dev1
        </revision>
      
        <notes>
          <scm:Note>Suppress the exception thrown by RemoveShutdownHook
            when shutdown is in progress.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/io/OutputAgent.java
        </path>
        
      </scm:Change>

      <scm:Change>
        <revision>-dev1
        </revision>
      
        <notes>
          <scm:Note>The focus resolution mechanism in spiralcraft.lang now
            interrogates the DeclarationInfo of a constant Declarable object
            for a URI match, allowing for the use of builder assembly URIs
            for object resolution.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/lang/BaseFocus.java
        </path>
        
      </scm:Change>

      <scm:Change>
        <revision>-dev1
        </revision>
      
        <notes>
          <scm:Note>The contextual property for setting the static log level
            of a class is now [classname]+".logLevel"
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/log/ClassLog.java
        </path>
        
      </scm:Change>

      <scm:Change>
        <revision>-dev1
        </revision>
      
        <notes>
          <scm:Note>Ensure that Copy exclusion filter accounts for fixed
            path prefix.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/vfs
        </path>
        
        <resources>
          <URI>task/Copy.java
          </URI>
          <URI>filters/PatternFilter.java
          </URI>
        </resources>
      </scm:Change>

      <scm:Change>
        <revision>-dev1
        </revision>
      
        <notes>
          <scm:Note>Provide a means for storing/retrieving prefix mappings in
            bulk
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/common/namespace/StandardPrefixResolver.java
        </path>
      </scm:Change>

      <scm:Change>
        <revision>-dev1
        </revision>
      
        <notes>
          <scm:Note>Provide a component for managing UI preference data based
            a PathTree
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/
        </path>
        
        <resources>
          <URI>ui/PreferenceTree.java
          </URI>
          <URI>tree/AbstractNode.java
          </URI>
          <URI>tree/LinkedTree.java
          </URI>
          <URI>tree/PathTree.java
          </URI>
          <URI>tree/Tree.java
          </URI>
          <URI>sax/Characters.java
          </URI>
          <URI>sax/Element.java
          </URI>
          <URI>data/sax/DataWriter.java
          </URI>
        </resources>
      </scm:Change>

      <scm:Change>
        <revision>-dev1
        </revision>
      
        <notes>
          <scm:Note>Sequence has get(int) method
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/util/Sequence.java
        </path>
      </scm:Change>

      <scm:Change>
        <revision>-dev1
        </revision>
      
        <notes>
          <scm:Note>Orientation is a common UI concept.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/ui/Orientation.java
        </path>
      </scm:Change>

      <scm:Change>
        <revision>-dev1
        </revision>
      
        <notes>
          <scm:Note>SimpleChannel now queries Reflectable interface when
            constructed with an object as a constant.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/lang/spi/SimpleChannel.java
        </path>
      </scm:Change>
            
      <scm:Change>
        <revision>-dev1
        </revision>
      
        <notes>
          <scm:Note>Public fields are now included in signatures of Java
            classes.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/lang/reflect/BeanReflector.java
        </path>
      </scm:Change>


      <scm:Change>
        <revision>-dev1
        </revision>
      
        <notes>
          <scm:Note>Daemon, as a root component, now manages its own state tree
            and dispatches Initialize and Dispose messages on start/stop 
            respectively.
          </scm:Note>
          <scm:Note>Daemon no longer makes itself the subject of the Focus
            chain because it is an infrastructure component, and not part of any
            application specific model.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/service/Daemon.java
        </path>
      </scm:Change>

      <scm:Change>
        <revision>-dev1
        </revision>
      
        <notes>
          <scm:Note>Updates to component model to support the efficient routing
            of notifications to subscribed descendants from both in-tree and
            external components.
          </scm:Note>
          <scm:Note>The expression in a TriggerHandler now has access to the
            message content. Message.Type now contains metadata to support
            this.
          </scm:Note>
          <scm:Note>AbstractComponent and all subtypes are now Declarable
            for straightforward resolution.
          </scm:Note>
          <scm:Note>AbstractComponent subtypes support automatic state creation
            when the State is a public class and specified in the subtype. 
          </scm:Note>
          <scm:Note>Pipe supports the asynchronous sending of messages to 
            ensure that operations are run on an appropriate thread.
          </scm:Note>
          <scm:Note>New AbstractModelComponent
            creates an inheritance line for publishing application model
            objects into a component tree. Initial subtype is a Session
            component which retrieves a value at initialization time.
          </scm:Note>
          <scm:Note>New AbstractController component creates an inheritance
            line for representing components which control the interaction
            between contained view and a model components that need to access
            stateful aspects of the controller. 
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/app
        </path>
        
        <resources>
          <URI>Component.java
          </URI>
          <URI>Container.java
          </URI>
          <URI>DisposeMessage.java
          </URI>
          <URI>Parent.java
          </URI>
          <URI>Pipe.java
          </URI>
          <URI>State.java
          </URI>
          <URI>Message.java
          </URI>
          <URI>components/Session.java
          </URI>
          <URI>kit/AbstractComponent.java
          </URI>
          <URI>kit/AbstractController.java
          </URI>
          <URI>kit/AbstractModelComponent.java
          </URI>
          <URI>kit/AbstractMessageHandler.java
          </URI>
          <URI>kit/ExpansionState.java
          </URI>
          <URI>kit/SimpleState.java
          </URI>
          <URI>kit/StandardContainer.java
          </URI>
          <URI>kit/StandardPipe.java
          </URI>
          <URI>kit/StateReferenceHandler.java
          </URI>
          <URI>kit/TriggerHandler.java
          </URI>
        </resources>

      </scm:Change>
      
      <scm:Change>
        <revision>-dev1
        </revision>
      
        <notes>
          <scm:Note>Allow extensions of the VFS Query task to provide
            implementations of the standard operations GET, PUT and DELETE, as
            well as pluggable operations where needed.
          </scm:Note>
          <scm:Note>Implemented delete() method in URLResource.java
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/vfs/
        </path>
        
        <resources>
          <URI>task/Query.java
          </URI>
          <URI>url/URLResource.java
          </URI>
        </resources>
      </scm:Change>

      <scm:Change>
        <revision>-dev1
        </revision>
      
        <notes>
          <scm:Note>Fix issue where sequence allocation failure due to
            aborted transaction results in a block of values being
            re-used.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/data/xml/XmlStore.java
        </path>
      </scm:Change>
       
    </detail>
  </scm:Change>

  <scm:Change>
  
    <revision>0.4.16
    </revision>
    
    <authorId>miketoth
    </authorId>
    
    <date>2012-03-08
    </date>
    
    <detail>      
    
      <scm:Change>
        <revision>-dev8
        </revision>
      
        <notes>
          <scm:Note>Fixed PathTree.getPath() computation
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/util/tree/PathTree.java
        </path>
      </scm:Change>

      <scm:Change>
        <revision>-dev8
        </revision>
      
        <notes>
          <scm:Note>NavContext provides the absolute parent path to support
            the construction of relative links
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/ui/NavContext.java
        </path>
      </scm:Change>

      <scm:Change>
        <revision>-dev8
        </revision>
      
        <notes>
          <scm:Note>Added missing method "config(message)" to ClassLog
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/log/ClassLog.java
        </path>
      </scm:Change>
          
      <scm:Change>
        <revision>-dev8
        </revision>
      
        <notes>
          <scm:Note>AbstractChainableContext now properly pushes/pops the
            next item in the chain when a ChainableContext is directly chained.
          </scm:Note>
          <scm:Note>Added logging functionality to AbstractChainableContext
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/lang/kit/AbstractChainableContext.java
        </path>
      </scm:Change>

      <scm:Change>
        <revision>-dev8
        </revision>
      
        <notes>
          <scm:Note>Integration mechanism uses PlaceContext and PluginContext
            to encapsulate functionally coherent zones of an application
            component model with respect to external plugin libraries and
            resources such as data storage, etc.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft
        </path>
        
        <resources>
          <URI>app/PlaceContext.java
          </URI>
          <URI>app/PluginContext.java
          </URI>
          <URI>data/Space.java
          </URI>
          <URI>data/access/Schema.java
          </URI>
          <URI>data/access/Store.java
          </URI>
          <URI>data/access/kit/AbstractStore.java
          </URI>
          <URI>data/xml/XmlStore.java
          </URI>
          <URI>vfs/context/Authority.java
          </URI>
          <URI>vfs/context/FileSpace.java
          </URI>
          <URI>vfs/context/Redirect.java
          </URI>
        </resources>
        
        
      </scm:Change>

      <scm:Change>
        <revision>-dev8
        </revision>
      
        <notes>
          <scm:Note>Initialize message has a static instance 
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/app/InitializeMessage.java
        </path>
        
        
      </scm:Change>

      <scm:Change>
        <revision>-dev8
        </revision>
      
        <notes>
          <scm:Note>Routes to component states in the app component model
            are now represented by a Sequence instead of an int[] 
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/
        </path>
        
        <resources>
          <URI>app/Dispatcher.java
          </URI>
          <URI>app/Message.java
          </URI>
          <URI>app/State.java
          </URI>
          <URI>app/StateFrame.java
          </URI>
          <URI>app/kit/AbstractMessageHandler.java
          </URI>
          <URI>app/kit/ExpansionState.java
          </URI>
          <URI>app/kit/SimpleState.java
          </URI>
          <URI>app/kit/StandardDispatcher.java
          </URI>
          <URI>util/ArrayUtil.java
          </URI>
          <URI>util/Sequence.java
          </URI>
        
        </resources>
        
      </scm:Change>

      <scm:Change>
        <revision>-dev7
        </revision>
      
        <notes>
          <scm:Note>Fix issue where a ROOT_PATH formats to "//" instead of "/"
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/util/Path.java
        </path>
        
      </scm:Change>

      <scm:Change>
        <revision>-dev7
        </revision>
      
        <notes>
          <scm:Note>NavContext pathing model accounts for container paths
            by using the EMPTY_PATH as the next path for a container
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/ui/NavContext.java
        </path>
        
      </scm:Change>

      <scm:Change>
        <revision>-dev6
        </revision>
      
        <notes>
          <scm:Note>NavContext can be configured with a view resource
            expression.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/ui/NavContext.java
        </path>
        
      </scm:Change>

      <scm:Change>
        <revision>-dev6
        </revision>
        
        <notes>
          <scm:Note>Use the global StringPool in situations that are likely
            to create many copies of the same string.
          </scm:Note>
        
        </notes>
        
        <path>source/spiralcraft
        </path>
        
        <resources>
          <URI>beans/BeanInfoCache.java
          </URI>
          <URI>builder/AssemblyLoader.java
          </URI>
          <URI>builder/PropertySpecifier.java
          </URI>
          <URI>data/TypeResolver.java
          </URI>
          <URI>data/rest/RestClient.java
          </URI>
          <URI>data/sax/DataHandlerBase.java
          </URI>
          <URI>data/sax/AbstractFrameHandler.java
          </URI>
          <URI>data/xml/XmlStore.java
          </URI>
          <URI>lang/parser/ExpressionParser.java
          </URI>
          <URI>sax/ParseTree.java
          </URI>
          <URI>util/Path.java
          </URI>
          <URI>util/string/StringPool.java
          </URI>
        
        </resources>
      
      </scm:Change>
      
      <scm:Change>
        <revision>-dev6
        </revision>
      
        <notes>
          <scm:Note>Re-use literal nodes in expressions
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/lang
        </path>

        <resources>
          <URI>parser/ExpressionParser.java
          </URI>
          <URI>parser/LiteralNode.java
          </URI>
          <URI>Expression.java
          </URI>
        </resources>
      </scm:Change>
      
      <scm:Change>
        <revision>-dev6
        </revision>
      
        <notes>
          <scm:Note>Allow for async IO in RotatingFileHandler
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/log/RotatingFileHandler.java
        </path>
        
      </scm:Change>

      <scm:Change>
        
        <revision>-dev5
        </revision>
        
        <notes>
          <scm:Note>Allow a URL Resource to retrieved as a URLMessage to
            synchronously process the message content.
          </scm:Note>
          <scm:Note>Clean up URL connection when an IOException occurs that
            reflects an HTTP error.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/vfs/url/
        </path>
        
        <resources>
          <URI>URLMessage.java
          </URI>
          <URI>URLResource.java
          </URI>
        </resources>
        
        
      </scm:Change>

      <scm:Change>
        
        <revision>-dev5
        </revision>
        
        <notes>
          <scm:Note>LangUtil.ensureType method to help contextual objects
            enforce input types while providing an opportunity for 
            automatic type conversion, particularly from Strings.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft
        </path>
        
        <resources>
          <URI>lang/util/LangUtil.java
          </URI>
          <URI>util/string/StringConverter.java
          </URI>
          <URI>vfs/functions/Resolve.java
          </URI>
        </resources>
        
      </scm:Change>

      <scm:Change>
        
        <revision>-dev4
        </revision>
        
        <notes>
          <scm:Note>Added string pooling functionality to XML processing
            system.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft
        </path>
        
        <resources>
          <URI>util/string/StringPool.java
          </URI>
          <URI>data/xml/XmlQueryable.java
          </URI>
          <URI>data/xml/XmlStore.java
          </URI>
          <URI>data/sax/AbstractFrameHandler.java
          </URI>
          <URI>data/sax/DataHandlerBase.java
          </URI>
          <URI>data/sax/DataReader.java
          </URI>
          <URI>data/sax/ForeignDataHandler.java
          </URI>
          <URI>data/sax/FrameHandler.java
          </URI>
          <URI>data/sax/RecursiveFrame.java
          </URI>
          <URI>data/rest/RestClient.java
          </URI>
        </resources>
        
      </scm:Change>

      <scm:Change>
        
        <revision>-dev4
        </revision>
        
        <notes>
          <scm:Note>Synchronize task updates local data from an external
            representation
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/data/task/Synchronize.java
        </path>
        
      </scm:Change>
    
      <scm:Change>
        
        <revision>-dev4
        </revision>
        
        <notes>
          <scm:Note>BufferTuple.updateFrom(Tuple source) copies non-null,
            differently valued fields from the source to the buffer.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/data/session/BufferTuple.java
        </path>
        
      </scm:Change>

      <scm:Change>
        
        <revision>-dev4
        </revision>
        
        <notes>
          <scm:Note>Lifecycler.asLifecycle(Object[]) static method finds
            Lifecycle objects in an arbitrary set
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/common/Lifecycler.java
        </path>
        
      </scm:Change>
    
      <scm:Change>
        
        <revision>-dev4
        </revision>
        
        <notes>
          <scm:Note>PrimaryKeyBufferChannel is now called KeyBufferChannel,
            and accepts alternate and non-unique key definitions.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/data/
        </path>
        
        <resources>
          <URI>session/KeyBufferChannel.java
          </URI>
          <URI>session/PrimaryKeyBufferChannel.java
          </URI>
          <URI>util/Summarizer.java
          </URI>
        </resources>
        
      </scm:Change>

      <scm:Change>
        
        <revision>-dev4
        </revision>
        
        <notes>
          <scm:Note>XmlStore now ensures that the baseResourceURI is a
            container (path ends in "/")
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/data/xml/XmlStore.java
        </path>
        
      </scm:Change>

      <scm:Change>
        
        <revision>-dev4
        </revision>
        
        <notes>
          <scm:Note>Make sets of BindingChannels easier to use via the
            BindingSet class
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/lang/
        </path>
        
        <resources>
          <URI>kit/BindingSet.java
          </URI>
          <URI>parser/BindingNode.java
          </URI>
        </resources>
        
      </scm:Change>

      <scm:Change>
        
        <revision>-dev4
        </revision>
        
        <notes>
          <scm:Note>Reflect the document URI in the locations exposed by
            the SAX ParseTree
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/sax
        </path>
        
        <resources>
          <URI>ParseTree.java
          </URI>
          <URI>ParseTreeFactory.java
          </URI>
        </resources>
        
      </scm:Change>

      <scm:Change>
        
        <revision>-dev4
        </revision>
        
        <notes>
          <scm:Note>Fix formatting of text location URIs
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/text/ParsePosition.java
        </path>
        
      </scm:Change>


      <scm:Change>
        
        <revision>-dev4
        </revision>
        
        <notes>
          <scm:Note>ChainableContextAdapter now implements the bindImports
            method
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/lang/kit/ChainableContextAdapter.java
        </path>
        
      </scm:Change>
      
      <scm:Change>
        
        <revision>-dev4
        </revision>
        
        <notes>
          <scm:Note>All scenarios now support Contextual objects in the
            "contexts" property.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/task/Scenario.java
        </path>
        
      </scm:Change>

      <scm:Change>
        
        <revision>-dev4
        </revision>
        
        <notes>
          <scm:Note>Make Batch respect the "whenX" property by not permitting
            the override of TaskCommand.run
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/task
        </path>
        
        <resources>
          <URI>Batch.java
          </URI>
          <URI>TaskCommand.java
          </URI>
        </resources>
        
      </scm:Change>
          
      <scm:Change>
        
        <revision>-dev4
        </revision>
        
        <notes>
          <scm:Note>Make the RestClient more functional when used in 
            Tasklets (Scenarios) by supporting the Declarable and 
            Reflectable interfaces.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft
        </path>
        
        <resources>
          <URI>data/rest/RestClient.java
          </URI>
        </resources>
      </scm:Change>
          
      <scm:Change>
        
        <revision>-dev4
        </revision>
        
        <notes>
          <scm:Note>Rename AssemblyClass.getContainerURI to assemblyClass
            .getBaseURI - this method returns the canonical uri which resolves
            the AssemblyClass.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft
        </path>
        
        <resources>
          <URI>data/reflect/AssemblyType.java
          </URI>
          <URI>builder/AssemblyClass.java
          </URI>
        </resources>
      </scm:Change>

      <scm:Change>
        
        <revision>-dev4
        </revision>
        
        <notes>
          <scm:Note>BoundQuery.fetch() static method added to fetch query
            data into an Aggregate while encapsulating cursor details
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/data/query/BoundQuery.java
        </path>
      </scm:Change>
      
      <scm:Change>
        
        <revision>-dev4
        </revision>
        
        <notes>
          <scm:Note>Expanded the spiralcraft.common.declare package to
            explicitly support both type declaration URIs and source code
            locations to track the providence of an object through a
            series of constructors/builders. This allows objects to use 
            the names of the extended types that they instantiate for
            integration and error reporting.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/
        </path>
        
        <resources>
          <URI>common/declare/Declarable.java
          </URI>
          <URI>common/declare/DeclarationInfo.java
          </URI>
          <URI>builder/AssemblyClass.java
          </URI>
          <URI>builder/AssemblyLoader.java
          </URI>
          <URI>builder/PropertySpecifier.java
          </URI>
          <URI>task/Scenario.java
          </URI>
        
        </resources>
      </scm:Change>

      <scm:Change>
        
        <revision>-dev3
        </revision>
        
        <notes>
          <scm:Note>Added pre-logout hook to DataAuthModule (beforeLogout
            property)
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/security/spi/DataAuthModule.java
        </path>
      </scm:Change>

      <scm:Change>
        
        <revision>-dev3
        </revision>
        
        <notes>
          <scm:Note>BeanReflector getCommonType() recurses through superclass
            chain
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/lang/reflect/BeanReflector.java
        </path>
      </scm:Change>

      <scm:Change>
        
        <revision>-dev2
        </revision>
        
        <notes>
          <scm:Note>VFS Query task simplifies URI based retrieval with
            dynamic path segments and parameters, regardless of the content
            type returned.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/vfs/task/Query.java
        </path>
      </scm:Change>

      <scm:Change>
        
        <revision>-dev2
        </revision>
        
        <notes>
          <scm:Note>Methods with co-variant return types now resolve properly.
            When two methods have the same signature, the one with the
            narrower return type is considered more specific.  
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/util/lang/MethodResolver.java
        </path>
      </scm:Change>

      <scm:Change>
        
        <revision>-dev2
        </revision>
        
        <notes>
          <scm:Note>Utility function to find a default no-arg constructor
            for a Reflector-managed type.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/lang/util/LangUtil.java
        </path>
      </scm:Change>
      
      <scm:Change>
        
        <revision>-dev2
        </revision>
        
        <notes>
          <scm:Note>Primitive arrays can now be iterated
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/
        </path>
        
        <resources>
          <URI>lang/spi/ArrayListDecorator.java
          </URI>
          <URI>util/ArrayUtil.java
          </URI>
        </resources>
        
      </scm:Change>    
      <scm:Change>
        
        <revision>-dev2
        </revision>
        
        <notes>
          <scm:Note>ExpressionParser reports single quoted chars
             in ParseException.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/lang/parse/ExpressionParser.java
        </path>
        
      </scm:Change>    

      <scm:Change>
        
        <revision>-dev2
        </revision>
        
        <notes>
          <scm:Note>FromString function converts Strings to objects of the
            specified type based on a StringConverter.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/lang/functions/FromString.java
        </path>
        
      </scm:Change>    

      <scm:Change>
        
        <revision>-dev2
        </revision>
        
        <notes>
          <scm:Note>Provide a simple way for Java code to assert the content
            type of a Channel.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/lang
        </path>
        
        <resources>
          <URI>Channel.java
          </URI>
          <URI>spi/AbstractChannel.java
          </URI>
          <URI>spi/ProxyChannel.java
          </URI>
          <URI>spi/TranslatorChannel.java
          </URI>
          
        </resources>

      </scm:Change>    
    
      <scm:Change>
        
        <revision>-dev2
        </revision>
        
        <notes>
          <scm:Note>Provide for simplified handling of VFS remote exceptions by
            implementing an io message package to decouple messages and 
            message metadata from the underlying stream processing logic.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft
        </path>
        
        <resources>
          <URI>io/message/Message.java
          </URI>
          <URI>io/message/Metadata.java
          </URI>
          <URI>io/message/DictionaryMetadata.java
          </URI>
          <URI>vfs/url/URLAccessException.java
          </URI>
          <URI>vfs/url/URLMessage.java
          </URI>
          <URI>vfs/url/URLResource.java
          </URI>
        </resources>

      </scm:Change>
          
      <scm:Change>
        
        <revision>-dev2
        </revision>
        
        <notes>
          <scm:Note>Factor common operations into AbstractNode class to
            simplify implementation of specialized Node classes.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft
        </path>
        
        <resources>
          <URI>util/tree/AbstractNode.java
          </URI>
          <URI>sax/Node.java
          </URI>
          
        </resources>

      </scm:Change>

      <scm:Change>
        
        <revision>-dev1
        </revision>
        
        <notes>
          <scm:Note>Methods in data types only log an exception when
            throwException=false
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/data/core/AbstractTaskMethod.java
        </path>

      </scm:Change>
      
      <scm:Change>
        
        <revision>-dev1
        </revision>
        
        <notes>
          <scm:Note>Make the invoking command object visible inside the
            enclosed scope of the Scenario being executed. 
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/task/TaskCommand.java
        </path>

      </scm:Change>
          
    </detail>
  </scm:Change>
  
  <scm:Change>
  
    <revision>0.4.15.1
    </revision>
    
    <authorId>miketoth
    </authorId>
    
    <date>2011-09-13
    </date>
    
    <detail>

      <scm:Change>
        
        <revision>-dev6
        </revision>
        
        <notes>
          <scm:Note>Fix DataAuthorizer role mapping configuration by
            adding roleMapPrincipalIdFieldName property
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/security/spi/DataAuthorizer.java
        </path>

      </scm:Change>
      
      <scm:Change>
        
        <revision>-dev6
        </revision>
        
        <notes>
          <scm:Note>Expanded use of text Encoder interface to make existing
            encoders usable within various renderer components.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/
        </path>
        
        <resources>
          <URI>lang/util/ExpressionRenderer.java
          </URI>
          <URI>text/Codec.java
          </URI>
          <URI>text/Encoder.java
          </URI>
          <URI>text/NullEncoder.java
          </URI>
          <URI>text/html/TextAreaEncoder.java
          </URI>
          <URI>text/html/URLDataEncoder.java
          </URI>
          <URI>text/html/URLEncoder.java
          </URI>
          <URI>text/xml/AttributeEncoder.java
          </URI>
          <URI>text/xml/XmlEncoder.java
          </URI>
        </resources>
      </scm:Change>

      <scm:Change>      
        
        <revision>-dev6
        </revision>
        
        <notes>
          <scm:Note>Fix exception thrown after saving a pair of related 
            buffers where the relative buffer is cast.
          </scm:Note>
          <scm:Note>Return false instead of throwing an exception when a 
            RelativeField is written to.
          </scm:Note>
          <scm:Note>Casting now reflects isWritable() property of source
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/
        </path>
        
        <resources>
          <URI>lang/kit/members/MetaCastMember.java
          </URI>
          <URI>data/core/RelativeField.java
          </URI>
        </resources>
      </scm:Change>
          
      <scm:Change>
        
        <revision>-dev6
        </revision>
        
        <notes>
          <scm:Note>FileSequence now accepts a Container Resource to 
            allow for easier contextualization 
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/io/FileSequence.java
        </path>

      </scm:Change>
                
      <scm:Change>
        
        <revision>-dev6
        </revision>
        
        <notes>
          <scm:Note>Avoid creating a Path with an empty first element
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/util/Path.java
        </path>

      </scm:Change>
    
      <scm:Change>
        
        <revision>-dev6
        </revision>
        
        <notes>
          <scm:Note>Check for null path continuation
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/ui/NavContext.java
        </path>

      </scm:Change>
          
      <scm:Change>
        
        <revision>-dev6
        </revision>
        
        <notes>
           <scm:Note>Fix issue where multiple DataAuthentication providers'
             DataSessions interfered with each other, resulting in 
             "ThreadLocalChannel not initialized" error.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/security/spi
        </path>
        
        <resources>
          <URI>AbstractAuthModule.java
          </URI>
          <URI>DataAuthModule.java
          </URI>
        </resources>

      </scm:Change>
          
      <scm:Change>
        
        <revision>-dev6
        </revision>
        
        <notes>
           <scm:Note>When using repeated property specifiers to specify
             a list of values, values should be appended to those specified 
             in the base AssemblyClass
             
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/builder/PropertySpecifier.java
        </path>

      </scm:Change>
      
      <scm:Change>
        
        <revision>-dev6
        </revision>
        
        <notes>
           <scm:Note>ThreadLocalChannel now logs push and pop events when
             in debug mode
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/lang/spi/ThreadLocalChannel.java
        </path>

      </scm:Change>

      <scm:Change>
        
        <revision>-dev5
        </revision>
        
        <notes>
           <scm:Note>ContextService now adds contained services to its own
             selfFocus so they are available to client code, now that
             Components always return their selfFocus from bind()
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/service/ContextService.java
        </path>

      </scm:Change>
      <scm:Change>
        
        <revision>-dev5
        </revision>
        
        <notes>
           <scm:Note>Include Focus chain in exception when Scan can't find
             anything to query
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/data/query/Scan.java
        </path>

      </scm:Change>
      <scm:Change>
        
        <revision>-dev5
        </revision>
        
        <notes>
           <scm:Note>Substitute contextProperties for dataURI attribute in
             Assembly definition
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/builder/AssemblyLoader.java
        </path>

      </scm:Change>
      
      <scm:Change>
        
        <revision>-dev5
        </revision>
        
        <notes>
           <scm:Note>Make sure NavContext generates an absolute path from root
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/
        </path>
        
        <resources>
          <URI>ui/NavContext.java
          </URI>
          <URI>util/Path.java
          </URI>
        </resources>
      </scm:Change>
    
      <scm:Change>
        
        <revision>-dev4
        </revision>
        
        <notes>
           <scm:Note>Generate an alias for the context in an ExpressionMethod
            (the default implementation of meta:Method) using the containing
            type uri path and method name in the form typeURIpath+"_"+name so
            the context can be accessed from within nested expressions.
          </scm:Note>
          <scm:Note>Scenario accepts a contextAliasURI to make the context
            reachable in the focus chain
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/
        </path>
        
        <resources>
          <URI>data/core/ExpressionMethod.java
          </URI>
          <URI>task/Scenario.java
          </URI>
        </resources>
      </scm:Change>
          
      <scm:Change>
        
        <revision>-dev4
        </revision>
        
        <notes>

          <scm:Note>Encapsulate realm digest function in DigestFunction
            interface for use by client code that needs to manipulate security
            tokens.
          </scm:Note>
          <scm:Note>Add method to Login data type to secure password with
            a passed DigestFunction
          </scm:Note>

        </notes>
        
        <path>source/spiralcraft/security/
        </path>
                
        <resources>
          <URI>Login.type.xml
          </URI>
          <URI>auth/AuthSession.java
          </URI>
          <URI>auth/DigestFunction.java
          </URI>
        </resources>
      </scm:Change>    

      <scm:Change>
        
        <revision>-dev4
        </revision>
        
        <notes>
          <scm:Note>Enhancements to achieve a functional standard 
            implementation of the spiralcraft.app component model. 
          </scm:Note>
          <scm:Note>Removed unused getType() method from MessageHandler 
            interface.
          </scm:Note>
          <scm:Note>Fix NPEs when no children are specified for a 
            StandardContainer
          </scm:Note>
          <scm:Note>Interface methods to support child-to-parent references,
            which are required for view composition
          </scm:Note>
          <scm:Note>PeerSet and Peering interface to manage relationship
            between a parent and a specialized child.
          </scm:Note>
          <scm:Note>AbstractComponent supports insertion of 
            arbitrary MessageHandlers during configuration.
          </scm:Note>
          <scm:Note>Added StateReferenceHandler to keep a thread-local 
            reference to a Component's State
          </scm:Note>
          <scm:Note>Added TriggerHandler to trigger an expression on a
            given Message.
          </scm:Note>   
        </notes>
        
        <path>source/spiralcraft/
        </path>
                
        <resources>
          <URI>app/Component.java
          </URI>
          <URI>app/Parent.java
          </URI>
          <URI>app/MessagHandler.java
          </URI>
          <URI>app/kit/AbstractComponent.java
          </URI>
          <URI>app/kit/AbstractMessagHandler.java
          </URI>
          <URI>app/kit/FrameHandler.java
          </URI>
          <URI>app/kit/StateReferenceHandler.java
          </URI>
          <URI>app/kit/TriggerHandler.java
          </URI>
          <URI>app/kit/StandardContainer.java
          </URI>
          <URI>app/kit/ExpansionContainer.java
          </URI>
          <URI>app/kit/Peering.java
          </URI>
          <URI>app/kit/PeerSet.java
          </URI>
          <URI>data/Space.java
          </URI>
          <URI>service/ContextService.java
          </URI>
          <URI>service/ResourceContext.java
          </URI>
        </resources>
      </scm:Change>    

      <scm:Change>
        
        <revision>-dev3
        </revision>
        
        <notes>

          <scm:Note>Prevent Editor buffer write-back from throwing an
            exception by checking whether target is writable and making sure
            Functor channels have writable=false
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/
        </path>
                
        <resources>
          <URI>lang/spi/AbstractFunctorChannel.java
          </URI>
          <URI>data/session/BufferChannel.java
          </URI>
        </resources>
      </scm:Change>    

      <scm:Change>
        
        <revision>-dev2
        </revision>
        
        <notes>

          <scm:Note>Setter now respects numeric coercion rules
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/lang/spi/Setter.java
        </path>
                
      </scm:Change>

      <scm:Change>
        
        <revision>-dev2
        </revision>
        
        <notes>

          <scm:Note>Fix issue where ArrayJournalTuple was committed
            prematurely if it received multiple deltas in a transaction 
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/data/spi/ArrayJournalTuple.java
        </path>
                
      </scm:Change>
    
      <scm:Change>
        
        <revision>-dev2
        </revision>
        
        <notes>
          <scm:Note>Editors try write the buffer back to the model
            after a successful save to prevent known-stale copies of data
            from being used.
          </scm:Note>
          <scm:Note>The result of buffering a deleted JournalTuple is a 
            "new" entity of the same type.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/data/
        </path>
        
        <resources>
          <URI>editor/TupleEditor.java
          </URI>
          <URI>editor/AggregateEditor.java
          </URI>
          <URI>session/BufferChannel.java
          </URI>
          <URI>session/BufferTuple.java
          </URI>
        
        </resources>
        
      </scm:Change>
          
      <scm:Change>
        
        <revision>-dev2
        </revision>
        
        <notes>
          <scm:Note>Check for null before adding a Tuple to a CursorAggregate
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/data/access/CursorAggregate.java
        </path>
        
      </scm:Change>

      <scm:Change>
        
        <revision>-dev2
        </revision>
        
        <notes>
          <scm:Note>New NavContext selects from among many options by keying
            off of a hierarchical path. Each nested NavContext instance is
            keyed off a different path segment.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/
        </path>
        
        <resources>
          <URI>ui/NavContext.java
          </URI>
          <URI>util/Path.java
          </URI>
        </resources>
        
      </scm:Change>

      <scm:Change>
        
        <revision>-dev2
        </revision>
        
        <notes>
          <scm:Note>Fix NPEs when injecting arrays of raw data into bean typed
            objects.
          </scm:Note>
          <scm:Note>Fix NPE in array selection when Boolean comparision returns
            null 
          </scm:Note>
          
        </notes>
        
        <path>source/spiralcraft/
        </path>
        
        <resources>
          <URI>data/core/ArrayType.java
          </URI>
          <URI>lang/spi/ArraySelectChannel.java
          </URI>
        </resources>
        
      </scm:Change>

      <scm:Change>
        
        <revision>-dev2
        </revision>
        
        <notes>
          <scm:Note>TypeModel.reflect(Object) find the best Reflector for
            any object by querying all registered TypeModels. 
          </scm:Note>
          
        </notes>
        
        <path>source/spiralcraft/
        </path>
        
        <resources>
          <URI>lang/TypeModel.java
          </URI>
          <URI>lang/spi/SimpleChannel.java
          </URI>
          <URI>lang/reflect/BeanReflector.java
          </URI>
          <URI>lang/reflect/BeanTypeModel.java
          </URI>
          <URI>data/lang/DataTypeModel.java
          </URI>
        </resources>
        
      </scm:Change>

      <scm:Change>
        
        <revision>-dev2
        </revision>
        
        <notes>
          <scm:Note>New SelectorContext publishes a set of options and a
            current selection based on a key function
          </scm:Note>
          
        </notes>
        
        <path>source/spiralcraft/lang/kit
        </path>
        
        <resources>
          <URI>Callable.java
          </URI>
          <URI>SelectorContext.java
          </URI>
          <URI>ThreadLocalContext.java
          </URI>
        </resources>
        
      </scm:Change>

      <scm:Change>
        
        <revision>-dev1
        </revision>
        
        <notes>
          <scm:Note>The "spiralcraft.builder.dir" contextual property and
            related proprties are set to the actual URI of the resolved 
            resource, instead of the URI used to resolve the resource, 
            which may not be valid outside  of the context in which it was 
            resolved.
          </scm:Note>
          
        </notes>
        
        <path>source/spiralcraft/builder/AssemblyClass.java
        </path>
        
      </scm:Change>

      <scm:Change>
        
        <revision>-dev1
        </revision>
        
        <notes>
          <scm:Note>LoginEntry only writes to the the authentication session
            when update() is called.
          </scm:Note>
          
        </notes>
        
        <path>source/spiralcraft/security/auth/LoginEntry.java
        </path>
        
      </scm:Change>

      <scm:Change>
        
        <revision>-dev1
        </revision>
        
        <notes>
          <scm:Note>Fix NPE in HexCodec.decode
          </scm:Note>
          
        </notes>
        
        <path>source/spiralcraft/codec/text/HexCodec.java
        </path>
        
      </scm:Change>
    </detail>
  </scm:Change>
  
  <scm:Change>
  
    <revision>0.4.15
    </revision>
    
    <authorId>miketoth
    </authorId>
    
    <date>2011-08-10
    </date>
    
    <detail>
    
      <scm:Change>
        
        <notes>
          <scm:Note>ContextService provides a base type to put a set of 
            Services in the application and thread context.
          </scm:Note>
          <scm:Note>FileSpace is a ContextService
          </scm:Note>
          <scm:Note>TaskRunner binds the tasklet to the FocusChain returned
            by the referenced Service, if one is provided.
          </scm:Note>
          
        </notes>
        
        <path>source/spiralcraft/
        </path>
        
        <resources>
          <URI>service/ContextService.java
          </URI>
          <URI>task/TaskRunner.java
          </URI>
          <URI>context/FileSpace.java
          </URI>
        </resources>
      </scm:Change>

      <scm:Change>
        <release>-dev5
        </release>
        
        <notes>
          <scm:Note>DataSession now clears buffers only after a successful 
            commit, and not whenever a transaction fails. 
          </scm:Note>
          
        </notes>
        
        <path>source/spiralcraft/data/session/DataSession.java
        </path>
      </scm:Change>

      <scm:Change>
        <release>-dev5
        </release>
        
        <notes>
          <scm:Note>Type.getPrimaryKey() now ensures that type is linked
          </scm:Note>
          
        </notes>
        
        <path>source/spiralcraft/data/Type.java
        </path>
      </scm:Change>

      <scm:Change>
        <release>-dev4
        </release>
        
        <notes>
          <scm:Note>Chain based tasks can now pass chain result by configuring
            addChainResult=true. Refactored some internal members to implement.
          </scm:Note>
          
        </notes>
        
        <path>source/spiralcraft/task/
        </path>
        
        <resources>
          <URI>Batch.java
          </URI>
          <URI>Chain.java
          </URI>
          <URI>CommandTask.java
          </URI>
          <URI>Cycle.java
          </URI>
          <URI>Fork.java
          </URI>
          <URI>Reference.java
          </URI>
          <URI>Sequence.java
          </URI>
          <URI>Value.java
          </URI>
        </resources>
      </scm:Change>

      <scm:Change>
        <release>-dev4
        </release>
        
        <notes>
          <scm:Note>Edit autoCreate is automatically set to true when type
            is set and no target (x) is set.
          </scm:Note>
          
        </notes>
        
        <path>source/spiralcraft/data/task/Edit.java
        </path>
      </scm:Change>

      <scm:Change>
        <release>-dev3
        </release>
        
        <notes>
          <scm:Note>Fix scalar computations to compute result after checkpoint 
          </scm:Note>
          
        </notes>
        
        <path>source/spiralcraft/lang/spi/ReduceProjector.java
        </path>
      </scm:Change>

      <scm:Change>
        <release>-dev3
        </release>
        
        <notes>
          <scm:Note>AssignmentChannel now includes target channel in trace
            tree
          </scm:Note>
          
        </notes>
        
        <path>source/spiralcraft/lang/spi/AssignmentChannel.java
        </path>
      </scm:Change>

      <scm:Change>
        <release>-dev2
        </release>
        
        <notes>
          <scm:Note>RelativeField inherits properties of RelativeField
            archetype to enable inheritance of compound relational types
          </scm:Note>
          
        </notes>
        
        <path>source/spiralcraft/data/core/RelativeField.java
        </path>
      </scm:Change>

      <scm:Change>
        <release>-dev2
        </release>
        
        <notes>
          <scm:Note>Add standard Void data type for void method return
          </scm:Note>
          
        </notes>
        
        <path>source/spiralcraft/data/types/standard/VoidType.java
        </path>
      </scm:Change>

      <scm:Change>
        <release>-dev2
        </release>
        
        <notes>
          <scm:Note>Selection now accepts a Type parameter to simplify
            declaration.
          </scm:Note>
          
        </notes>
        
        <path>source/spiralcraft/data/query/Selection.java
        </path>
      </scm:Change>

      <scm:Change>
        <release>-dev2
        </release>
        
        <notes>
          <scm:Note>Added experimental support for type adapters 
            (data interfaces) using Projections
          </scm:Note>
          
        </notes>
        
        <path>source/spiralcraft/data/core/ProjectionImpl.java
        </path>
      </scm:Change>

      <scm:Change>
        <release>-dev2
        </release>
        
        <notes>
          <scm:Note>Avoid linking Types too early in the loading process
            to prevent circular dependency issues.
          </scm:Note>
          <scm:Note>Make sure Keys and RelativeFields get required information
            before they are referenced in the linking process
            
          </scm:Note>
        </notes>

        <path>source/spiralcraft/data/
        </path>
        
        <resources>
          <URI>Type.java
          </URI>
          <URI>TypeResolver.java
          </URI>
          <URI>builder/BuilderType.java
          </URI>
          <URI>core/AbstractAggregateType.java
          </URI>
          <URI>core/DeltaType.java
          </URI>
          <URI>core/FieldSetType.java
          </URI>
          <URI>core/KeyImpl.java
          </URI>
          <URI>core/MetaType.java
          </URI>
          <URI>core/PrimitiveTypeImpl.java
          </URI>
          <URI>core/RelativeField.java
          </URI>
          <URI>core/SchemeImpl.java
          </URI>
          <URI>core/TypeImpl.java
          </URI>
          <URI>lang/AggregateReflector.java
          </URI>
          <URI>lang/PrimitiveReflector.java
          </URI>
          <URI>lang/TupleReflector.java
          </URI>
          <URI>query/Scan.java
          </URI>
          <URI>reflect/AssemblyType.java
          </URI>
          <URI>reflect/ReflectionField.java
          </URI>
          <URI>reflect/ReflectionScheme.java
          </URI>
          <URI>reflect/ReflectionType.java
          </URI>
          <URI>sax/DataHandler.java
          </URI>
          <URI>sax/DataHandlerBase.java
          </URI>
          <URI>session/BufferType.java
          </URI>
          <URI>types/standard/InstantType.java
          </URI>
          <URI>xml/XmlTypeFactory.java.java
          </URI>
        </resources>
        
      </scm:Change>

      <scm:Change>
        <release>-dev2
        </release>
        
        <notes>
          <scm:Note>The Sum of an empty set is 0, not null
          </scm:Note>
        </notes>

        <path>source/spiralcraft/lang/functions/Sum.java
        </path>
        
      </scm:Change>
          
      <scm:Change>
        <release>-dev2
        </release>
        
        <notes>
          <scm:Note>ELaine syntax now supports += (additive assignment)
            and -= (subtractive assignment)
          </scm:Note>
        </notes>

        <path>source/spiralcraft/lang/parser/
        </path>
        
        <resources>
          <URI>AssignmentNode.java
          </URI>
          <URI>ExpressionParser.java
          </URI>
          <URI>Node.java
          </URI>
        </resources>
        
      </scm:Change>
          
      <scm:Change>
        <release>-dev2
        </release>
        
        <notes>
          <scm:Note>Batch task executes one to many times (regression bug
            from earlier refactoring of task framework)
          </scm:Note>
        </notes>

        <path>source/spiralcraft/task/Batch.java
        </path>
        
      </scm:Change>

      <scm:Change>
        <release>-dev2
        </release>
        
        <notes>
          <scm:Note>Abstracted Coercion pattern (one-way type conversion for
            semantically equivalent but not completely compatible types)
            into a more common place to re-use wherever we need to for things
            like numeric computations.
          </scm:Note>
        </notes>

        <path>source/spiralcraft/
        </path>
        
        <resources>
          <URI>common/Coercion.java
          </URI>
          <URI>util/lang/NumericCoercion.java
          </URI>
          <URI>lang/parser/StructNode.java
          </URI>
          <URI>lang/parser/LogicalNode.java
          </URI>
          <URI>lang/kit/CoercionChannel.java
          </URI>
          <URI>lang/spi/Coercion.java
          </URI>
          <URI>lang/spi/AssignmntChannel.java
          </URI>
        </resources>
        
      </scm:Change>

      <scm:Change>
        <release>-dev2
        </release>
        
        <notes>
          <scm:Note>If FileArchive gets a bad path, it should return null
            in the same manner as it does when there is a missing file instead
            of throwing an exception and interrupting the search process.
          </scm:Note>
        </notes>

        <path>source/spiralcraft/classloader/FileArchive.java
        </path>
        
      </scm:Change>
          
      <scm:Change>
        <release>-dev2
        </release>
        
        <notes>
          <scm:Note>Handle messages that should not advance the UI state frame
          </scm:Note>
        </notes>

        <path>source/spiralcraft/app/
        </path>
        
        <resources>
          <URI>Dispatcher.java
          </URI>
          <URI>InitializeMessage.java
          </URI>
          <URI>Message.java
          </URI>
          <URI>kit/ExpansionContainer.java
          </URI>
          <URI>kit/SimpleState.java
          </URI>
          <URI>kit/StandardDispatcher.java
          </URI>
        </resources>
        
      </scm:Change>

      <scm:Change>
        <release>-dev2
        </release>
        
        <notes>
          <scm:Note>Add writeThrough field to ThreadLocalChannel for
            components that need to be transparent to bi-directional
            flow.
          </scm:Note>
        </notes>

        <path>source/spiralcraft/lang/spi/ThreadLocalChannel.java
        </path>
        
      </scm:Change>
    
      <scm:Change>
        <release>-dev2
        </release>
        
        <notes>
          <scm:Note>Associate buffers of child data directly with their
            parent buffers
          </scm:Note>
        </notes>

        <path>source/spiralcraft/data
        </path>
        
        <resources>
          <URI>session/Buffer.java
          </URI>
          <URI>session/BufferField.java
          </URI>
          <URI>core/KeyImpl.java
          </URI>
          <URI>core/RelativeField.java
          </URI>
        </resources>

      </scm:Change>

      <scm:Change>
        <release>-dev2
        </release>
        
        <notes>
          <scm:Note>Facilitate tracing the origin of Channel data
          </scm:Note>
        </notes>

        <path>source/spiralcraft/
        </path>
        
        <resources>
          <URI>lang/spi/AbstractChannel.java
          </URI>
          <URI>lang/spi/ThreadLocalChannel.java
          </URI>
          <URI>lang/spi/LogChannel.java
          </URI>
          <URI>data/core/RelativeField.java
          </URI>
        </resources>

      </scm:Change>

      <scm:Change>
        <release>-dev1
        </release>
        
        <notes>
          <scm:Note>Fix issue with legacy DataAuthenticator where 
            authentication was broken due to authentication state being scoped
            to component instead of session
          </scm:Note>
        </notes>

        <path>source/spiralcraft/security/spi/DataAuthenticator.java
        </path>

      </scm:Change>

      <scm:Change>
        <release>-dev1
        </release>
        
        <notes>
          <scm:Note>Enable null pass-through when calling a Java method and
            a primitive parameter is assigned a value of null.
          </scm:Note>
        </notes>

        <path>source/spiralcraft/lang/reflect/MethodTranslator.java
        </path>

      </scm:Change>

      <scm:Change>
        <release>-dev1
        </release>
        
        <notes>
          <scm:Note>Enable null pass-through for time computation functions
          </scm:Note>
        </notes>

        <path>source/spiralcraft/time/
        </path>
        
        <resources>
          <URI>Calendar.java
          </URI>
          <URI>Chronology.java
          </URI>
          <URI>Instant.java
          </URI>
        </resources>

      </scm:Change>

      <scm:Change>
        <release>-dev1
        </release>
        
        <notes>
          <scm:Note>Structs can be frozen to make all fields constant if the
            Struct source is constant
          </scm:Note>
        </notes>

        <path>source/spiralcraft/lang/parser
        </path>
        
        <resources>
          <URI>Struct.java
          </URI>
          <URI>StructNode.java
          </URI>
        </resources>

      </scm:Change>

      <scm:Change>
        <release>-dev1
        </release>
        
        <notes>
          <scm:Note>Expressions are now Functors
          </scm:Note>
        </notes>

        <path>source/spiralcraft/lang/Expression.java
        </path>

      </scm:Change>

      <scm:Change>
        <release>-dev1
        </release>
        
        <notes>
          <scm:Note>Calendar provides convenience methods add() and 
            subtract() that accept java.util.Dates instead of 
            spiralcraft.time.Instances
          </scm:Note>
        </notes>

        <path>source/spiralcraft/time/Calendar.java
        </path>
        

      </scm:Change>

      <scm:Change>
        <release>-dev1
        </release>
        
        <notes>
          <scm:Note>Duration is listed as @immutable, and is treated as
            a data primitive as a result.
          </scm:Note>
        </notes>

        <path>source/spiralcraft/time/Duration.java
        </path>
        

      </scm:Change>

      <scm:Change>
        <release>-dev1
        </release>
        
        <notes>
          <scm:Note>New StringUtil.repeat() that uses an Appendable
          </scm:Note>
        </notes>

        <path>source/spiralcraft/util/string/StringUtil.java
        </path>

      </scm:Change>

      <scm:Change>
        <release>-dev1
        </release>
        
        <notes>
          <scm:Note>Provide a mechanism for obtaining the DAG in a tree
            structure for debugging and analysis purposes via the
            Channel.trace() method
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft
        </path>
        
        <resources>
          <URI>lang/Channel.java
          </URI>
          <URI>lang/reflect/BeanFieldChannel.java
          </URI>
          <URI>lang/reflect/BeanPropertyChannel.java
          </URI>
          <URI>lang/spi/AbstractChannel.java
          </URI>
          <URI>lang/spi/ProxyChannel.java
          </URI>
          <URI>lang/spi/SourcedChannel.java
          </URI>
          <URI>lang/spi/ThreadLocalChannel.java
          </URI>
          <URI>lang/spi/TranslatorChannel.java
          </URI>
          <URI>util/tree/LinkedTree.java
          </URI>
        </resources>
      
      
      </scm:Change>

      <scm:Change>
        <release>-dev1
        </release>
        
        <notes>
          <scm:Note>Avoid unnecessary searches for Java methods where
            resolved name is not a legal Java identifier (i.e. is an operator)
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/lang/reflect/BeanReflector.java
        </path>

      </scm:Change>
      
      <scm:Change>
        <release>-dev1
        </release>
        
        <notes>
          <scm:Note>Session task now has "transactional" property which
            performs all sub-tasks within a Transaction.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/data/task/Session.java
        </path>

      </scm:Change>

      <scm:Change>
        <release>-dev1
        </release>
        
        <notes>
          <scm:Note>Edit task and Editors now handle aggregates and
            auto-keying
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/data/
        </path>
        
        <resources>
          <URI>editor/AggregateEditor.java
          </URI>
          <URI>editor/EditorBase.java
          </URI>
          <URI>editor/TupleEditor.java
          </URI>
          <URI>task/Edit.java
          </URI>
        </resources>

      </scm:Change>

      <scm:Change>
        <release>-dev1
        </release>
        
        <notes>
          <scm:Note>Make it easier to use CommandFactory as a final field
            in a Contextual object to expose actions to in-context 
            logic.
          </scm:Note>
          <scm:Note>AbstractCommandFactory is now set up to expose
            a result Reflector, and handles the logic for specializing
            the Reflector for the provided Command object.
          </scm:Note>          
          <scm:Note>BeanFieldChannel will treat final fields from a constant
            source as constant.
          </scm:Note>          
        </notes>
        
        <path>source/spiralcraft
        </path>
        
        <resources>
          <URI>command/AbstractCommandFactory.java
          </URI>
          <URI>task/Scenario.java
          </URI>
          <URI>reflect/BeanFieldChannel.java
          </URI>
        </resources>

      </scm:Change>

      <scm:Change>
        <release>-dev1
        </release>
        
        <notes>
          <scm:Note>Perform type check when primitive values are written
            to a bound field.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/data/core/FieldImpl.java
        </path>

      </scm:Change>

      <scm:Change>
        <release>-dev1
        </release>
        
        <notes>
          <scm:Note>Fix issue where required type coercion was not performed
            when a null value was encountered in an arithmetic operation
          </scm:Note>
          <scm:Note>Use type coercion and compare() to implement '==' 
            operator for numeric types.
          </scm:Note>
          <scm:Note>Use valueOf() and parseXXX() methods to create Number
            objects in ExpressionParser
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/lang/parser
        </path>
        
        <resources>
          <URI>BinaryOpNode.java
          </URI>
          <URI>EqualityNode.java
          </URI>
          <URI>LogicalNode.java
          </URI>
          <URI>RelationalNode.java
          </URI>
          <URI>ExpressionParser.java
          </URI>
        </resources>

      </scm:Change>

      <scm:Change>
        <release>-dev1
        </release>
        
        <notes>
          <scm:Note>VFS ResourceFactories and Resolver support new
            handlesScheme(String) method to determine whether a scheme
            can be mapped to VFS resources.
          </scm:Note>
          <scm:Note>Added informative toString() method to ContextResource
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/vfs
        </path>
        
        <resources>
          <URI>Resolver.java
          </URI>
          <URI>ResourceFactory.java
          </URI>
          <URI>classpath/ClasspathResourceFactory.java
          </URI>
          <URI>context/ContextResourceFactory.java
          </URI>
          <URI>context/ContextResource.java
          </URI>
          <URI>file/FileResourceFactory.java
          </URI>
          <URI>jar/JarResourceFactory.java
          </URI>
          <URI>url/URLResourceFactory.java
          </URI>
        </resources>

      </scm:Change>

      <scm:Change>
        <release>-dev1
        </release>
        
        <notes>
          <scm:Note>Fix NPE when no authentication sessions have been set up
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/security/auth/AuthSession.java
        </path>

      </scm:Change>
      
      <scm:Change>
        <revision>-dev1
        </revision>
        
        <notes>
          <scm:Note>Authorizer supports check for a set of permissions
            using Authorizer.hasAllPermissions(Permission[] permissions)
          </scm:Note>
          <scm:Note>Added standard superUser role
          </scm:Note>          
        </notes>
        
        <path>source/spiralcraft/security/
        </path>
        
        <resources>
          <URI>auth/Authorizer.java
          </URI>
          <URI>auth/AuthSession.java
          </URI>
          <URI>auth/SuperUserRole.type.xml
          </URI>
          <URI>spi/AbstractAuthorizer.java
          </URI>
          <URI>spi/StandardRole.java
          </URI>
          <URI>spi/StandardRoles.java
          </URI>
        </resources>
      </scm:Change>

      <scm:Change>
        <revision>-dev1
        </revision>
        
        <notes>
          <scm:Note>Type.findKey(String[] fieldNames)
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/data/
        </path>
        
        <resources>
          <URI>Scheme.java
          </URI>
          <URI>Type.java
          </URI>
          <URI>core/SchemeImpl.java
          </URI>
        </resources>
      </scm:Change>

      <scm:Change>
        <revision>-dev1
        </revision>
        
        <notes>
          <scm:Note>LangUtil.findChannel(URI,Focus)
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/lang/util/LangUtil.java
        </path>
        
      </scm:Change>
      
      <scm:Change>
        <revision>-dev1
        </revision>
        
        <notes>
          <scm:Note>Fields provide a reference to their Field definition
            through Channel metadata
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/data/
        </path>
        
        <resources>       
          <URI>core/Field.java
          </URI>
          <URI>core/FieldImpl.java
          </URI>
          <URI>core/RelativeField.java
          </URI>
          <URI>session/BufferField.java
          </URI>
          <URI>types/meta/MetadataType.java
          </URI>
        </resources>
      </scm:Change>

      <scm:Change>
        <revision>-dev1
        </revision>
        
        <notes>
          <scm:Note>Channel.bindMeta throws BindException
          </scm:Note>
          <scm:Note>New language construct dereferences metadata:
            x.[myns:MyMetadataType]
          </scm:Note>
          <scm:Note>New language construct denotes "self" to use when the
            current Focus is on an array
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/lang/
        </path>
        
        <resources>       
          <URI>Channel.java
          </URI>
          <URI>spi/AbstractChannel.java
          </URI>
          <URI>spi/ProxyChannel.java
          </URI>
          <URI>spi/SourcedChannel.java
          </URI>
          <URI>Channel.java
          </URI>
          <URI>core/RelativeField.java
          </URI>
          <URI>kit/AbstractReflector.java
          </URI>
          <URI>kit/MetaSelfMember.java
          </URI>
          <URI>types/meta/MetadataType.java
          </URI>
          <URI>parser/ChannelMetaNode.java
          </URI>
          <URI>parser/ExpressionParser.java
          </URI>
        </resources>
      </scm:Change>
      
      <scm:Change>
        <revision>-dev1
        </revision>
        
        <notes>
          <scm:Note>Create an interface for composition layers to provide
            declaration source code references to the components they create
          </scm:Note>
          <scm:Note>Track source code locations for spiralcraft.builder
            constructs.
          </scm:Note>
          <scm:Note>Scenarios receive source code declaration info for error
            reporting
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/
        </path>
        
        <resources>       
          <URI>common/declare/Declarable.java
          </URI>
          <URI>builder/Assembly.java
          </URI>
          <URI>builder/AssemblyClass.java
          </URI>
          <URI>builder/AssemblyLoader.java
          </URI>
          <URI>builder/PropertySpecifier.java
          </URI>
          <URI>task/Scenario.java
          </URI>
        </resources>
      </scm:Change>


      <scm:Change>
        <revision>-dev1
        </revision>
        
        <notes>
          <scm:Note>Improve design contract for Scenario by adding
            bindContext() method for in-closure context setup, and move
            bindImports() outside the closure 
          </scm:Note>
          <scm:Note>Add "alias" property to Scenario so different scenarios
            of the same type can be referenced with different context names 
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/
        </path>
        
        <resources>       
          <URI>data/task/Eval.java
          </URI>
          <URI>data/task/Scenario.java
          </URI>
          <URI>data/flatfile/Scan.java
          </URI>
        </resources>
      </scm:Change>

      <scm:Change>
        <revision>-dev1
        </revision>
        
        <notes>
          <scm:Note>Improve design contract for Scenario by adding
            bindContext() method for in-closure context setup, and move
            bindImports() outside the closure 
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/
        </path>
        
        <resources>       
          <URI>data/task/Eval.java
          </URI>
          <URI>data/task/Scenario.java
          </URI>
          <URI>data/flatfile/Scan.java
          </URI>
        </resources>
      </scm:Change>
      
      <scm:Change>
        <revision>-dev1
        </revision>
        
        <notes>
          <scm:Note>data Fetch task now has a Type,bindingX[] constructor
            to set up a simple EquiJoin 
          </scm:Note>
          <scm:Note>data Fetch task now has a Type constructor
            to set up a Scan
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/
        </path>
        
        <resources>
          <URI>data/query/EquiJoin.java
          </URI>
          <URI>data/task/Fetch.java
          </URI>
        </resources>
      </scm:Change>
    
      <scm:Change>
        <revision>-dev1
        </revision>
        
        <notes>
          <scm:Note>Type scoped (static) methods on data Types are now 
            supported.
          </scm:Note>         
        </notes>
        
        <path>source/spiralcraft/
        </path>
        
        <resources>
          <URI>data/Method.java
          </URI>
          <URI>data/core/AbstractTaskMethod.java
          </URI>
          <URI>data/core/ExpressionMethod.java
          </URI>
          <URI>data/core/MethodImpl.java
          </URI>
          <URI>data/core/TaskMethod.java
          </URI>
          <URI>data/lang/TupleReflector.java
          </URI>
          <URI>lang/Reflector.java
          </URI>       
          <URI>lang/kit/AbstractReflector.java
          </URI>
          <URI>lang/reflect/BeanReflector.java
          </URI>                               
        </resources>
      </scm:Change>

      <scm:Change>
        <revision>-dev1
        </revision>
        
        <notes>
          <scm:Note>QName.resolve recognizes {uri}name format 
          </scm:Note>         
        </notes>
        
        <path>source/spiralcraft/
        </path>
        
        <resources>
          <URI>common/namespace/QName.java
          </URI>
        </resources>
      </scm:Change>

      <scm:Change>
        <revision>-dev1
        </revision>
        
        <notes>
          <scm:Note>ContextualName supports constructor that uses a provided
            PrefixResolver instead of the Contextual prefixResolver
          </scm:Note>         
        </notes>
        
        <path>source/spiralcraft/
        </path>
        
        <resources>
          <URI>common/namespace/ContextualName.java
          </URI>
        </resources>
      </scm:Change>

      <scm:Change>
        <revision>-dev1
        </revision>
        
        <notes>
          <scm:Note>URIUtil.removePathSuffix removes specific suffix from
            the URI path.
          </scm:Note>         
        </notes>
        
        <path>source/spiralcraft/
        </path>
        
        <resources>
          <URI>util/URIUtil.java
          </URI>
        </resources>
      </scm:Change>

      <scm:Change>
        <revision>-dev1
        </revision>
        
        <notes>
          <scm:Note>New ReferencePool utility to pool and reduce instances of
            duplicate immutable objects
          </scm:Note>         
        </notes>
        
        <path>source/spiralcraft/
        </path>
        
        <resources>
          <URI>util/ReferencePool.java
          </URI>
        </resources>
      </scm:Change>

      <scm:Change>
        <revision>-dev1
        </revision>
        
        <notes>
          <scm:Note>Rename MultiMap.getOne() to MultiMap.getFirst() and
            add getLast() method
          </scm:Note>
          <scm:Note>Add Aggregate.contains() method
          </scm:Note>          
        </notes>
        
        <path>source/spiralcraft/
        </path>
        
        <resources>
          <URI>util/KeyedList.java
          </URI>
          <URI>util/ListMap.java
          </URI>
          <URI>util/MultiMap.java
          </URI>
          <URI>data/Aggregate.java
          </URI>
          <URI>data/sax/TupleFrame.java
          </URI>
          <URI>data/spi/KeyedListAggregate.java
          </URI>
          <URI>data/spi/ListAggregate.java
          </URI>          
        </resources>
        
      </scm:Change>

      <scm:Change>
        <revision>-dev1
        </revision>
      
        <notes>
          <scm:Note>Discard all buffers after transaction commit to ensure
            that BufferAggregates are reconstructed properly
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/data/session/
        </path>
        
        <resources>
          <URI>Buffer.java
          </URI>
          <URI>BufferAggregate.java
          </URI>
          <URI>BufferTuple.java
          </URI>
          <URI>DataSession.java
          </URI>
        </resources>
      </scm:Change>
      
      
      <scm:Change>
        <revision>-dev1
        </revision>
        
        <notes>
          <scm:Note>Factor the deltas in the current transaction into key 
            uniqueness checks to permit deletion and re-insertion of the
            same entity within a single transaction.
          </scm:Note>
          <scm:Note>Factored some access related kit components into new 
            package spiralcraft.data.access.kit.
          </scm:Note>
          <scm:Note>Identifiers should always reference the master type 
            (archetype) so buffers and deltas and standard tuples for the
            same entity can be associated
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/data/
        </path>
        
        <resources>
          <URI>access/EntityAccessor.java
          </URI>
          <URI>access/kit/AbstractStore.java
          </URI>
          <URI>access/kit/AbstractStoreQueryable.java
          </URI>
          <URI>access/kit/BaseExtentQueryable.java
          </URI>
          <URI>access/kit/EntityBinding.java
          </URI>
          <URI>spi/AbstractStore.java
          </URI>
          <URI>spi/ArrayDeltaTuple.java
          </URI>
          <URI>spi/ArrayJournalTuple.java
          </URI>
          <URI>spi/BaseExtentQueryable.java
          </URI>
          <URI>spi/EntityBinding.java
          </URI>
          <URI>spi/IdentifierFunction.java
          </URI>
          <URI>xml/XmlQueryable.java
          </URI>
          <URI>xml/XmlStore.java
          </URI>
        </resources>
        
      </scm:Change>

      <scm:Change>
        <revision>-dev1
        </revision>
        
        <notes>
          <scm:Note>Fix NPE in StringUtil.escape
          </scm:Note>
          <scm:Note>Add trimStart and trimEnd functions to StringUtil
          </scm:Note>

        </notes>
        
        <path>source/spiralcraft/util/string/StringUtil.java
        </path>
        
      </scm:Change>
          
      <scm:Change>
        <revision>-dev1
        </revision>
        
        <notes>
          <scm:Note>Fix issue where referencing array.length directly from an 
            expression would try to look up a write method and cause an
            exception to be thrown.
          </scm:Note>

        </notes>
        
        <path>source/spiralcraft/lang/reflect/BeanPropertyChannel.java
        </path>
        
      </scm:Change>

      <scm:Change>
        <revision>-dev1
        </revision>
        
        <notes>
          <scm:Note>Fix issue where new buffers would not get a reference
            to the newly created store version (original) after they were 
            saved.
          </scm:Note>

        </notes>
        
        <path>source/spiralcraft/data/xml/XmlQueryable.java
        </path>
        
      </scm:Change>

      <scm:Change>
        <revision>-dev1
        </revision>
        
        <notes>
          <scm:Note>Computation abstraction maintains a running computation
            on a thread based on a reduction expression.
          </scm:Note>

        </notes>
        
        <path>source/spiralcraft/lank/kit/Computation.java
        </path>
        
      </scm:Change>
    
      <scm:Change>
        <revision>-dev1
        </revision>
        
        <notes>
          <scm:Note>Consolidated VFS functions into their own package
          </scm:Note>
          <scm:Note>New "Find" function recurses through Resource tree
          </scm:Note>
          <scm:Note>New exclusionFilter property for Search simplifies 
            path exclusion.
          </scm:Note>
          <scm:Note>Filter argument for Search.list() post-filters results.
          </scm:Note>
          <scm:Note>Added AnyFilter and NotFilter classes for logically 
            combining functionality, ContainerFilter for screening files/dirs,
            a result filter to store only selected resources in ListFilter,
            and static methods to assist with filter construction.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/vfs
        </path>
        
        <resources>
          <URI>functions/Find.java
          </URI>
          <URI>functions/IO.java
          </URI>
          <URI>functions/Resolve.java
          </URI>
          <URI>functions/IO.java
          </URI>
          <URI>functions/Resolve.java
          </URI>
          <URI>batch/Search.java
          </URI>
          <URI>task/Copy.java
          </URI>
          <URI>filters/AnyFilter.java
          </URI>
          <URI>filters/ContainerFilter.java
          </URI>
          <URI>filters/ListFilter.java
          </URI>
          <URI>filters/NotFilter.java
          </URI>
          <URI>filters/PatternFilter.java
          </URI>
        </resources>
        
      </scm:Change>

      <scm:Change>
        <revision>-dev1
        </revision>
        
        <notes>
          <scm:Note>StringUtil.explode() ignored capacity argument
          </scm:Note>

        </notes>
        
        <path>source/spiralcraft/util/string/StringUtil.java
        </path>
        
      </scm:Change>
      
      <scm:Change>
        <revision>-dev1
        </revision>
        
        <notes>
          <scm:Note>Non-working ArrayUtil.prepend() fixed.
          </scm:Note>

        </notes>
        
        <path>source/spiralcraft/util/ArrayUtil.java
        </path>
        
      </scm:Change>

      <scm:Change>
        <revision>-dev1
        </revision>
        
        <notes>
          <scm:Note>ELaine Configurator utility can be constructed with a 
            Channel for integration flexibility.
          </scm:Note>

        </notes>
        
        <path>source/spiralcraft/lang/util/Configurator.java
        </path>
        
      </scm:Change>

      <scm:Change>
        <revision>-dev1
        </revision>
        
        <notes>
          <scm:Note>Fix asymmetry in Expression.reconstruct() when using
            the dot-prefix. 
          </scm:Note>

        </notes>
        
        <path>source/spiralcraft/lang/parser/ExpressionParser.java
        </path>
        
      </scm:Change>

      <scm:Change>
        <revision>-dev1
        </revision>
        
        <notes>
          <scm:Note>The ELaine function "Format" has been renamed to
            StringCat, and now accepts a StringConverter.
          </scm:Note>
          <scm:Note>A new function "ToString" converts objects to/from strings
            using the a StringConverter.
          </scm:Note>
          <scm:Note>A new function "Try" traps and logs runtime exceptions
            from its source channel without interrupting processing.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/lang/functions
        </path>
        
        <resources>
          <URI>Format.java
          </URI>
          <URI>StringCat.java
          </URI>
          <URI>ToString.java
          </URI>
          <URI>Try.java
          </URI>
        </resources>
        
      </scm:Change>
      
      <scm:Change>
        <revision>-dev1
        </revision>
        
        <notes>
          <scm:Note>Flat file Scan task now returns the result of a 
            Computation over the input set, and accepts an array of Resources
            as a context argument
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/data/flatfile/Scan.java
        </path>
        
      </scm:Change>
      
      <scm:Change>
        <revision>-dev1
        </revision>
        
        <notes>
          <scm:Note>Computation abstraction maintains a running computation
            on a thread based on a reduction expression.
          </scm:Note>

        </notes>
        
        <path>source/spiralcraft/lank/kit/Computation.java
        </path>
        
      </scm:Change>      

      <scm:Change>
        <revision>-dev1
        </revision>
        
        <notes>
          <scm:Note>Specifying a type for a calculated field is optional if
            it can be derived from the expression.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/data/core/CalculatedFieldImpl.java
        </path>
        
      </scm:Change>

      <scm:Change>
        <revision>-dev1
        </revision>
        
        <notes>
          <scm:Note>Updated TaskRunner to support command line context 
            arguments for scenario to run.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/task/TaskRunner.java
        </path>
        
      </scm:Change>

      <scm:Change>
        <revision>-dev1
        </revision>
        
        <notes>
          <scm:Note>Abstract scenario "Chain" has property "sequence" which
            does not create a chain of all the tasks, as opposed to the 
            property "chain".
          </scm:Note>
          <scm:Note>Member field "chain" is now more loosely typed
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/task/
        </path>
        
        <resources>
          <URI>Chain.java
          </URI>
          <URI>Batch.java
          </URI>
        </resources>
        
      </scm:Change>

      <scm:Change>
        <revision>-dev1
        </revision>
        
        <notes>
          <scm:Note>Put CLI arguments processing code into its own package.
          </scm:Note>
          <scm:Note>Refactored to adapt for use with Command contexts.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/
        </path>
        
        <resources>
          <URI>cli/Arguments.java
          </URI>
          <URI>cli/BeanArguments.java
          </URI>
          <URI>cli/CommandArguments.java
          </URI>
          <URI>cli/ReflectorArguments.java
          </URI>
          <URI>exec/Arguments.java
          </URI>
          <URI>exec/BeanArguments.java
          </URI>
          <URI>exec/Executor.java
          </URI>
          <URI>task/TaskRunner.java
          </URI>
          <URI>service/Daemon.java
          </URI>
          <URI>vfs/batch/Operation.java
          </URI>
          <URI>vfs/batch/PrependOperation.java
          </URI>
          <URI>vfs/batch/PrintOperation.java
          </URI>
          <URI>vfs/batch/Search.java
          </URI>
        </resources>
      </scm:Change>
    </detail>
  </scm:Change>
  
  <scm:Change>
  
    <revision>0.4.14
    </revision>
    
    <authorId>miketoth
    </authorId>
    
    <date>2011-06-07
    </date>
    
    <detail>
    
      <scm:Change>
        <revision>-dev4
        </revision>
        
        <notes>
          <scm:Note>Default log format now logs the exception stack trace 
            whenever an exception is supplied to the logger.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/log/DefaultFormatter.java
        </path>
      </scm:Change>

      <scm:Change>
        <revision>-dev4
        </revision>
        
        <notes>
          <scm:Note>Projection defines the hashCode and equals contract to
            base identity solely on the source type, field names, and
            target expressions to support association with index structures.
          </scm:Note>
          <scm:Note>Projection and Key provide KeyFunctions use to create
            index structures.
          </scm:Note>
          <scm:Note>KeyIdentifier supports a stricter form of identity than
            KeyTuple which includes the identified type.
          </scm:Note>
          <scm:Note>Expressions define the hashCode and equals contract
            to base identity on the structural syntax. This is partially
            implemented to support basic Projection identity. Due to
            whitespace and namespace resolution, many textual forms may 
            result in the same syntax.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/
        </path>
        
        <resources>
          <URI>data/Key.java
          </URI>
          <URI>data/KeyTuple.java
          </URI>
          <URI>data/Projection.java
          </URI>
          <URI>data/core/KeyImpl.java
          </URI>
          <URI>data/core/ProjectionFieldImpl.java
          </URI>
          <URI>data/core/SchemeImpl.java
          </URI>
          <URI>data/spi/AbstractAggregateQueryable.java
          </URI>
          <URI>data/spi/AbstractTuple.java
          </URI>
          <URI>data/spi/DataKeyFunction.java
          </URI>
          <URI>data/spi/IdentifierFunction.java
          </URI>
          <URI>data/spi/KeyedListAggregate.java
          </URI>
          <URI>data/spi/KeyIdentifier.java
          </URI>
          <URI>data/xml/XmlQueryable.java
          </URI>
          <URI>lang/Expression.java
          </URI>
          <URI>lang/parser/CurrentFocusNode.java
          </URI>
          <URI>lang/parser/LiteralNode.java
          </URI>
          <URI>lang/parser/Node.java
          </URI>
          <URI>lang/parser/ParentFocusNode.java
          </URI>
          <URI>lang/parser/ResolveNode.java
          </URI>

        </resources>
      
      </scm:Change>
      
      <scm:Change>
        <revision>-dev4
        </revision>
        
        <notes>
          <scm:Note>Scenario.verbose only concerns printing output to a
            contextual Appendable and does not concern the log.
          </scm:Note>
          <scm:Note>TaskRunner has printResult option to print the
            command result to ExecutionContext.out, defaults to false.
          </scm:Note>

        </notes>
        
        <path>source/spiralcraft/
        </path>
        
        <resources>
          <URI>task/Scenario.java
          </URI>
          <URI>task/TaskRunner.java
          </URI>
          <URI>vfs/task/Copy.java
          </URI>
        </resources>
        
      </scm:Change>

      <scm:Change>
        <revision>-dev4
        </revision>
        
        <notes>
          <scm:Note>Fix Daemon shutdown hook logic to ensure that stop()
            completes before exiting
          </scm:Note>

        </notes>
        
        <path>source/spiralcraft/service/Daemon.java
        </path>
        
      </scm:Change>
      
      <scm:Change>
        <revision>-dev4
        </revision>
        
        <notes>
          <scm:Note>Fix ClassLoader contract violation which prevented some
            JVM system services from being resolved.
          </scm:Note>
          
          <scm:Note>Fix ClassLoaderLocal to anticipate that the System 
            ClassLoader is not necessarily reachable via 
            ClassLoader.getParent()
          </scm:Note>

        </notes>
        
        <path>source/spiralcraft/
        </path>
        
        <resources>
          <URI>classloader/Loader.java
          </URI>
          <URI>util/ClassLoaderLocal.java
          </URI>
        </resources>
      </scm:Change>
      
      <scm:Change>
        <revision>-dev3
        </revision>
        
        <notes>
          <scm:Note>ContextualName class resolves a QName on instantiation
            to provide code context.
          </scm:Note>

        </notes>
        
        <path>source/spiralcraft/common/namespace/ContextualName.java
        </path>
        
      </scm:Change>

      <scm:Change>
        <revision>-dev3
        </revision>
        
        <notes>
          <scm:Note>New task.Value scenario to reference a directly configured
            component.
          </scm:Note>
          <scm:Note>task.Reference can use single QName based URI to
            resolve reference.
          </scm:Note>

        </notes>
        
        <path>source/spiralcraft/task/
        </path>
        
        <resources>
          <URI>Reference.java
          </URI>
          <URI>Value.java
          </URI>

        </resources>
      </scm:Change>
      
      <scm:Change>
        <revision>-dev3
        </revision>
        
        <notes>
          <scm:Note>Minor spiralcraft-lang fixes, enhancements and refactoring
          </scm:Note>
          <scm:Note>ContextualFunction internal API change from 
            bindSource() to bindResult() for clarity
          </scm:Note>
          <scm:Note>Count fixed to always export Integer Reflector instead of
            using source Reflector
          </scm:Note>
          <scm:Note>Binding Expression "x:=y" allowed as top level Expression 
            to facilitate relevant configuration scenarios. BindingChannel
            enhanced for usability.
          </scm:Note>
          <scm:Note>ContextIdentifierNode.isRelative() to indicate whether
            the identifier is "standalone". 
          </scm:Note>
          <scm:Note>IterationProjector refactored into MapProjector and
            ReduceProjector.
          </scm:Note>
          <scm:Note>AbstractChannel.bind(Expression[],focus) static convenience
            method
          </scm:Note>
          <scm:Note>LangUtil.assertChannel() asserts that specified Channel
            is available in the Focus chain
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/
        </path>
        
        <resources>
          <URI>lang/functions/Count.java
          </URI>
          <URI>lang/spi/ContextualFunction.java
          </URI>
          <URI>lang/spi/IterationProjector.java
          </URI>
          <URI>lang/spi/MapProjector.java
          </URI>
          <URI>lang/spi/ReduceProjector.java
          </URI>
          <URI>lang/spi/AbstractChannel.java
          </URI>
          <URI>lang/parser/ExpressionParser.java
          </URI>
          <URI>lang/parser/BindingNode.java
          </URI>
          <URI>lang/parser/BindingChannel.java
          </URI>
          <URI>lang/parser/ContextIdentifierNode.java
          </URI>
          <URI>lang/parser/MapReduceNode.java
          </URI>
          <URI>lang/util/LangUtil.java
          </URI>
          <URI>data/util/QueryFunction.java
          </URI>
        </resources>
      </scm:Change>

      <scm:Change>
        <revision>-dev3
        </revision>
        
        <notes>
          <scm:Note>New Summarizer component to bulk update data Entities
            that represent reductions or summaries from batches of source
            data.
          </scm:Note>
          <scm:Note>New SummarizerService component to batch incoming 
            data for Summarizer received from arbitrary clients.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/data/util/
        </path>
        
        <resources>
          <URI>Summarizer.java
          </URI>
          <URI>SummarizerService.java
          </URI>

        </resources>
      </scm:Change>

      <scm:Change>
        <revision>-dev3
        </revision>
        
        <notes>
          <scm:Note>EquiJoin now accepts Binding Expressions (x:=y) to 
            facilitate configuration
          </scm:Note>
          <scm:Note>Convenience method BoundQuery fetchUnique() to execute
            the Query and return a unique value.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/data/query/
        </path>
        
        <resources>
          <URI>BoundQuery.java
          </URI>
          <URI>EquiJoin.java
          </URI>
        </resources>
      </scm:Change>

      <scm:Change>
        <revision>-dev3
        </revision>
        
        <notes>
          <scm:Note>Editor now implements the Context pattern to simplify
            access to its buffer in a variety of situations.
          </scm:Note>
          <scm:Note>TupleEditor accepts BindingChannels to use externally
            bound data sources to populate data.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/data/
        </path>
        
        <resources>
          <URI>editor/EditorBase.java
          </URI>
          <URI>editor/TupleEditor.java
          </URI>
          <URI>task/Edit.java
          </URI>

        </resources>
      </scm:Change>

      <scm:Change>
        <revision>-dev3
        </revision>
        
        <notes>
          <scm:Note>New Aggregate.isEmpty() interface method
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/data/
        </path>
        
        <resources>
          <URI>Aggregate.java
          </URI>
          <URI>session/BufferAggregate.java
          </URI>
          <URI>spi/KeyedListAggregate.java
          </URI>
          <URI>spi/ListAggregate.java
          </URI>
        </resources>
      </scm:Change>

      <scm:Change>
        <revision>-dev3
        </revision>
        
        <notes>
          <scm:Note>Enhancements to allow the use of Buffers to perform 
            multiple operations against the same Entity during a single
            Transaction.
          </scm:Note>
          <scm:Note>Enhancements of Identity API and design contract to
            support the creation of pre-identified Buffers, the re-use of
            Buffers, and associations between different forms of in-process
            data for the same Entity.
          </scm:Note>
          <scm:Note>DeltaTuple provides a way to incorporate changes to 
            underlying data using updateOriginal() method
          </scm:Note>
          <scm:Note>JournalTuple incorporates multiple Deltas with change
            to prepareUpdate() API and contract.
          </scm:Note>       
          <scm:Note>XML store implementation freezes mutable Buffers before 
            processing to account for possibility of modification during
            transaction.
          </scm:Note>
          <scm:Note>XML store implementation accounts for multiple changes
            to the same Entity during a single Transaction.
          </scm:Note>

        </notes>
        
        <path>source/spiralcraft/data/
        </path>
        
        <resources>
          <URI>DeltaTuple.java
          </URI>
          <URI>Identifier.java
          </URI>
          <URI>JournalTuple.java
          </URI>
          <URI>core/SchemeImpl.java
          </URI>
          <URI>session/DataSession.java
          </URI>
          <URI>session/BufferTuple.java
          </URI>
          <URI>session/PrimaryKeyBufferChannel.java
          </URI>
          <URI>spi/AbstractTuple.java
          </URI>
          <URI>spi/ArrayDeltaTuple.java
          </URI>
          <URI>spi/ArrayJournalTuple.java
          </URI>
          <URI>spi/DataKeyFunction.java
          </URI>
          <URI>spi/KeyIdentifier.java
          </URI>
          <URI>spi/PojoIdentifier.java
          </URI>
          <URI>xml/XmlQueryable.java
          </URI>
        </resources>
      </scm:Change>
      
      <scm:Change>
        <revision>-dev3
        </revision>
        
        <notes>
          <scm:Note>Migrate additional functionality from spiralcraft-textgen
            into the spiralcraft-app package.
          </scm:Note>
          <scm:Note>Move State Frame change detection into the State API and
            the Dispatcher and out of individual components.
          </scm:Note>
          <scm:Note>New FrameHandler kit part runs code on StateFrame change
          </scm:Note>
          <scm:Note>Standardize on MessageHandlerChain implementation and
            design contract from spiralcraft-textgen
          </scm:Note>
          <scm:Note>Return value of Component.bind() standardized to be
            selfFocus. 
          </scm:Note>
        </notes>

        <path>source/spiralcraft/app
        </path>

        <resources>
          <URI>State.java
          </URI>
          <URI>kit/AbstractComponent.java
          </URI>
          <URI>kit/AbstractMessageHandler.java
          </URI>
          <URI>kit/ExpansionState.java
          </URI>
          <URI>kit/FrameHandler.java
          </URI>
          <URI>kit/SimpleState.java
          </URI>
          <URI>kit/StandardDispatcher.java
          </URI>
          <URI>kit/StandardMessageHandlerChain.java
          </URI>
          <URI>kit/ValueState.java
          </URI>
        </resources>
      </scm:Change>
      
      
      <scm:Change>
        <revision>-dev2
        </revision>
        
        <notes>
          <scm:Note>Add StringUtil.tokenizeOnWhitespace() function to tokenize
            non-whitespace portions of a String using Character.isWhitespace()
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/util/string/StringUtil.java
        </path>
      </scm:Change>
            
      <scm:Change>
        <revision>-dev2
        </revision>
        
        <notes>
          <scm:Note>Enhancements to Schema definition to support abstract
            Entities and resolution of Entities associated with an
            Entity's base Types.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/data/
        </path>
        
        <resources>
          <URI>xml/XmlStore.java
          </URI>
          <URI>access/SchemaMetaObject.java
          </URI>
          <URI>access/Schema.java
          </URI>
          <URI>access/Entity.java
          </URI>
        </resources>
      </scm:Change>
      
      <scm:Change>
        <revision>-dev2
        </revision>
        
        <notes>
          <scm:Note>Make sure XmlStore data is available on start
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/data/xml/XmlStore.java
        </path>
      </scm:Change>

      <scm:Change>
        <revision>-dev2
        </revision>
        
        <notes>
          <scm:Note>Fix issue introduced in dev1 where QueryField doesn't
            resolve Query when type is specified.
          </scm:Note>
        
        </notes>
        
        <path>source/spiralcraft/data/core/QueryField.java
        </path>
      </scm:Change>
      
      <scm:Change>
        <revision>-dev2
        </revision>
        
        <notes>
          <scm:Note>Query now supports a conditionX property which is evaluated
            to determine whether or not the query will be executed or an
            empty result set will be returned. This allows for the dynamic
            selection of a query strategy based on input.
          </scm:Note>
          <scm:Note>BoundQuery now requires constructor with original Query
            and parameter Focus, and contains logic to handle an invariant
            condition for performing the query.
          </scm:Note>
          <scm:Note>Query binding logic changed along with Queryable interface
            to provide opportunity for components to solve queries or decline
            to provide a custom solution, returning null from the new
            Queryable.solve() method instead of calling Query.solve() to
            create the default solution. All Query processing components
            now get the opportunity to provide a custom solution for each
            subtree of the Query tree.
          </scm:Note>

       
        </notes>
        
        <path>source/spiralcraft/data/
        </path>
        
        <resources>
          <URI>Space.java
          </URI>
          <URI>spi/AbstractAggregateQueryable.java
          </URI>
          <URI>spi/AbstractStore.java
          </URI>
          <URI>spi/BaseExtentQueryable.java
          </URI>
          <URI>xml/XmlQueryable.java
          </URI>
          <URI>query/BoundQuery.java
          </URI>
          <URI>query/Concatenation.java
          </URI>
          <URI>query/ConcatenationBinding.java
          </URI>
          <URI>query/Distinct.java
          </URI>
          <URI>query/EquiJoin.java
          </URI>
          <URI>query/Join.java
          </URI>
          <URI>query/Projection.java
          </URI>
          <URI>query/Query.java
          </URI>
          <URI>query/Queryable.java
          </URI>
          <URI>query/ReferenceQuery.java
          </URI>
          <URI>query/Scan.java
          </URI>
          <URI>query/Selection.java
          </URI>
          <URI>query/SetFilter.java
          </URI>
          <URI>query/Shuffle.java
          </URI>
          <URI>query/Sort.java
          </URI>
          <URI>query/TextSearch.java
          </URI>
          <URI>query/UnaryBoundQuery.java
          </URI>
          <URI>query/Union.java
          </URI>
          <URI>query/UnionBinding.java
          </URI>
          <URI>kit/EmptyCursor.java
          </URI>
        </resources>
        
      </scm:Change>
    
      <scm:Change>
        <revision>-dev2
        </revision>
        
        <notes>
          <scm:Note>Progress reporting for the Copy task now goes to stdout
            instead of the log.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/vfs/task/Copy.java
        </path>
        
      </scm:Change>

      <scm:Change>
        <revision>-dev2
        </revision>
        
        <notes>
          <scm:Note>Fix issue where Sequences were being deallocated even
            when they were never allocated, resetting the nextValue to 0 and
            resulting in duplicate primary key errors.
          </scm:Note>
          <scm:Note>Fix issue where XmlStore baseResource was canonicalized
            in the query context and not at startup, resulting in use
            of the wrong contextual resource mappings.
          </scm:Note>          
        </notes>
        
        <path>source/spiralcraft/data/
        </path>
        
        <resources>
          <URI>spi/ResourceSequence.java
          </URI>
          <URI>xml/XmlStore.java
          </URI>
        </resources>

      </scm:Change>

      <scm:Change>
        <revision>-dev2
        </revision>
        
        <notes>
          <scm:Note>Check for null alias passed to Focus.addAlias()
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/lang/BaseFocus.java
        </path>

      </scm:Change>
      
      <scm:Change>
        <revision>-dev2
        </revision>
        
        <notes>
          <scm:Note>Implemented pathway to pull metadata extents (information
            sets) from Channels, primarily to drive automatic UI bindings
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/
        </path>
      </scm:Change>

      <scm:Change>
        <revision>-dev2
        </revision>
        
        <notes>
          <scm:Note>XmlStore transaction log splits up xlog directory to
            avoid stressing the FS by accumulating too many entries in one 
            directory.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/data/xml/XmlStore.java
        </path>

      </scm:Change>
      
      <scm:Change>
        <revision>-dev2
        </revision>
        
        <notes>
          <scm:Note>Moved AbstractReflector from spiralcraft.lang.spi to
            spiralcraft.lang.kit
          </scm:Note>
          <scm:Note>Factored common '@' meta members from AbstractReflector 
            into lookup table and new package spiralcraft.lang.kit.Member
          </scm:Note>
          <scm:Note>Reflector getNilChannel() refactored
            to Reflector.createNilChannel()
          </scm:Note>          
        </notes>
        
        <path>source/spiralcraft/
        </path>
        
        <resources>
          <URI>data/lang/DataReflector.java
          </URI>
          <URI>data/task/Edit.java
          </URI>
          <URI>data/core/BeanField.java
          </URI>
          <URI>lang/kit/AbstractReflector.java
          </URI>
          <URI>lang/kit/Member.java
          </URI>
          <URI>lang/kit/members/MetaCastMember.java
          </URI>
          <URI>lang/kit/members/MetaChannelMember.java
          </URI>
          <URI>lang/kit/members/MetaEmptyMember.java
          </URI>
          <URI>lang/kit/members/MetaFocusMember.java
          </URI>
          <URI>lang/kit/members/MetaLastMember.java
          </URI>
          <URI>lang/kit/members/MetaListMember.java
          </URI>
          <URI>lang/kit/members/MetaLogMember.java
          </URI>
          <URI>lang/kit/members/MetaNilMember.java
          </URI>
          <URI>lang/kit/members/MetaSizeMember.java
          </URI>
          <URI>lang/kit/members/MetaSubtypeMember.java
          </URI>
          <URI>lang/kit/members/MetaTopMember.java
          </URI>
          <URI>lang/kit/members/MetaTuneMember.java
          </URI>
          <URI>lang/kit/members/MetaTypeMember.java
          </URI>
          <URI>lang/parser/StructNode.java
          </URI>
          <URI>lang/reflect/ArrayReflector.java
          </URI>
          <URI>lang/reflect/BeanReflector.java
          </URI>
          <URI>lang/reflect/IterableReflector.java
          </URI>
          <URI>lang/spi/ExtendedReflector.java
          </URI>
          <URI>lang/spi/GenericReflector.java
          </URI>
          <URI>lang/spi/NamespaceReflector.java
          </URI>
          <URI>lang/spi/VoidReflector.java
          </URI>
          <URI>lang/spi/AbstractReflector.java
          </URI>
          <URI>security/auth/CredentialSetChannel.java
          </URI>
        </resources>
      </scm:Change>
          
      <scm:Change>
        <revision>-dev2
        </revision>
        
        <notes>
          <scm:Note>Repurposed package spiralcraft.ui- obsoleted classes
            Binding, BindingGroup, Control, ControlGroup, Step, StepControl
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/ui/
        </path>
        
        <resources>
          <URI>Binding.java
          </URI>
          <URI>BindingGroup.java
          </URI>
          <URI>Control.java
          </URI>
          <URI>ControlGroup.java
          </URI>
          <URI>Step.java
          </URI>
          <URI>StepControl.java
          </URI>
        </resources>
      </scm:Change>

      <scm:Change>
        <revision>-dev2
        </revision>
        
        <notes>
          <scm:Note>Obsolete classes BeanField, BeanFieldType, FieldBinding,
            FieldTranslator
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/data/
        </path>
        
        <resources>
          <URI>types/meta/BeanFieldType.java
          </URI>
          <URI>core/BeanField.java
          </URI>
          <URI>lang/FieldBinding.java
          </URI>
          <URI>lang/FieldTranslator.java
          </URI>
        </resources>
      </scm:Change>

      <scm:Change>
        <revision>-dev2
        </revision>
        
        <notes>
          <scm:Note>Add PrefixedName class to cleanly represent namespace
            prefixed names
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/common/namespace/
        </path>
        
        <resources>
          <URI>PrefixedName.java
          </URI>
          <URI>QName.java
          </URI>
        </resources>
      </scm:Change>

      <scm:Change>
        <revision>-dev2
        </revision>
        
        <notes>
          <scm:Note>Refactored Contextual to throw ContextualException
            instead of BindException to allow for re-transmission of
            a wider class of exceptions during bind()
          </scm:Note>
          <scm:Note>Enhanced Context chaining mechanism to allow for any
            Contextual to be part of a chain and to permit explicit
            chain termination in order to support arbitrary composition of
            Contextual stacks.
          </scm:Note>
          <scm:Note>Moved spiralcraft.app.spi package to 
            spiralcraft.app.kit
          </scm:Note>  
          <scm:Note>Changes to spiralcraft.app Component api to get closer to
             merging with spiralcraft.textgen component api.
          </scm:Note>

        </notes>
        
        <path>source/spiralcraft
        </path>
        
        <resources>
          <URI>app/Component.java
          </URI>
          <URI>app/Container.java
          </URI>
          <URI>app/Dispatcher.java
          </URI>
          <URI>app/MessageHandlerChain.java
          </URI>
          <URI>app/State.java
          </URI>
          <URI>app/Parent.java
          </URI>
          <URI>app/kit/AbstractComponent.java
          </URI>
          <URI>app/kit/ExpansionContainer.java
          </URI>
          <URI>app/kit/ExpansionState.java
          </URI>
          <URI>app/kit/MessageHandlerSupport.java
          </URI>
          <URI>app/kit/SimpleState.java
          </URI>
          <URI>app/kit/StandardContainer.java
          </URI>
          <URI>app/kit/StandardDispatcher.java
          </URI>
          <URI>app/kit/VaueState.java
          </URI>
          <URI>app/spi/AbstractComponent.java
          </URI>
          <URI>app/spi/ExpansionContainer.java
          </URI>
          <URI>app/spi/ExpansionState.java
          </URI>
          <URI>app/spi/MessageHandlerSupport.java
          </URI>
          <URI>app/spi/SimpleState.java
          </URI>
          <URI>app/spi/StandardContainer.java
          </URI>
          <URI>app/spi/VaueState.java
          </URI>
          <URI>data/Space.java
          </URI>
          <URI>data/core/ExpressionMethod.java
          </URI>
          <URI>data/core/TaskMethod.java
          </URI>
          <URI>data/flatfile/Output.java
          </URI>
          <URI>data/flatfile/Scan.java
          </URI>
          <URI>data/persist/AbstractXmlObject.java
          </URI>
          <URI>data/persist/PersistentReference.java
          </URI>
          <URI>data/sax/ParseXml.java
          </URI>
          <URI>data/sax/QueryXml.java
          </URI>
          <URI>data/spi/AbstractStore.java
          </URI>
          <URI>data/spi/TaskDeltaTrigger.java
          </URI>
          <URI>data/task/Collect.java
          </URI>
          <URI>data/task/Session.java
          </URI>
          <URI>data/util/DataBatchProcessor.java
          </URI>
          <URI>data/xml/XmlStore.java
          </URI>
          <URI>lang/BindException.java
          </URI>
          <URI>lang/ChainableContext.java
          </URI>
          <URI>lang/Contextual.java
          </URI>
          <URI>lang/kit/AbstractChainableContext.java
          </URI>
          <URI>lang/kit/ChainableContextAdapter.java
          </URI>
          <URI>lang/kit/ChainableContextualAdapter.java
          </URI>
          <URI>lang/kit/ThreadLocalContext.java
          </URI>
          <URI>lang/parser/ObjectLiteralNode.java
          </URI>
          <URI>security/auth/Authenticator.java
          </URI>
          <URI>security/spi/AbstractAuthModule.java
          </URI>
          <URI>security/spi/AbstractAuthorizer.java
          </URI>
          <URI>security/spi/DataAuthenticator.java
          </URI>
          <URI>security/spi/DataAuthModule.java
          </URI>
          <URI>security/spi/DataAuthorizer.java
          </URI>
          <URI>service/Daemon.java
          </URI>
          <URI>service/ResourceContext.java
          </URI>
          <URI>service/SchedulerService.java
          </URI>
          <URI>service/ThreadService.java
          </URI>
          <URI>task/Assign.java
          </URI>
          <URI>task/Batch.java
          </URI>
          <URI>task/Chain.java
          </URI>
          <URI>task/Debug.java
          </URI>
          <URI>task/Exec.java
          </URI>
          <URI>task/Fork.java
          </URI>
          <URI>task/Reference.java
          </URI>
          <URI>task/Scenario.java
          </URI>
          <URI>task/TaskRunner.java
          </URI>
          <URI>task/TaskScheduler.java
          </URI>
          <URI>task/When.java
          </URI>
          <URI>test/Assertion.java
          </URI>
          <URI>test/LoadGroup.java
          </URI>
          <URI>test/Stub.java
          </URI>
          <URI>test/Test.java
          </URI>
          <URI>test/TestGroup.java
          </URI>
          <URI>text/MessageFormat.java
          </URI>
          <URI>vfs/context/Authority.java
          </URI>
          <URI>vfs/context/ContextResourceMap.java
          </URI>
          <URI>vfs/context/FileSpace.java
          </URI>
          <URI>vfs/context/Mirror.java
          </URI>
          <URI>vfs/task/Copy.java
          </URI>
        </resources>
      
      </scm:Change>

      <scm:Change>
        <revision>-dev1
        </revision>
      
        <notes>
          <scm:Note>Fix NPE in Task Sequence when no contents are defined
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/task/Sequence.java
        </path>
        
      </scm:Change>
      
      <scm:Change>
        <revision>-dev1
        </revision>
      
        <notes>
          <scm:Note>Added new built in ELaine property @list which converts
            any iterable source into a java.util.List to support
            interoperability with collections.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/lang/spi/AbstractReflector.java
        </path>
        
      </scm:Change>

      <scm:Change>
        <revision>-dev1
        </revision>
      
        <notes>
          <scm:Note>Update intrinsic data XML format to contain transaction
            and version ids when writing JournalTuples
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/data/sax/
        </path>
        
        <resources>
          <URI>DataHandler.java
          </URI>
          <URI>DataWriter.java
          </URI>
        </resources>
        
      </scm:Change>

      <scm:Change>
        <revision>-dev1
        </revision>
      
        <notes>
          <scm:Note>Fix issue constructing multi-extent DeltaTuples where
            base extents would not get a reference to unmodified data. This
            fix allows for proper transaction logging. 
          </scm:Note>
          <scm:Note>Change access to ArrayTuple constructors to avoid
            unintentional use of wrong patterns.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/data/
        </path>
        
        <resources>
          <URI>session/BufferTuple.java
          </URI>
          <URI>spi/AbstractTuple.java
          </URI>
          <URI>spi/ArrayDeltaTuple.java
          </URI>
          <URI>spi/ArrayJournalTuple.java
          </URI>
          <URI>spi/ArrayTuple.java
          </URI>
          <URI>xml/XmlQueryable.java
          </URI>
        </resources>
        
      </scm:Change>

      <scm:Change>
        <revision>-dev1
        </revision>
      
        <notes>
          <scm:Note>AbstractXmlObject.instantiate(URI) enables the 
            instantiation of a single URI which can reference either a
            Type or an instance resource.
          </scm:Note>
          <scm:Note>TaskRunner.serviceURI uses single URI for either a
            service Type or a service instance.
          </scm:Note>          
        </notes>
        
        <path>source/spiralcraft/
        </path>
        
        <resources>
          <URI>data/persist/AbstractXmlObject.java       
          </URI> 
          <URI>task/TaskRunner.java
          </URI>
        </resources>
        
      </scm:Change>

      <scm:Change>
        <revision>-dev1
        </revision>
      
        <notes>
          <scm:Note>Simplify configuration of Type relationships.
          </scm:Note>
          <scm:Note>RelativeField has replaced KeyField and removes
            redundant and/or superfluous configuration details.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/data
        </path>
        
        <resources>
          <URI>core/DeltaType.java
          </URI>
          <URI>core/FieldImpl.java
          </URI>
          <URI>core/KeyField.java
          </URI>
          <URI>core/KeyImpl.java
          </URI>
          <URI>core/RelativeField.java
          </URI>
          <URI>core/SchemeImpl.java
          </URI>
          <URI>session/BufferType.java
          </URI>
          <URI>types/meta/RelativeFieldType.java
          </URI>
        </resources>
        
      </scm:Change>

      <scm:Change>
        <revision>-dev1
        </revision>
      
        <notes>
          <scm:Note>Added Store.public property. Non-public Stores in a Space 
            do not export their types for queries.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/data
        </path>
        
        <resources>
          <URI>Space.java</URI>
          <URI>access/Store.java</URI>
          <URI>spi/AbstractStore.java</URI>
        </resources>
        
      </scm:Change>

      <scm:Change>
        <revision>-dev1
        </revision>
      
        <notes>
          <scm:Note>ConstantChannel publishes bind-time data as constant
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/lang/kit/ConstantChannel.java
        </path>
        
      </scm:Change>

      <scm:Change>
        <revision>-dev1
        </revision>
      
        <notes>
          <scm:Note>URIUtil.addPathSegment method
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/util/URIUtil.java
        </path>
        
      </scm:Change>

      <scm:Change>
        <revision>-dev1
        </revision>
      
        <notes>
          <scm:Note>ThreadContextual is now called a "Context", as the 
            primary purpose of this object is to establish context in the
            FocusChain around the execution of some scope.
          </scm:Note>
          <scm:Note>Chainable context and implementations are derived from
            this interface to help factor specific behavior out of framework
            superclasses that use context generically.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/
        </path>
        
        <resource>
          <URI>data/persist/AbstractXmlObject.java
          </URI>
          <URI>data/rest/RestClient.java
          </URI>
          <URI>data/rest/RestService.java
          </URI>
          <URI>lang/ChainableContext.java
          </URI>
          <URI>lang/Context.java
          </URI>
          <URI>lang/ThreadContextual.java
          </URI>
          <URI>lang/spi/AbstractChainableContext.java
          </URI>
          <URI>lang/spi/ThreadLocalContext.java
          </URI>
          <URI>service/ResourceContext.java
          </URI>
          <URI>vfs/context/FileSpace.java
          </URI>
        </resource>
        
      </scm:Change>

      <scm:Change>
        <revision>-dev1
        </revision>
      
        <notes>
          <scm:Note>MessageFormat renders to a String for use in objects that
            use Strings for labels, etc.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/text/MessageFormat.java
        </path>
        
      </scm:Change>

      <scm:Change>
        <revision>-dev1
        </revision>
      
        <notes>
          <scm:Note>New Scaffold package to represent composition
            specification architecture to unify textgen and common component
            models.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/scaffold/Scaffold.java
        </path>
        
      </scm:Change>

      <scm:Change>
        <revision>-dev1
        </revision>
      
        <notes>
          <scm:Note>ThreadLocalStack supports size()
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/util/ThreadLocalStack.java
        </path>
        
      </scm:Change>

      <scm:Change>
        <revision>-dev1
        </revision>
      
        <notes>
          <scm:Note>Moved spiralcraft.shell package into its own module
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/shell/
        </path>
        
      </scm:Change>

      <scm:Change>
        <revision>-dev1
        </revision>
      
        <notes>
          <scm:Note>Fix delayed NPE in AbstractChannel when no reflector is
            provided
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/lang/spi/AbstractChannel.java
        </path>
        
      </scm:Change>

      <scm:Change>
        <revision>-dev1
        </revision>
      
        <notes>
          <scm:Note>Command line argument processing mechanism supports
            multi-valued options.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/
        </path>
        
        <resources>
          <URI>exec/Arguments.java
          </URI>
          <URI>exec/BeanArguments.java
          </URI>
          <URI>lang/util/Configurator.java
          </URI>
        </resources>
        
      </scm:Change>

      <scm:Change>
        <revision>-dev1
        </revision>
      
        <notes>
          <scm:Note>Executor supports passing of contextual information 
            through isolation barrier, specifically "system" IO streams.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/exec/
        </path>
        
        <resources>
          <URI>Executor.java
          </URI>
          <URI>ExecutionContext.java
          </URI>
          <URI>SystemExecutionContext.java
          </URI>
        </resources>
        
      </scm:Change>

      <scm:Change>
        <revision>-dev1
        </revision>
      
        <notes>
          <scm:Note>Begin unification of the Exception model to allow for 
            context to be associated with any of the exceptions thrown from 
            composed models- e.g. non-java source code location.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/
        </path>
        
        <resources>
          <URI>common/ContextualException.java
          </URI>
          <URI>data/DataException.java
          </URI>
          <URI>text/ParseException.java
          </URI>
        </resources>
        
      </scm:Change>

      <scm:Change>
        <revision>-dev1
        </revision>
      
        <notes>
          <scm:Note>Ensure that Types loaded through the "file" scheme are
            always loaded in the leaf TypeResolver, as these Types may
            reference "class" scheme Types only found in the leaf TypeResolver
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/data/TypeResolver.java
        </path>
        
        
      </scm:Change>

      <scm:Change>
        <revision>-dev1
        </revision>
      
        <notes>
          <scm:Note>CoreTypeFactory checks URI scheme to ensure that
            a "class" or "java" type is being referenced.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/data/core/CoreTypeFactory.java
        </path>
        
        
      </scm:Change>

      <scm:Change>
        <revision>-dev1
        </revision>
      
        <notes>
          <scm:Note>Reduce startup time and memory consumption by avoiding
            automatic traversal of entire reachable object graph during Type 
            resolution.
          </scm:Note>
          <scm:Note>Field and Method linking logic delays resolution of derived
            Type information until it is needed.
          </scm:Note>
          <scm:Note>Support tracing of recursive Type linking using
            spiralcraft.lang.Type TRACE log level.
          </scm:Note>
          <scm:Note>Limit exposure of BeanInfo in Builder by delegating to
            AssemblyClass for information to avoid pulling in java.awt
            graph due to PropertyDescriptor->PropertyEditor->java.awt.Component
            reference.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/
        </path>
        
        <resources>
          <URI>builder/AssemblyClass.java
          </URI>
          <URI>builder/PropertyBinding.java
          </URI>
          <URI>builder/PropertySpecifier.java
          </URI>
          <URI>data/Type.java
          </URI>
          <URI>data/builder/BuilderField.java
          </URI>
          <URI>data/builder/BuilderType.java
          </URI>
          <URI>data/core/CalculatedFieldImpl.java
          </URI>
          <URI>data/core/FieldImpl.java
          </URI>
          <URI>data/core/MethodImpl.java
          </URI>
          <URI>data/core/PrimitiveTypeImpl.java
          </URI>
          <URI>data/core/QueryField.java
          </URI>
          <URI>data/core/SchemeImpl.java
          </URI>
          <URI>data/core/TypeImpl.java
          </URI>
          <URI>data/reflect/ReflectionField.java
          </URI>
          <URI>data/reflect/ReflectionMethod.java
          </URI>
        </resources>
        
        
      </scm:Change>

      <scm:Change>
        <revision>-dev1
        </revision>
      
        <notes>
          <scm:Note>Remove unused "addedChildView" method in View
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/app/View.java
        </path>
        
        
      </scm:Change>


      <scm:Change>
        <revision>-dev1
        </revision>
      
        <notes>
          <scm:Note>Fix NPE when no children in container
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/app/spi/StandardContainer.java
        </path>
        
        
      </scm:Change>

      <scm:Change>
        <revision>-dev1
        </revision>
      
        <notes>
          <scm:Note>Lifecycler supports groups of Lifecycle objects
          </scm:Note>
          <scm:Note>Lifecycler methods accept vararg arrays
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/common/Lifecycler.java
        </path>
        
      </scm:Change>

      <scm:Change>
        <revision>-dev1
        </revision>
      
        <notes>
          <scm:Note>Common component model supports registering Contextual
            objects for binding at various points in the binding process.
          </scm:Note>
          <scm:Note>Common component model provides support for differentiating
            "peers" and generic children. 
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/app/spi/AbstractComponent.java
        </path>
        
      </scm:Change>
          
      <scm:Change>
        <revision>-dev1
        </revision>
      
        <notes>
          <scm:Note>Add QName facility to help deal with qualified names
            created from namespace prefix resolution
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/common/namespace/QName.java
        </path>
        
      </scm:Change>
    </detail>
  </scm:Change>
  
  <scm:Change>
  
    <revision>0.4.13
    </revision>
    
    <authorId>miketoth
    </authorId>
    
    <date>2011-03-30
    </date>
    
    <detail>
    
      <scm:Change>
        <notes>
          <scm:Note>Add "description" property to Key definition.
          </scm:Note>
          <scm:Note>Import foreign Key information into Key definitions to
            remove redundancy in Key definition. When a foreignType is
            specified, if an importedKey is not specified, the primary key
            of the foreign type will be used. When an importedKey has a 
            "name" property specified, the key with that name will be
            imported from the foreignType.
          </scm:Note>
        </notes>
      </scm:Change>

      <scm:Change>
        <notes>
          <scm:Note>Add an LSID (Local String Identifier) type to formalize
            exportable synthetic object keys.
          </scm:Note>
        </notes>
        <path>source/spiralcraft/data/types/common/LSID.type.xml
        </path>
      </scm:Change>

      <scm:Change>
        <notes>
          <scm:Note>Fix bug in Builder that prevented an aggregate property in 
            a sub-assemblyclass from pre-catenating the super-assemblyclass's
            property value when there was only a single element in the 
            superclass definition. PropertySpecifier now looks at the
            target property type to determine if it is an aggregate and
            should be concatenated instead of overridden.
          </scm:Note>
        </notes>
        <path>source/spiralcraft/builder/PropertySpecifier.java
        </path>
      </scm:Change>

      <scm:Change>
        <notes>
          <scm:Note>Fix fencepost error in Lifecycler which left 1st service
            running on shutdown.
          </scm:Note>
        </notes>
        <path>source/spiralcraft/common/Lifecycler.java
        </path>
      </scm:Change>

      <scm:Change>
        <notes>
          <scm:Note>Shutdown sequence debugging code and synchronization logic
            tighten-up.
          </scm:Note>
        </notes>
        <path>source/spiralcraft/service/Daemon.java
        </path>
      </scm:Change>

      <scm:Change>
        <notes>
          <scm:Note>Added array constructor for CommandBlock
          </scm:Note>
        </notes>
        <path>source/spiralcraft/command/CommandBlock.java
        </path>
      </scm:Change>

      <scm:Change>
        <notes>
          <scm:Note>Fix NPE in spiralcraft.sax.Element.getDeepCharacters()
          </scm:Note>
        </notes>
        <path>source/spiralcraft/sax/Element.java
        </path>
      </scm:Change>

      <scm:Change>
        <notes>
          <scm:Note>Implement @empty meta-property for iterables.
          </scm:Note>
        </notes>
        <path>source/spiralcraft/lang/spi/AbstractReflector.java
        </path>
      </scm:Change>

      <scm:Change>
        <notes>
          <scm:Note>Don't try to save a new buffer that is marked for deletion
          </scm:Note>
        </notes>
        <path>source/spiralcraft/data/session/BufferTuple.java
        </path>
      </scm:Change>

      <scm:Change>
        <notes>
          <scm:Note>New ChannelBuffer utility component to maintain state and
            detect when a Channel's value changes.
          </scm:Note>
        </notes>
        <path>source/spiralcraft/lang/util/ChannelBuffer.java
        </path>
      </scm:Change>

      <scm:Change>
        <notes>
          <scm:Note>Sort provides a new constructor which accepts an
            Expression and a boolean (for direction) to handle the common
            simple case of a single ordering.
          </scm:Note>
        </notes>
        <path>source/spiralcraft/lang/functions/Sort.java
        </path>
      </scm:Change>

      <scm:Change>
        <notes>
          <scm:Note>Binding now implements Contextual to provide additional
            utility.
          </scm:Note>
        </notes>
        <path>source/spiralcraft/lang/Binding.java
        </path>
      </scm:Change>

      <scm:Change>
        <notes>
          <scm:Note>Provide a new constructor for Loader which accepts 
            a parent ClassLoader and a list of Resources that
            comprise the "classpath".
          </scm:Note>
          <scm:Note>Fix issue where missing trailing slash on 
            classloader FileArchive prevented file resolution.
          </scm:Note>
        </notes>
        <path>source/spiralcraft/classloader/
        </path>
        <resources>
          <URI>Loader.java
          </URI>
          <URI>FileArchive.java
          </URI>
        </resources>
      </scm:Change>

      <scm:Change>
        <notes>
          <scm:Note>Provide resolution chain details when type linking fails
            due to TypeNotFound exception
          </scm:Note>
        </notes>
        <path>source/spiralcraft/data/
        </path>
        <resources>
          <URI>TypeNotFoundException.java
          </URI>
          <URI>core/TypeImpl.java
          </URI>
        </resources>
      </scm:Change>

      <scm:Change>
        <notes>
          <scm:Note>Add a BigInteger type to wrap Java's
          </scm:Note>
        </notes>
        <path>source/spiralcraft/data/types/standard/BigIntegerType.java
        </path>
      </scm:Change>
      
      <scm:Change>
        <notes>
          <scm:Note>Output an informative log message when an assignment fails
          </scm:Note>
        </notes>
        <path>source/spiralcraft/lang/spi/AssignmentChannel.java
        </path>
      </scm:Change>
      
      <scm:Change>
        <notes>
          <scm:Note>Throw a parseException when a conditional expression is
            missing components
          </scm:Note>
        </notes>
        <path>source/spiralcraft/lang/parser/ExpressionParser.java
        </path>
      </scm:Change>
      
      <scm:Change>
        <notes>
          <scm:Note>
            Fix issue where a Journal Tuple lock was not released when a
              transaction was rolled back.
          </scm:Note>
          <scm:Note>
            XmlQueryable rollback behavior updated to better track partial
              execution of prepare stage.
          </scm:Note>
          <scm:Note>
            Logging and debugging additions to help uncover data persistence
              issues
          </scm:Note>
          <scm:Note>
            Journal Tuple notifies all TransactionContext waiters instead of
              just one as TransactionContext. Won't make a difference 
              unless/until outer synchronization is changed.
          </scm:Note>
          <scm:Note>
            Fixed sporadic ConcurrentModificationException when starting a
              transaction.
          </scm:Note>
          <scm:Note>
            New Transaction data task wraps a transactional operation
          </scm:Note>
          <scm:Note>
            Transaction provides getRollbackOnComplete() method to determine
              whether further work will be discarded.
          </scm:Note>
          <scm:Note>
            WorkUnit provides setIsolation() and setRequirement() to control
              Transaction parameters.
          </scm:Note>
          <scm:Note>
            Made transaction filenames fixed length hexadecimal for more
              orderly file management.
          </scm:Note>
        </notes>
        <path>source/spiralcraft/data/
        </path>
        <resources>
          <URI>core/FieldImpl.java
          </URI>
          <URI>spi/ArrayJournalTuple.java
          </URI>
          <URI>spi/AbstractStore.java
          </URI>
          <URI>task/Transaction.java
          </URI>
          <URI>transaction/Transaction.java
          </URI>
          <URI>transaction/WorkUnit.java
          </URI>
          <URI>xml/XmlQueryable.java
          </URI>
          <URI>xml/XmlStore.java
          </URI>
        </resources>
      </scm:Change>
      
      <scm:Change>
        <notes>
          <scm:Note>
            New spiralcraft.measure package for representing unit-based amounts.
          </scm:Note>
        </notes>
        <path>source/spiralcraft/measure/
        </path>
        <resources>
          <URI>Byte.java
          </URI>
          <URI>DecimalPrefix.java
          </URI>
          <URI>DerivedUnit.java
          </URI>
          <URI>DoubleQuantity.java
          </URI>
          <URI>Information.java
          </URI>
          <URI>IntegerQuantity.java
          </URI>
          <URI>Prefix.java
          </URI>
          <URI>Quantifiable.java
          </URI>
          <URI>Quantity.java
          </URI>
          <URI>Unit.java
          </URI>
        </resources>
      </scm:Change>

      <scm:Change>
        <notes>
          <scm:Note>
            Fixes for passing multibyte characters transparently
          </scm:Note>
          <scm:Note>
            Convenience method StreamUtil.readString to read a number of bytes
              from an inputStream into a String of the specified encoding.
          </scm:Note>
          <scm:Note>
             XmlWriter uses UTF-8 when specified encoding is null
          </scm:Note>
          <scm:Note>
             URLDataEncoder properly converts input to bytes before applying
               UTF-8 character encoding.
          </scm:Note>
        </notes>

        <path>source/spiralcraft/
        </path>
        
        <resources>
          <URI>vfs/StreamUtil.java
          </URI>
          <URI>sax/XmlWriter.java
          </URI>
          <URI>text/html/URLDataEncoder.java
          </URI>
        </resources>
      </scm:Change>
      
      <scm:Change>
        <notes>
          <scm:Note>Increase portability of text generating components by
            using Appendable instead of Writer
          </scm:Note>
          <scm:Note>StringUtil.renderToString() renders a Renderer to a 
            String.
          </scm:Note>
        </notes>
        <path>/source/spiralcraft/
        </path>
        <resources>
          <URI>data/flatfile/DelimitedRecordFormat.java
          </URI>
          <URI>data/flatfile/FieldEncoder.java
          </URI>
          <URI>data/flatfile/FieldMapping.java
          </URI>
          <URI>data/sax/DataWriter.java
          </URI>
          <URI>data/sax/XmlDataRenderer.java
          </URI>
          <URI>lang/util/ExpressionRenderer.java
          </URI>
          <URI>sax/ElementRenderer.java
          </URI>
          <URI>sax/ParseTreeFactory.java
          </URI>
          <URI>sax/XmlWriter.java
          </URI>
          <URI>test/TestResult.java
          </URI>
          <URI>text/Encoder.java
          </URI>
          <URI>text/MessageFormat.java
          </URI>
          <URI>text/Renderer.java
          </URI>
          <URI>text/Wrapper.java
          </URI>
          <URI>text/xml/AttributeEncoder.java
          </URI>
          <URI>text/xml/XmlEncoder.java
          </URI>
          <URI>util/string/StringUtil.java
          </URI>
        </resources>
      </scm:Change>

      <scm:Change>
        <notes>
          <scm:Note>MessageFormat provides a mechanism for templating
            string resources used for labels, messages, tool-tips, etc. while
            providing for the level of indirection required for I18N support.
            Future versions of this object will support ResourceBundle based
            resolution of templates based on language and locale.
          </scm:Note>
        </notes>
        <path>/source/spiralcraft/text/MessageFormat.java
        </path>
      </scm:Change>

      <scm:Change>
        <notes>
          <scm:Note>ClassLog logs levels DEBUG and finer when registered for
            a specified class name.
          </scm:Note>
        </notes>
        <path>/source/spiralcraft/log/ClassLog.java
        </path>
      </scm:Change>

      <scm:Change>
        <notes>
          <scm:Note>VFS security check to prevent inadvertent resolution of 
            absolute URIs nested within URI paths.
          </scm:Note>
          <scm:Note>Fixed issues when chaining VFS Contexts through 
            thread-contextual trees.
          </scm:Note>
        </notes>
        <path>/source/spiralcraft/
        </path>
        <resources>
          <URI>vfs/context/Authority.java
          </URI>
          <URI>vfs/context/ContextResourceMap.java
          </URI>
          <URI>vfs/context/FileSpace.java
          </URI>
          <URI>vfs/UnresolvableURIException.java
          </URI>
          <URI>task/TaskScheduler.java
          </URI>
          <URI>service/ResourceContext.java
          </URI>
        </resources>
      </scm:Change>
      
      <scm:Change>
        <notes>
          <scm:Note>Enhancements to support concise invocation from Java 
            components of primary key queries and other operations bound to 
            thread-context data. 
          </scm:Note>
          <scm:Note>LangUtil provides assertInstance() method to find a
            Java class in the Focus chain and throw an Exception when not
            found.
          </scm:Note>
        </notes>
        <path>/source/spiralcraft/
        </path>
        <resources>
          <URI>common/UnaryFunction.java
          </URI>
          <URI>data/util/QueryFunction.java
          </URI>
          <URI>lang/spi/ContextualFunction.java
          </URI>
          <URI>lang/util/LangUtil.java
          </URI>
        </resources>
      </scm:Change>
    </detail>
  </scm:Change>

  <scm:Change>
  
    <revision>0.4.12.9
    </revision>
    
    <authorId>miketoth
    </authorId>
    
    <date>2011-02-09
    </date>
    
    <detail>
      <scm:Change>
        <notes>
          <scm:Note>Updates to data Store components for Lucene integration
          </scm:Note>
          <scm:Note>StoreService now returns a BoundQuery from handleQuery
            or null if an enhanced binding is not provided for the Query
          </scm:Note>
          <scm:Note>NPE and Exception reporting fixes
          </scm:Note>
        </notes>
        
        <path>/source/spiralcraft/data/
        </path>
        
        <resources>
          <URI>access/StoreService.java
          </URI>
          <URI>spi/AbstractAggregateQueryable.java
          </URI>
          <URI>spi/AbstractStore.java
          </URI>
          <URI>xml/XmlStore.java
          </URI>
        </resources>
      </scm:Change>
      
      <scm:Change>
        <notes>
          <scm:Note>ELaine type coercion and type promotion fixes
          </scm:Note>
          <scm:Note>Ensure that BigDecimal, BigInteger can participate
            in comparisons
          </scm:Note>
          <scm:Note>Fix issue where type promotion translator was cached
            under wrong type, causing erroneous resolved type for 
            arithmetic operations after previous binding of operations using
            the same first operand type. 
          </scm:Note>
        </notes>
        
        <path>/source/spiralcraft/lang/
        </path>
        
        <resources>
          <URI>parser/BinaryOpNode.java
          </URI>
          <URI>parser/RelationalNode.java
          </URI>
        </resources>
      </scm:Change>
      
      <scm:Change>
        <notes>
          <scm:Note>ELaine debugging enhancements
          </scm:Note>
          <scm:Note>LogChannel outputs source channel on creation
          </scm:Note>
          <scm:Note>BeanReflector for a specific type can be set to
            trace resolution
          </scm:Note>
        </notes>
        
        <path>/source/spiralcraft/lang/
        </path>
        
        <resources>
          <URI>reflect/BeanReflector.java
          </URI>
          <URI>spi/LogChannel.java
          </URI>
        </resources>
      </scm:Change>
    </detail>
    
  </scm:Change>
  
  <scm:Change>
  
    <revision>0.4.12.8
    </revision>
    
    <authorId>miketoth
    </authorId>
    
    <date>2011-01-25
    </date>
    
    <detail>
      <scm:Change>
        <notes>
          <scm:Note>Add compact array literal syntax with type inference 
            to ELaine, eg. [{ expr, expr, ... }]
          </scm:Note>
        </notes>
        
        <path>/source/spiralcraft/lang/parser/
        </path>
        
        <resources>
          <URI>ExpressionParser.java
          </URI>
          <URI>SubscriptNode.java
          </URI>
        </resources>
      </scm:Change>
    </detail>
    
  </scm:Change>
    

  <scm:Change>
  
    <revision>0.4.12.7
    </revision>
    
    <authorId>miketoth
    </authorId>
    
    <date>2010-12-31
    </date>
    
    <detail>
      <scm:Change>
        <notes>
          <scm:Note>Provide standard set of security roles for use by
            framework apps.
          </scm:Note>
        </notes>
        
        <path>/source/spiralcraft/security/spi/
        </path>
        
        <resources>
          <URI>StandardRoles.data.xml
          </URI>
        </resources>
      </scm:Change>
    
      <scm:Change>
        <notes>
          <scm:Note>Added one-time expression eval utility method usable in 
            Java code.
          </scm:Note>
        </notes>
        
        <path>/source/spiralcraft/lang/util/LangUtil.java
        </path>
        
      </scm:Change>
    </detail>
  </scm:Change>
    
  <scm:Change>
  
    <revision>0.4.12.6
    </revision>
    
    <authorId>miketoth
    </authorId>
    
    <date>2010-12-20
    </date>
    
    <detail>
    

      <scm:Change>
        <notes>
          <scm:Note>Fix deadlock in Type linking due to "Key Projection Types"
            using the contextual TypeResolver instead of the TypeResolver of 
            the containing type.
          </scm:Note>
        </notes>
        
        <path>/source/spiralcraft/data/core/
        </path>
        
        <resources>
          <URI>FieldSetType.java
          </URI>
          <URI>ProjectionImpl.java
          </URI>
        </resources>
      </scm:Change>
    </detail>
  </scm:Change>
  
  <scm:Change>
  
    <revision>0.4.12.5
    </revision>
    
    <authorId>miketoth
    </authorId>
    
    <date>2010-12-20
    </date>
    
    <detail>
    

      <scm:Change>
        <notes>
          <scm:Note>Minor exception handling improvements for type compatibility
            exceptions, XML-data conversion.
          </scm:Note>
        </notes>
        
        <path>/source/spiralcraft</path>
        
        <resources>
          <URI>data/sax/AbstractFrameHandler.java
          </URI>
          <URI>lang/Assignment.java
          </URI>
        </resources>
      </scm:Change>
    </detail>
  </scm:Change>
  
  <scm:Change>
  
    <revision>0.4.12.4
    </revision>
    
    <authorId>miketoth
    </authorId>
    
    <date>2010-12-16
    </date>
    
    <detail>
    

      <scm:Change>
        <notes>DALai and security enhancements to support Role Based Access
          Control authorization mechanism.
        </notes>
        
        <detail>
        
          <scm:Change>
            <notes>
              <scm:Note>Added basic RBAC authorization mechanism to security
                framework.
              </scm:Note>
            </notes>
              
            <path>source/spiralcraft/security
            </path>
              
            <resources>
              <URI>auth/Authenticator.java
              </URI>
              <URI>auth/Authorizer.java
              </URI>
              <URI>auth/AuthSession.java
              </URI>
              <URI>auth/Permission.java
              </URI>
              <URI>auth/Role.java
              </URI>
              <URI>auth/LoginPermission.type.xml
              </URI>
              <URI>auth/SignedInRole.type.xml
              </URI>
              <URI>spi/AbstractAuthorizer.java
              </URI>
              <URI>spi/DataAuthorizer.java
              </URI>
              <URI>spi/StandardRole.java
              </URI>
            </resources>
          </scm:Change>
          
          
          <scm:Change>
            <notes>
              <scm:Note>Support for Type implementation inheritance for
                ReflectionTypes, allowing the same POJO class to implement
                the behavior of multiple Type URIs.
              </scm:Note>
            
            </notes>
            
            <path>source/spiralcraft/data/
            </path>
            
            <resources>
              <URI>IdentityConstructor.java
              </URI>
              <URI>Type.java
              </URI>
              <URI>core/MetaType.java
              </URI>
              <URI>data/lang/PrimitiveReflector.java
              </URI>
              <URI>data/reflect/ReflectionType.java
              </URI>
            </resources>
          </scm:Change>
        
          <scm:Change>
            <notes>
              <scm:Note>LangUtil static method to find a Channel for a 
                Java class/interface in the focus chain.
              </scm:Note>
            </notes>
            
            <path>source/spiralcraft/lang/util/LangUtil.java
            </path>
          </scm:Change>

          <scm:Change>
            <notes>
              <scm:Note>Fix NPE in XmlTypeFactory when a type object cannot
                be created
              </scm:Note>
            </notes>
            
            <path>source/spiralcraft/data/xml/XmlTypeFactory.java
            </path>
          </scm:Change>

        </detail>
      </scm:Change>
      
      <scm:Change>
        <notes>
          <scm:Note>DALai and util enhancements to support external indexing
          </scm:Note>
          
        </notes>
        
        <detail>
          <scm:Change>
          
            <notes>
              <scm:Note>Implement StringUtil.implode and StringUtil.explode
                functions to support canonical text representations of
                String arrays.
              </scm:Note>
              <scm:Note>Provide static methods to StringConverter to
                facilitate bulk conversion using an array of StringConverters
              </scm:Note>
            </notes>
          
            <path>source/spiralcraft/util/string/
            </path>
            
            <resources>
              <URI>StringConverter.java
              </URI>
              <URI>ArrayToString.java
              </URI>
              <URI>StringUtil.java
              </URI>
            </resources>
          </scm:Change>
        
          <scm:Change>
            <notes>
              <scm:Note>Store now allows query binding before start is 
                completed
              </scm:Note>
              <scm:Note>Transaction log resource is resolved
                within the context in which the store is bound.
              </scm:Note>
              <scm:Note>XmlQueryable is given debug setting from the
                associated Entity
              </scm:Note>
            </notes>
          
            <path>source/spiralcraft/data/
            </path>
            
            <resources>
              <URI>spi/AbstractStore.java
              </URI>
              <URI>xml/XmlStore.java
              </URI>
              <URI>xml/XmlQueryable.java
              </URI>
            </resources>
          </scm:Change>
        
          <scm:Change>
            <notes>
              <scm:Note>Fixed issue in extension logic where SchemaMetaObject
                subtypes, when overriding a default instance, would not add 
                additional members that did not override a member of the
                default instance.
              </scm:Note>
              <scm:Note>EntityField names are now validated against the Entity 
                type.
              </scm:Note>
            </notes>
          
            <path>source/spiralcraft/data/access/
            </path>
            
            <resources>
              <URI>Entity.java
              </URI>
              <URI>EntityField.java
              </URI>
              <URI>Schema.java
              </URI>
              <URI>SchemaMetaObject.java
              </URI>
            </resources>
          </scm:Change>
          
          
          <scm:Change>
          
            <notes>
              <scm:Note>Key interface and implementation provide a KeyFunction
                to simplify obtaining a KeyTuple for a given data value
              </scm:Note>
              <scm:Note>Key interface and implementation provide a 
                StringConverter array to simplify the externalization of
                key values in a canonical text representation.
              </scm:Note>
              <scm:Note>Projections and Keys now provide derivative Type
                objects using unique URIs to facilitate manipulation 
                in Java and ELaine code.
              </scm:Note>
              <scm:Note>KeyTuple provides a getData() method to obtain a
                copy of the key data as an Object[], matching the 
                constructor which accepts an Object[].
              </scm:Note>
              <scm:Note>DataKeyFunction can be constructed from a
                 ProjectionImpl.
              </scm:Note>
              
            </notes>
            
            <path>source/spiralcraft/data/
            </path>
            
            <resources>
              <URI>Key.java
              </URI>
              <URI>KeyTuple.java
              </URI>
              <URI>core/KeyImpl.java
              </URI>
              <URI>core/ProjectionImpl.java
              </URI>
              <URI>spi/DataKeyFunction.java
              </URI>
            </resources>

          </scm:Change>
          
          <scm:Change>
          
            <notes>
              <scm:Note>In DataReflector, everything is assignable from Void
              </scm:Note>
            </notes>
            
            <path>source/spiralcraft/data/lang/DataReflector.java
            </path>
            
          </scm:Change>
        
        </detail>
      </scm:Change>
      
      <scm:Change>
        <notes>
          <scm:Note>Support conversion between spiralcraft.time.Instant and 
            java.util.Date
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/time/Instant.java
        </path>
      </scm:Change>
      
      <scm:Change>
        <notes>
          <scm:Note>Fix NPE, define behavior of null data when using ELaine 
            Sort function Ordering specifier.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/lang/functions/Ordering.java
        </path>
      
      </scm:Change>

      <scm:Change>
        <notes>
          <scm:Note>Support concrete base types when using DALai extent
            inheritance.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/data/spi/BaseExtentQueryable.java
        </path>
      
      </scm:Change>

      <scm:Change>
        <notes>
          <scm:Note>Added standard, clean syntax for implementing DALai type 
            methods  using ELaine expressions via the meta:Method construct.
          </scm:Note>
          <scm:Note>Positional arguments are now assigned to struct fields in
            order of their declaration, allowing method code to refer to
            positional arguments by name.
          </scm:Note>
          <scm:Note>Add static method to find a Focus for a Java interface in 
            the Focus chain.
          </scm:Note>
        </notes>
      
        <path>/source/spiralcraft/
        </path>
        
        <resources>
          <URI>data/core/AbstractTaskMethod.java
          </URI>
          <URI>data/core/TaskMethod.java
          </URI>
          <URI>data/core/ExpressionMethod.java
          </URI>
          <URI>data/types/meta/MethodType.java
          </URI>
          <URI>lang/parser/StructNode.java
          </URI>
          <URI>lang/util/LangUtil.java
          </URI>
        </resources>
      </scm:Change>
      
      
      <scm:Change>
        <notes>
          <scm:Note>RestService returns a self-reference so it can be 
            published into the container's Focus chain. This broke when
            the design contract of Contextual was updated.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/data/rest/RestService.java
        </path>
      </scm:Change>
      
      <scm:Change>
        <notes>
          <scm:Note>RelationalMap now supports one-to-one mapping using the 
            "unique" property.
          </scm:Note>
          <scm:Note>Omitting either the upstream or downstream field name
            will cause the identity (the Tuple(s) themselves) to used for
            input or output. 
          </scm:Note>
        
        </notes>
        
        <path>source/spiralcraft/data/util/RelationalMap.java
        </path>
      </scm:Change>
      
      <scm:Change>
        <notes>Fix circular reference problem where UniqueRule attempts to find
           its own type before binding and fails. UniqueRule now queries the
           containing Store and not the Space.
        </notes>
        
        <path>source/spiralcraft/data/core/UniqueRule.java
        </path>
      </scm:Change>
      
      <scm:Change>
        <notes>Fix: Non-default Join query constructor ignored child query
          parameter.
        </notes>
        
        <path>source/spiralcraft/data/query/Join.java
        </path>
      </scm:Change>
      
      <scm:Change>
        <notes>
          <scm:Note>Builder checks for an abstract class before trying to
            instantiate an object.
          </scm:Note>
          <scm:Note>Builder normalizes supplied package URI by appending a
            trailing slash.
          </scm:Note>
          <scm:Note>Enhanced exception handling logic provides contextual
            information in more scenarios.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/builder/
        </path>
        
        <resources>
          <URI>Assembly.java
          </URI>
          <URI>AssemblyClass.java
          </URI>
        </resources>
        
      </scm:Change>
      
      <scm:Change>
        <notes>
          <scm:Note>"uri" attribute for a PropertySpecifier allows for
            creating a URI using a declared namespace prefix. 
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/builder/
        </path>
        
        <resources>
          <URI>AssemblyLoader.java
          </URI>
        </resources>
        
      </scm:Change>
      
      <scm:Change>
        <notes>
          <scm:Note>"contextualize" attribute for a PropertySpecifier 
            to turn contextual string substitution off to avoid having to code
            around escape logic.
          </scm:Note>        
        </notes>

        <path>source/spiralcraft/builder/
        </path>

        <resources>
          <URI>AssemblyLoader.java
          </URI>
          <URI>PropertyBinding.java
          </URI>
          <URI>PropertySpecifier.java
          </URI>
        </resources>
      </scm:Change>
      
      <scm:Change>
        <notes>
          <scm:Note>Fix NPE in Sort when input is not a collection
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/lang/functions/Sort.java
        </path>
      
      </scm:Change>
      
      <scm:Change>
        <notes>
          <scm:Note>Ensure that character and expression literals are
            reconstructed with appropriate quote characters.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/lang/parser/LiteralNode.java
        </path>
      
      </scm:Change>
      
       <scm:Change>
        <notes>
          <scm:Note>Add type coercion for all numeric primitives for
            relational comparisons
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/lang/parser/RelationalNode.java
        </path>
      
      </scm:Change>
    
    </detail>
  </scm:Change>
  
  <scm:Change>
  
    <revision>0.4.12.3
    </revision>
    
    <authorId>miketoth
    </authorId>
    
    <date>2010-11-09
    </date>
    
    <detail>
    
      <scm:Change>
        <notes>
          <scm:Note>Fixed problem where BufferFields logged a warning because
            their native types were not compatible.
          </scm:Note>
          
        </notes>
        
        <path>source/spiralcraft/data/core/
        </path>
        
        <resources>
          <URI>TypeImpl.java
          </URI>
          <URI>AbstractAggregateType.java
          </URI>
        </resources>
        
      </scm:Change>
      
      <scm:Change>
        <notes>
          <scm:Note>
            Clean up issues with deletions.
          </scm:Note>
          <scm:Note>
            ArrayDeltaTuple properly copies delete flag from buffer
          </scm:Note>
          <scm:Note>
            ArrayJournalTuple returns null for prepareUpdate() when Tuple
            has already been deleted.
          </scm:Note>
          <scm:Note>
            Added undelete() method to BufferTuple to deal with
            situation where buffer is re-added during editing (delete is
            cancelled).
          </scm:Note>
          <scm:Note>
            KeyedList.remove() was not updating indexes
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/data
        </path>
      
        <resources>
          <URI>session/BufferTuple.java
          </URI>
          <URI>spi/ArrayDeltaTuple.java
          </URI>
          <URI>spi/ArrayJournalTuple.java
          </URI>
          <URI>util/KeyedList.java
          </URI>
        </resources>
      </scm:Change>

      <scm:Change>
        <notes>
          <scm:Note>Add Resource.unwrap(Class clazz) method to allow VFS
            clients to obtain references to concrete resources wrapped in
            indirection layers.
          </scm:Note>
          
        </notes>
        
        <path>source/spiralcraft/vfs/
        </path>
        
        <resources>
          <URI>Resource.java
          </URI>
          <URI>context/ContextResource.java
          </URI>
          <URI>spi/AbstractResource.java
          </URI>
          <URI>util/ResourceWrapper.java
          </URI>
        </resources>
        
      </scm:Change>
      
      <scm:Change>
        
        <notes>
          <scm:Note>Fix issue where retrieving a keyed relationship from a
            Buffer would throw a ClassCastException for a non-new buffer.
          </scm:Note>
          <scm:Note>BufferType now provides a non-null native class, which is
            always a Buffer subclass. This is also expressed as a generic type
            parameter.
          </scm:Note>
          <scm:Note>BufferTuple provides access to local data to allow
            BufferField to bypass the public api to check for an existing
            buffer. This is enabled by exposing FieldImpl.widen() as protected.
          </scm:Note>
        </notes>
      
        <path>source/spiralcraft/data/</path>
        
        <resources>
          <URI>TypeResolver.java
          </URI>
          <URI>core/FieldImpl.java
          </URI>
          <URI>session/BufferField.java
          </URI>
          <URI>session/BufferTuple.java
          </URI>
          <URI>session/BufferType.java
          </URI>
        </resources>
        
      </scm:Change>
      
      <scm:Change>
        
        <notes>
          <scm:Note>Make sure ResourceSequence, if using a File, is sync()'ed
            after flush to reduce chance of data loss
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/data/spi/ResourceSequence.java
        </path>
        
      </scm:Change>
      
      <scm:Change>
        
        <notes>
          <scm:Note>Executor accepts a --context command line argument to
            define the "context:/" URI for resource resolution.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/exec/
        </path>
        
        <resources>
          <URI>ExecutionContext.java
          </URI>
          <URI>Executor.java
          </URI>
        </resources>
        
      </scm:Change>

      <scm:Change>
        
        <notes>
          <scm:Note>Provide useful error message when a StructField is
            forward-referenced.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/lang/parser/
        </path>
        
        <resources>
          <URI>StructField.java
          </URI>
          <URI>StructNode.java
          </URI>
        </resources>
        
      </scm:Change>
      
      <scm:Change>
        <notes>SchedulerService returns it self-focus from bind(), not its 
          context.
        </notes>
        
        <path>source/spiralcraft/service/SchedulerSerice.java
        </path>
        
      </scm:Change>

    </detail>
  </scm:Change>

  <scm:Change>
  
    <revision>0.4.12.2
    </revision>
    
    <authorId>miketoth
    </authorId>
    
    <date>2010-10-31
    </date>
    
    <detail>
      <scm:Change>
      
      
        <notes>
          <scm:Note>Updating an entity with no declared primary key now 
            functions properly using self-identity.
          </scm:Note>
          <scm:Note>DataWriter.java calls sync() on FileOuputStreams.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/data
        </path>
        
        <resources>
          <URI>sax/DataWriter.java
          </URI>
          <URI>session/BufferTuple.java
          </URI>
          <URI>xml/XmlQueryable.java
          </URI>
        </resources>
        
      </scm:Change>

      <scm:Change>
      
      
        <notes>
          <scm:Note>Type safety: spiralcraft.lang assignment operator checks 
            type on bind.
          </scm:Note>
          <scm:Note>BeanReflector is always assignable from Void.class and
            Void.TYPE.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/lang
        </path>
        
        <resources>
          <URI>spi/AssignmentChannel.java
          </URI>
          <URI>reflect/BeanReflector.java
          </URI>
        </resources>
        
      </scm:Change>
      
      <scm:Change>
        <notes>
          <scm:Note>TaskRunner now allows for multiple services, including
            ThreadContextual services, to be published into the context that 
            the specified task will use.
          </scm:Note>
          <scm:Note>Implementation refactoring to move toward encapsulated
            notion of a "ResourceContext"- a Component which provides a set
            of services, which may include a set of contextual VFS mappings
          </scm:Note>
          <scm:Note>ResourceSequence is now constructed with a URI, not a
             Resource.
          </scm:Note>          
          <scm:Note>FileSpace is now a Service.
          </scm:Note>          
          <scm:Note>Fix AIOOB exception when Authority has no sub-mappings.
          </scm:Note>          
          <scm:Note>More informative exception handling in ContextResourceMap
          </scm:Note>          
        </notes>
        
        <path>source/spiralcraft
        </path>
        
        <resources>
          <URI>data/xml/XmlStore.java
          </URI>
          <URI>service/Daemon.java
          </URI>
          <URI>service/ResourceContext.java
          </URI>
          <URI>task/TaskRunner.java
          </URI>
          <URI>vfs/context/Authority.java
          </URI>
          <URI>vfs/context/ContextResourceMap.java
          </URI>
          <URI>vfs/context/FileSpace.java
          </URI>
        </resources>
        
      </scm:Change>
      
      
      <scm:Change>
      
        <notes>
          <scm:Note>Builder passed NamespaceContext to an Assembly
            defined using string content.
          </scm:Note>
          <scm:Note>Builder provides a NamespacePrefix to AssemblyClass to
            support construction of NamespaceContext dependent objects
            from their String representations (e.g. Expressions).
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/builder/
        </path>
        
        <resources>
          <URI>Assembly.java
          </URI>
          <URI>AssemblyClass.java
          </URI>
          <URI>AssemblyLoader.java
          </URI>
        </resources>
        
      </scm:Change>

      <scm:Change>

        <notes>
          <scm:Note>Removed 'No archetype scheme' spurious log warning
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/data/core/DeltaType.java
        </path>
        
      </scm:Change>
         
      <scm:Change>
      
      
        <notes>
          <scm:Note>URLEncoder passes all legal RFC2396 "pchar" tokens
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/text/html/URLEncoder.java
        </path>
        
      </scm:Change>
      
    </detail>
        
  
    
  </scm:Change>
  
  <scm:Change>
  
    <revision>0.4.12.1
    </revision>
    
    <authorId>miketoth
    </authorId>
    
    <date>2010-10-25
    </date>
  
    <detail>
      <scm:Change>
        <notes>
          <scm:Note>StoreService extension mechanism to integrate third
            party indexing into any Store.
          </scm:Note>
          <scm:Note>Schema inheritance mechanism for deployment options
          </scm:Note>
          <scm:Note>Field.isDirty(tuple)
          </scm:Note>                 
        </notes>
        
        <path>source/spiralcraft/data/
        </path>
        
        <resources>
          <URI>Field.java
          </URI>
          <URI>access/DeltaTrigger.java
          </URI>
          <URI>access/Entity.java
          </URI>
          <URI>access/EntityField.java
          </URI>
          <URI>access/IndexableText.java
          </URI>          
          <URI>access/Schema.java
          </URI>
          <URI>access/SchemaAttribute.java
          </URI>
          <URI>access/SchemaMetaObject.java
          </URI>         
          <URI>access/Store.java
          </URI>
          <URI>access/StoreService.java
          </URI>     
          <URI>access/Trigger.java
          </URI>     
          <URI>core/FieldImpl.java
          </URI>
          <URI>query/Query.java
          </URI>                  
          <URI>query/TextSearch.java
          </URI>
          <URI>query/UnaryBoundQuery.java
          </URI>  
          <URI>spi/AbstractStore.java
          </URI>  
          <URI>spi/BaseExtentQueryable.java
          </URI>
          <URI>spi/EntityBinding.java
          </URI>
          <URI>spi/TaskDeltaTrigger.java
          </URI>
          <URI>xml/XmlQueryable.java
          </URI>
          <URI>xml/XmlStore.java
          </URI>                                                                          
        </resources>
      </scm:Change>

      <scm:Change>
        <notes>
          <scm:Note>Regression and other fixes 
          </scm:Note>
          <scm:Note>Some cases of Tuple construction would use all Type fields
            instead of just their own Scheme, causing issues with comparisons
            now performed before updating the store.
          </scm:Note>
          <scm:Note>NPE in AggregateReflector
          </scm:Note>
          <scm:Note>NPE in ReflectionType
          </scm:Note>
          <scm:Note>Check for null aggregate element in DataWriter
          </scm:Note>                 
          <scm:Note>Fix UnionBinding logic distinct logic
          </scm:Note>
          <scm:Note>Augment AIOOB Exception in BufferTuple
          </scm:Note>          
        </notes>
        
        <path>source/spiralcraft/data/
        </path>
        
        <resources>
          <URI>KeyTuple.java
          </URI>
          <URI>spi/AbstractTuple.java
          </URI>   
          <URI>spi/ArrayJournalTuple.java
          </URI>                     
          <URI>spi/ArrayTuple.java
          </URI> 
          <URI>lang/AggregateReflector.java
          </URI>
          <URI>query/UnionBinding.java
          </URI>
          <URI>reflect/ReflectionType.java
          </URI>
          <URI>sax/DataWriter.java
          </URI>  
          <URI>session/BufferTuple.java
          </URI>
                             
        </resources>
      </scm:Change>
      
      <scm:Change>
        <notes>
          <scm:Note>Lifecycler helper class implements Lifecycle 
            design contract for a set of Lifecycle objects
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/
        </path>
        
        <resources>
          <URI>common/LifeCycler.java
          </URI>
          <URI>app/spi/StandardContainer.java
          </URI>
          <URI>data/Space.java
          </URI>          
        </resources>
      </scm:Change>
      
      <scm:Change>
        <notes>
          <scm:Note>Array.concat(a1,a2) handles nulls appropriately
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/util/ArrayUtil.java
        </path>
      </scm:Change>
       
      <scm:Change>
        <notes>
          <scm:Note>Setter performs a type check on bind
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/util/ArrayUtil.java
        </path>
      </scm:Change>
    </detail>
    

  </scm:Change>
  
  <scm:Change>
  
    <revision>0.4.12
    </revision>
    
    <authorId>miketoth
    </authorId>
    
    <date>2010-10-14
    </date>
  
    <notes>

    </notes>
    
    <detail>
    
      <scm:Change>
        <notes>
          <scm:Note>Minor log enhancements- add 
            ClassLog.fine(String msg,Exception exception) and ensure that
            class/line no. detail is never suppressed.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/log/
        </path>
        
        <resources>
          <URI>ClassLog.java
          </URI>
          <URI>DefaultFormatter.java
          </URI>
        </resources>
      </scm:Change>

      <scm:Change>
        <notes>
          <scm:Note>[SCPUBLIC-44] Provide a facility to update a standalone 
            installation from another VFS resource, using basic directory
            synchronization logic.
          </scm:Note>
          <scm:Note>Add 'excludeUnchanged' property to Copy task
          </scm:Note>
          <scm:Note>Add convenience constructor to PatternFilter
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/vfs/
        </path>
        
        <resources>
          <URI>filters/PatternFilter.java
          </URI>
          <URI>task/Copy.java
          </URI>
        </resources>
      </scm:Change>
      
      <scm:Change>
        <notes>
          <scm:Note>[SCPUBLIC-45] XML Store should have a configurable 
            retention policy for history files
          </scm:Note>
          <scm:Note>Complete implementation of Duration string encoding and
            time logic.
          </scm:Note>
          <scm:Note>Declare Instant immutable, and ensure that immutable types
            are treated as primitives
          </scm:Note>
          <scm:Note>Add 'head' and 'tail' methods to ArrayUtil
          </scm:Note>
        </notes>
      
        <path>source/spiralcraft/
        </path>
        
        <resources>
          <URI>vfs/util/LastModifiedComparator.java
          </URI>
          <URI>vfs/util/RetentionPolicy.java
          </URI>
          <URI>data/xml/XmlStore.java
          </URI>
          <URI>data/xml/XmlQueryable.java
          </URI>
          <URI>data/reflect/ReflectionType.java
          </URI>
          <URI>time/Calendar.java
          </URI>
          <URI>time/Chronology.java
          </URI>
          <URI>time/Duration.java
          </URI>
          <URI>time/StandardDurationFormat.java
          </URI>
          <URI>time/Instant.java
          </URI>
          <URI>util/string/DurationToString.java
          </URI>
          <URI>util/string/StringConverter.java
          </URI>
          <URI>util/ArrayUtil.java
          </URI>          
        </resources>

      </scm:Change>
      
      <scm:Change>
        <notes>
          <scm:Note>[SCPUBLIC-46] Refactor XML store to support triggers and 
            versioned transactions
          </scm:Note>
          <scm:Note>Enhance utility of Projections by exposing mappings and
            creating reverse Queries.
          </scm:Note>      
          <scm:Note>FieldSet must provide Field name String[]
          </scm:Note>    
          <scm:Note>Sequences now provide Long values and are accessed via
            primary key using standard store mechanisms
          </scm:Note>
          <scm:Note>Implemented conflict resolution logic within DeltaTuple
            via rebase(Tuple) method
          </scm:Note>
          <scm:Note>XML data writer knows how to write delta tuples
          </scm:Note>
          <scm:Note>Recognize DeltaType and .delta type name extension where
            appropriate
          </scm:Note>
          <scm:Note>Exclude C1 control chars in XmlEncoder
          </scm:Note>
          <scm:Note>Avoid double-check of XmlStore subscriber. Delay first 
            scheduled subscription check because initial check is run 
            synchronously on start. 
          </scm:Note>
          <scm:Note>Add option to delay first run in CommandScheduler
          </scm:Note>
          <scm:Note>New LangUtil provides convenience method to find Java
            type in the Focus chain
          </scm:Note>
          <scm:Note>Provide singleton resolver for AnyType
          </scm:Note>
          <scm:Note>Implement Transaction.toString() for debugging purposes
          </scm:Note>
          <scm:Note>Fix bug in KeyedList.set() which did not remove the
            replaced value from indexes
          </scm:Note>
          <scm:Note>Add replace(oldval,newval) method to KeyedList
          </scm:Note>
          <scm:Note>Fix potential NPE in ListMap.remove(K,V)
          </scm:Note>
          <scm:Note>Add intersection(a1,a2) method to ArrayUtil
          </scm:Note>
          <scm:Note>Loosen generic type to accomodate subtypes in IteratorChain
          </scm:Note>
          <scm:Note>Fix NPE in ListAggregate.get(int index)
          </scm:Note>


        </notes>

        <path>source/spiralcraft/
        </path>

        <resources>
          <URI>data/DeltaTuple.java
          </URI>
          <URI>data/Sequence.java
          </URI>
          <URI>data/Space.java
          </URI>
          <URI>data/Type.java
          </URI>
          <URI>data/TypeResolver.java
          </URI>
          <URI>data/FieldSet.java
          </URI>
          <URI>data/Key.java
          </URI>
          <URI>data/Projection.java
          </URI>
          <URI>data/ProjectionField.java
          </URI>
          <URI>data/core/DeltaType.java
          </URI>
          <URI>data/core/DeltaField.java
          </URI>
          <URI>data/core/FieldImpl.java
          </URI>
          <URI>data/core/KeyImpl.java
          </URI>
          <URI>data/core/ProjectionImpl.java
          </URI>
          <URI>data/core/ProjectionFieldImpl.java
          </URI>
          <URI>data/core/SchemeImpl.java
          </URI>
          <URI>data/core/UnifiedFieldSet.java
          </URI>
          <URI>data/sax/DataHandler.java
          </URI>
          <URI>data/sax/DataWriter.java
          </URI>
          <URI>data/sax/DataHandlerBase.java
          </URI>
          <URI>data/sax/ForeignDataHandler.java
          </URI>
          <URI>data/session/BufferTuple.java
          </URI>
          <URI>data/spi/ArrayDeltaTuple.java
          </URI>
          <URI>data/spi/EditableKeyedListAggregate.java
          </URI>
          <URI>data/spi/ListAggregate.java
          </URI>
          <URI>data/spi/Sequence.type.xml
          </URI>
          <URI>data/spi/ResourceSequence.java
          </URI>
          <URI>data/xml/XmlStore.java
          </URI>
          <URI>data/xml/XmlQueryable.java
          </URI>
          <URI>data/types/standard/AnyType.java
          </URI>
          <URI>data/transaction/Transaction.java
          </URI>
          <URI>command/CommandScheduler.java
          </URI>
          <URI>lang/util/LangUtil.java
          </URI>
          <URI>lang/util/KeyedList.java
          </URI>
          <URI>lang/util/ListMap.java
          </URI>
          <URI>text/xml/XmlEncoder.java
          </URI>
          <URI>util/ArrayUtil.java
          </URI>
          <URI>util/IteratorChain.java
          </URI>
        </resources>      
      </scm:Change>

      <scm:Change>
        <notes>
          <scm:Note>[SCPUBLIC-47] Support for multi-headed apps- Daemon should
            publish child Services into Focus chain and define a VFS resource 
            context
          </scm:Note>
          <scm:Note>Add hook for binding child component into StandardContainer
          </scm:Note>
          <scm:Note>Allow configuration of Daemon VFS context root to be
            inherited by all children.
          </scm:Note>
          <scm:Note>Updated CommandScheduler to cache contextual VFS URIs at
            bind-time so they are available on command threads. 
          </scm:Note>          
          <scm:Note>Allow client to obtain a reference to the current
            ContextResourceMap
          </scm:Note>
          <scm:Note>TaskScheduler pulls ContextResourceMap for use by
            CommandScheduler
          </scm:Note>
        </notes>
      
        <path>source/spiralcraft
        </path>
        
        <resources>
          <URI>app/spi/AbstractComponent.java
          </URI>
          <URI>app/spi/StandardContainer.java
          </URI>
          <URI>service/Daemon.java
          </URI>
          <URI>command/CommandScheduler.java
          </URI>
          <URI>vfs/context/ContextResourceMap.java
          </URI>
          <URI>task/TaskScheduler.java
          </URI>
        </resources>
      </scm:Change>

      <scm:Change>
        <note>
          <scm:Note>[SCPUBLIC-48] Methods on structs should execute atomically 
            against a given struct
          </scm:Note>
        </note>
        
        <path>source/spiralcraft/lang/parser/StructNode.java
        </path>
      </scm:Change>
      
      <scm:Change>
        <notes>
          <scm:Note>[SCPUBLIC-49] Implement @last meta-property to function 
            like @top
          </scm:Note>
          
          <path>source/spiralcraft/lang/spi/AbstractReflector.java
          </path>
        </notes>
      </scm:Change>

      <scm:Change>
        <notes>
          <scm:Note>[SCPUBLIC-50] Edit task should be easily configurable for 
            create-only mode
          </scm:Note>
          
          <path>source/spiralcraft/data/task/Edit.java
          </path>
        </notes>
      </scm:Change>
      
      <scm:Change>
        <notes>
          <scm:Note>[SCPUBLIC-51] vfs.Container interface should extend
            vfs.Resource
          </scm:Note>
          
          <path>source/spiralcraft/vfs/Container.java
          </path>
        </notes>
      </scm:Change>

      <scm:Change>
        <notes>
          <scm:Note>[SCPUBLIC-52] Extend task and test packages to support 
            stress testing
          </scm:Note>
          <scm:Note>LoadGroup allows for configuration of stress factors
          </scm:Note>
          <scm:Note>New Cycle and Fork components for repetitive and parallel
            tasks.
          </scm:Note>
          <scm:Note>Factored the "execute the command of a nested Scenario"
            pattern into a new CommandTask from Chain,Sequence and Reference
          </scm:Note>
          <scm:Note>Scenario has protected "importContext" field to supply
            the parameter context to the bindImports method.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/
        </path>
        
        <resources>
          <URI>test/LoadGroup.java
          </URI>
          <URI>task/Chain.java
          </URI>
          <URI>task/CommandTask.java
          </URI>
          <URI>task/Cycle.java
          </URI>
          <URI>task/Eval.java
          </URI>
          <URI>task/Fork.java
          </URI>
          <URI>task/Reference.java
          </URI>
          <URI>task/Scenario.java
          </URI>
          <URI>task/Sequence.java
          </URI>
        </resources>
      </scm:Change>

    </detail>
  </scm:Change>
  
  <scm:Change>
  
    <revision>0.4.11.5
    </revision>
    
    <authorId>miketoth
    </authorId>
    
    <date>2010-09-24
    </date>
  
    <notes>

    </notes>
    
    <detail>
    
      <scm:Change>
        <notes>
          <scm:Note>Expose "overwrite" property for Copy task
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/vfs/task/Copy.java
        </path>
        
      </scm:Change>

      <scm:Change>
        <notes>
          <scm:Note>Provide function to strip XML tags from a document
            fragment.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/sax/
        </path>
        
        <resources>
          <URI>Element.java
          </URI>
          <URI>SaxUtil.java
          </URI>
        </resources>
      </scm:Change>

    </detail>
  </scm:Change>
    
  <scm:Change>
  
    <revision>0.4.11.4
    </revision>
    
    <authorId>miketoth
    </authorId>
    
    <date>2010-09-21
    </date>
  
    <notes>

    </notes>
    
    <detail>
      <scm:Change>
        <notes>
          <scm:Note>Require that all namespace prefixes in Expressions are 
            resolved at parse-time instead of generating a hard-to-trace
            warning.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/
        </path>
        
        <resources>
          <URI>common/namespace/UnresolvedPrefixException.java
          </URI>
          <URI>lang/ParseException.java
          </URI>
          <URI>lang/parser/AbsoluteFocusNode.java
          </URI>
          <URI>lang/parser/ExpressionParser.java
          </URI>
          <URI>lang/parser/Node.java
          </URI>
          <URI>lang/parser/ObjectLiteralNode.java
          </URI>
          <URI>lang/parser/StructNode.java
          </URI>
          <URI>lang/parser/TypeFocusNode.java
          </URI>
        </resources>
      </scm:Change>
    </detail>
  </scm:Change>

  <scm:Change>
  
    <revision>0.4.11.3
    </revision>
    
    <authorId>miketoth
    </authorId>
    
    <date>2010-09-16
    </date>
  
    <notes>

    </notes>
    
    <detail>
      <scm:Change>
        <notes>
          <scm:Note>Implement Renderer interface using an Expression
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/lang/util/ExpressionRenderer.java
        </path>
      </scm:Change>

      <scm:Change>
        <notes>
          <scm:Note>Fix NPE checking a non-absolute URI against a 
            DataReflector
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/data/lang/DataReflector.java
        </path>
      </scm:Change>

      <scm:Change>
        <notes>
          <scm:Note>Add (context, query) constructor to Fetch
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/data/task/Fetch.java
        </path>
      </scm:Change>
      
      <scm:Change>
        <notes>
          <scm:Note>Fix NPE in expression parser when expression starts with
            "*"
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/lang/parser/ExpressionParser.java
        </path>
      </scm:Change>
      
      <scm:Change>
        <notes>
          <scm:Note>A Reflector for Void.TYPE (null) should cause 
            getCommonType(type) to return the specified type.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/lang/spi/AbstractReflector.java
        </path>
      </scm:Change>
      
      <scm:Change>
        <notes>
          <scm:Note>Synchronize CommandScheduler around started flag to
            prevent stray Commands from running after stop.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/command/CommandScheduler.java
        </path>
      </scm:Change>
      
      <scm:Change>
        <notes>
          <scm:Note>[SCPUBLIC-42] VFS Copy task features
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/
        </path>
        
        <resources>
          <URI>util/PathPattern.java
          </URI>
          <URI>util/URIUtil.java
          </URI>
          <URI>vfs/batch/Search.java
          </URI>
          <URI>vfs/batch/Search.java
          </URI>
          <URI>vfs/filters/ListFilter.java
          </URI>
          <URI>vfs/filters/PatterntFilter.java
          </URI>
          <URI>vfs/task/Copy.java
          </URI>
        </resources>
      </scm:Change>
          
      <scm:Change>
        <notes>
          <scm:Note>[SCPUBLIC-41] Array typed fields should be represented as 
            native arrays in Tuple data
          </scm:Note>
          <scm:Note>Fix NPE in ArrayType.toData()
          </scm:Note>
          <scm:Note>ReflectionField writes a native array of "primitives" 
            to aggregate methods 
          </scm:Note>
          <scm:Note>DataHandler converts array types to primitive arrays
            on input
          </scm:Note>
          <scm:Note>DataWriter converts native array type to an Aggregate
            on output
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/
        </path>
        
        <resources>
          <URI>data/core/ArrayType.java
          </URI>
          <URI>data/reflect/ReflectionField.java
          </URI>
          <URI>data/sax/DataHandler.java
          </URI>
          <URI>data/sax/DataWriter.java
          </URI>
        
        </resources>
      </scm:Change>
    </detail>
  </scm:Change>
      

  <scm:Change>
  
    <revision>0.4.11.2
    </revision>
    
    <authorId>miketoth
    </authorId>
    
    <date>2010-09-10
    </date>
  
    <notes>

    </notes>
    
    <detail>
      <scm:Change>
        <notes>
          <scm:Note>[SCPUBLIC-39] Structs should support method call syntax to 
            invoke member functors that modify the Struct
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/lang/parser/StructNode.java
        </path>
      </scm:Change>
          
      <scm:Change>
        <notes>
          <scm:Note>[SCPUBLIC-38]  Need way to read data from an XML resource 
            from within an expression
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/data/sax/ParseXml.java
        </path>
      </scm:Change>
      
      <scm:Change>
        <notes>
          <scm:Note>[SCPUBLIC-29] Fix various corner cases associated with
            no-default-namespace scenario.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/lang/
        </path>
        
        <resources>
          <URI>BaseFocus.java
          </URI>
          <URI>parser/AbsoluteFocusNode.java
          </URI>
          <URI>parser/Node.java
          </URI>         
        </resources>
      </scm:Change>

      <scm:Change>
        <notes>
          <scm:Note>[SCPUBLIC-37] Need mechanism to run scheduled tasks in a 
            daemon outside of any UI service or UI context
          </scm:Note>
          <scm:Note>Space accomodates child services. Store implements
            Contextual.
          </scm:Note>
          <scm:Note>SchedulerService runs multiple TaskSchedulers
            which share the same context.
          </scm:Note>
          <scm:Note>CommandScheduler accepts a Scheduler component to permit
            the grouping of threads and to provide tasks that run on
            separate threads the ability to use contextual 
            inheritable ThreadLocals.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/
        </path>
        
        <resources>
          <URI>command/CommandScheduler.java
          </URI>
          <URI>data/Space.java
          </URI>
          <URI>data/access/Store.java
          </URI>
          <URI>lang/spi/CachedChannel.java
          </URI>
          <URI>lang/spi/SchedulerService.java
          </URI>          
        </resources>
      </scm:Change>
    </detail>
  </scm:Change>
  
  <scm:Change>
  
    <revision>0.4.11.1
    </revision>
    
    <authorId>miketoth
    </authorId>
    
    <date>2010-09-05
    </date>
  
    <notes>

    </notes>
    
    <detail>
      <scm:Change>
        <notes>
          <scm:Note>Refactor low level XML SAX components and ParseTree 
            implementation to improve access to API in various application
            scenarios such as manipulating String based XML fragments.
          </scm:Note>
          <scm:Note>Make the ParseTree conform to the 
            spiralcraft.util.tree.Tree interfaces to allow for consumption by
            more generic interfaces.
          </scm:Note>          
          <scm:Note>Provide an "ellipsize" function to truncate XML over
            a certain number of characters.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/
        </path>
        
        <resources>
          <URI>builder/AssemblyLoader.java
          </URI>
          <URI>sax/Characters.java
          </URI>
          <URI>sax/Document.java
          </URI>
          <URI>sax/Element.java
          </URI>
          <URI>sax/Node.java
          </URI>
          <URI>sax/ParseTreeFactory.java
          </URI>
          <URI>sax/SaxUtil.java
          </URI>
          <URI>sax/TreeFilter.java
          </URI>
          <URI>sax/XmlFilter.java
          </URI>
          <URI>sax/XmlWriter.java
          </URI>
          <URI>test/xml/XmlEncoder.java
          </URI>
          <URI>util/MutableInt.java
          </URI>
          <URI>util/MutableReference.java
          </URI>
          <URI>util/tree/DepthFirstSearch.java
          </URI>
          <URI>util/tree/DepthFirstTraversal.java
          </URI>
        
        </resources>
      
      </scm:Change>
    </detail>
    
  </scm:Change>

  <scm:Change>
  
    <revision>0.4.11
    </revision>
    
    <authorId>miketoth
    </authorId>
    
    <date>2010-08-30
    </date>
  
    <notes>

    </notes>
    
    <detail>
      <scm:Change>
        <notes>
          <scm:Note>Add suffix(String input,char delimiter) method to
            StringUtil for e.g. computing filename suffixes.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/util/string/StringUtil.java
        </path>
      
      </scm:Change>
    
      <scm:Change>
        <notes>
          <scm:Note>[SCPUBLIC-30] Fix NPE when a BeanReflector finds an
             IndexedPropertyDescriptor with no standard accessors
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/lang/
        </path>
        
        <resources>
          <URI>parser/methodCallNode.java
          </URI>
          <URI>reflect/BeanPropertyTranslator.java
          </URI>
          <URI>reflect/BeanReflector.java
          </URI>
        </resources>
      
      </scm:Change>
      
      <scm:Change>
      
        <notes>
          <scm:Note>[SCPUBLIC-29] Namespace definitions should be exclusively 
            document-scoped
          </scm:Note>
          <scm:Note>Provide for no-default-namespace scenario
          </scm:Note>    
        </notes>
        
        <path>source/spiralcraft/
        </path>
        
        <resources>
          <URI>common/namespace/PrefixResolver.java
          </URI>
          <URI>common/namespace/StandardPrefixResolver.java
          </URI>
          <URI>builder/AssemblyClass.java
          </URI>
          <URI>data/access/Updater.java
          </URI>
          <URI>data/sax/AbstractFrameHandler.java
          </URI>
          <URI>data/sax/DataHandlerBase.java
          </URI>
          <URI>data/sax/RecursiveFrame.java
          </URI>
          <URI>lang/parser/Node.java
          </URI>
        </resources>
      </scm:Change>

      <scm:Change>
      
        <notes>
          <scm:Note>[SCPUBLIC-32] VFS Resources should capture the URI used to 
            resolve them in addition to the canonical URI
          </scm:Note>   
        </notes>
        
        <path>source/spiralcraft/vfs/
        </path>
        
        <resources>
          <URI>Resource.java
          </URI>
          <URI>classpath/ClasspathResource.java
          </URI>
          <URI>context/Authority.java
          </URI>
          <URI>context/ContextResource.java
          </URI>
          <URI>file/FileResource.java
          </URI>
          <URI>spi/AbstractResource.java
          </URI>
          <URI>uri/URLResource.java
          </URI>
          <URI>util/ResourceWrapper.java
          </URI>
        </resources>
      </scm:Change>

      <scm:Change>
      
        <notes>
          <scm:Note>[SCPUBLIC-31] VFS should provide a simpler method to create
            directory paths
          </scm:Note>
          <scm:Note>vfs.Container now has an ensureChildContainer() interface
            to assist in the dynamic creation of directory trees.
          </scm:Note>    
        </notes>
        
        <path>source/spiralcraft/vfs
        </path>
        
        <resources>
          <URI>Container.java
          </URI>
          <URI>spi/AbstractResource.java
          </URI>
        </resources>
      </scm:Change>
    </detail>
  </scm:Change>
      

  <scm:Change>
  
    <revision>0.4.10.3
    </revision>
    
    <authorId>miketoth
    </authorId>
    
    <date>2010-07-31
    </date>
  
    <notes>

    </notes>
    
    <detail>
      <scm:Change>
      
        <notes>
          <scm:Note>[SCPUBLIC-19] Implement Sort channel function
          </scm:Note>    
        </notes>
        
        <path>source/spiralcraft/lang/functions
        </path>
        
        <resources>
          <URI>Sort.java
          </URI>
          <URI>Ordering.java
          </URI>
        </resources>
      </scm:Change>
      
      <scm:Change>
      
        <notes>
          <scm:Note>[SCPUBLIC-20] syntax error NPE
          </scm:Note>    
          <scm:Note>[SCPUBLIC-21] Add types to error message for
            single arg functor call
          </scm:Note>    
        </notes>
        
        <path>source/spiralcraft/lang/
        </path>
        
        <resources>
          <URI>parser/ExpressionParser.java
          </URI>
          <URI>spi/AbstractFunctorChannel.java
          </URI>
        </resources>
      </scm:Change>      
    </detail>
  </scm:Change>
  
  <scm:Change>
  
    <revision>0.4.10.2
    </revision>
    
    <authorId>miketoth
    </authorId>
    
    <date>2010-07-29
    </date>
  
    <notes>

    </notes>
    
    <detail>
      <scm:Change>
      
        <notes>
          <scm:Note>[SCPUBLIC-18] Simpler way to specify array content 
            involving string-constructable immutables in XML data file
          </scm:Note>
          <scm:Note>Created a common "@Immutable" annotation
          </scm:Note>      
        </notes>
        
        <path>source/spiralcraft/
        </path>
        
        <resources>
          <URI>common/Immutable.java
          </URI>
          <URI>data/core/ArrayType.java
          </URI>
          <URI>data/reflect/ReflectionType.java
          </URI>
        </resources>
      </scm:Change>
    </detail>
  </scm:Change>
  
  <scm:Change>
  
    <revision>0.4.10.1
    </revision>
    
    <authorId>miketoth
    </authorId>
    
    <date>2010-07-27
    </date>
  
    <notes>

    </notes>
    
    <detail>
      <scm:Change>
      
        <notes>
          <scm:Note>[SCPUBLIC-4] Empty subcontext expression throws AIOOB 
            exception on bind
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/lang/parser/SubcontextNode.java
        </path>
      </scm:Change>

      <scm:Change>
      
        <notes>
          <scm:Note>[SCPUBLIC-5] Autobox primitive types when resolving members
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/lang/reflect/BeanReflector.java
        </path>
      </scm:Change>

      <scm:Change>      
        <notes>
          <scm:Note>[SCPUBLIC-9] Remove spurious debug message when exec'ing a command functor
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/lang/reflect/CommandFunctorChannel.java
        </path>
      </scm:Change>

      <scm:Change>      
        <notes>
          <scm:Note>[SCPUBLIC-8] Support the use of functors as members of structs
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/lang/
        </path>

        <resources>
          <URI>lang/spi/AbstractFunctorChannel.java
          </URI>
          <URI>lang/parser/StructNode.java
          </URI>
        </resources>
        
      </scm:Change>
            
      <scm:Change>      
        <notes>
          <scm:Note>[SCPUBLIC-10] General purpose accumulators required to manipulate data inside reduce constructs
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/lang/
        </path>
        
        <resources>
          <URI>lang/functions/Induce.java
          </URI>
          <URI>lang/functions/Format.java
          </URI>
          <URI>lang/spi/Accumulator.java
          </URI>
        </resources>
      </scm:Change>
      
      <scm:Change>      
        <notes>
          <scm:Note>[SCPUBLIC-11] Provide means to perform VFS IO from expressions
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/vfs/
        </path>
        
        <resources>
          <URI>vfs/IO.java
          </URI>
          <URI>vfs/util/ByteArrayResource.java
          </URI>
        </resources>
      </scm:Change>
            
      <scm:Change>      
        <notes>
          <scm:Note>[SCPUBLIC-13] Command scheduler should output human 
            readable next-scheduled date
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/command/CommandScheduler.java
        </path>

      </scm:Change>
      
      <scm:Change>      
        <notes>
          <scm:Note>[SCPUBLIC-14] Command scheduler does not pick up basis time
          </scm:Note>
          <scm:Note>Added new constructor to Schedule for testing purposes,
            and added debugging output
          </scm:Note>
          <scm:Note>Added Instant as a standard type
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/
        </path>
        
        <resources>
          <URI>time/Schedule.java
          </URI>
          <URI>reflect/ReflectionType.java
          </URI>
        </resources>

      </scm:Change>      
    </detail>
  </scm:Change>
  

  <scm:Change>
  
    <revision>0.4.10
    </revision>
    
    <authorId>miketoth
    </authorId>
    
    <date>2010-07-25
    </date>
  
    <notes>
      <scm:Note>Refactoring to propagate original binding context Focus through
        Channels to support lazy-binding and subsequent binding-caching while
        ensuring upward references.
      </scm:Note>
      <scm:Note>Refactor spiralcraft.registry and spiralcraft.service patterns
        into spiralcraft.app component model. 
      </scm:Note>
      <scm:Note>Fix NPE in Reference task when chain is null
      </scm:Note>
      <scm:Note>Fix NPE after parsing expression with binary operator missing
        second operand.
      </scm:Note>
      <scm:Note>Fix issue where the buffer type is written to the store instead
        of the data type after editing an externally generated Tuple.
      </scm:Note>
      <scm:Note>Make Expression more code-friendly by adding adding static
        methods to resolve class instances and Focus URIs.
      </scm:Note>
      <scm:Note>Fix issue where base type unique key DI constraints are not 
        checked on update
      </scm:Note>
      <scm:Note>Make Instant a first class data type
      </scm:Note>
      <scm:Note>Integrate filtering logic into Tree function
      </scm:Note>
    </notes>
    
    <detail>
      <scm:Change>
      
        <notes>
          <scm:Note>Provide spiralcraft.lang function to resolve URI resources
          </scm:Note>

        </notes>
      
        <path>source/spiralcraft/vfs/Resolve.java
        </path>
      </scm:Change>

      <scm:Change>
      
        <notes>
          <scm:Note>Integrate filtering logic into Tree function
          </scm:Note>

        </notes>
      
        <path>source/spiralcraft/
        </path>
        
        <resources>
          <URI>lang/functions/Tree.java
          </URI>
          <URI>lang/spi/AbstractChannel.java
          </URI>
          <URI>lang/util/FilterIterable.java
          </URI>
        </resources>
      </scm:Change>

      <scm:Change>
      
        <notes>
          <scm:Note>Make Instant a first class data type
          </scm:Note>

        </notes>
      
        <path>source/spiralcraft/
        </path>
        
        <resources>
          <URI>data/types/standard/InstantType.java
          </URI>
          <URI>util/string/StringConverter.java
          </URI>
          <URI>util/string/InstantToString.java
          </URI>
        </resources>
      </scm:Change>
    
      <scm:Change>
      
        <notes>
          <scm:Note>Fix issue where base type unique key DI constraints are not 
            checked on update
          </scm:Note>
          <scm:Note>Added getKeys() method to Type to compile base type keys
          </scm:Note>
        </notes>
      
        <path>source/spiralcraft/data/
        </path>
        
        <resources>
          <URI>Key.java
          </URI>
          <URI>Type.java
          </URI>
          <URI>core/KeyImpl.java
          </URI>
          <URI>core/SchemeImpl.java
          </URI>
          <URI>core/TypeImpl.java
          </URI>
          <URI>spi/KeyedListAggregate.java
          </URI>
        </resources>
      </scm:Change>
    
      <scm:Change>
      
        <notes>
          <scm:Note>Make Expression more code-friendly by adding adding static
        methods to resolve class instances and Focus URIs.
          </scm:Note>
        </notes>
      
        <path>source/spiralcraft/lang/Expression.java
        </path>

      </scm:Change>

      <scm:Change>
      
        <notes>
          <scm:Note>Added debug logging to DataSession and other objects in
            the update path.
          </scm:Note>
        </notes>
      
        <path>source/spiralcraft/data/
        </path>
        
        <resources>
          <URI>session/DataSession.java
          </URI>
          <URI>data/DataConsumer.java
          </URI>
          <URI>data/access/DataSynchronizer.java
          </URI>
          <URI>data/access/Entity.java
          </URI>
          <URI>data/core/QueryField.java
          </URI>
          <URI>data/flatfile/Parser.java
          </URI>
          <URI>data/flatfile/Writer.java
          </URI>
          <URI>data/lang/TupleReflector.java
          </URI>
          <URI>data/session/BufferTuple.java
          </URI>
          <URI>data/session/DataSession.java
          </URI>
          <URI>data/session/DataSessionFocus.java
          </URI>
          <URI>data/util/DataAggregator.java
          </URI>
          <URI>data/util/DebugDataConsumer.java
          </URI>
          <URI>data/xml/XmlStore.java
          </URI>
          <URI>lang/spi/AbstractReflector.java
          </URI>
          <URI>util/ArrayUtil.java
          </URI>
        </resources>
      </scm:Change>

      <scm:Change>
      
        <notes>
          <scm:Note>Fix issue where the buffer type is written to the store
            instead of the data type after editing an externally generated 
            Tuple.
          </scm:Note>
          <scm:Note>Ensure that Tuples constructed with Types are 
            constructed using the local Scheme and not the combined scheme
          </scm:Note>
        </notes>
      
        <path>source/spiralcraft/data/
        </path>
        
        <resources>
          <URI>xml/XmlStore.java
          </URI>
          <URI>spi/EditableArrayTuple.java
          </URI>          
        </resources>
      </scm:Change>

      <scm:Change>
      
        <notes>
          <scm:Note>Refactoring to propagate original binding context Focus
            through Channels to support lazy-binding and subsequent
            binding-caching while ensuring upward references.
          </scm:Note>
          <scm:Note>Channels that perform an operation against the content
            of a source Channel now inherit from SourceChannel in order
            to propogate the binding context.
          </scm:Note>
          <scm:Note>Lazy binding type members now use Channel.getContext()
            to bind internals.
          </scm:Note>          
          <scm:Note>Focus must now be constructed with a parent, which
            is made final.
          </scm:Note>
          <scm:Note>Method no longer accepts a Focus parameter.
          </scm:Note>
          <scm:Note>Renamed parameters in field to clarify that the supplied
            Focus is the parameter context of ChannelFactory.
          </scm:Note>
          <scm:Note>Removed unused member from AbstractChannel
          </scm:Note>
        </notes>
      
        <path>source/spiralcraft/
        </path>
        
        <resources>
          <URI>builder/Assembly.java
          </URI>
          <URI>builder/PropertyBinding.java
          </URI>
          <URI>builder/AssemblyClass.java
          </URI>
          <URI>builder/BuilderChannel.java
          </URI>
          <URI>data/access/DataSynchronizer.java
          </URI>        
          <URI>data/core/FieldImpl.java
          </URI>             
          <URI>data/core/TaskMethod.java
          </URI>             
          <URI>data/core/UniqueRule.java
          </URI>             
          <URI>data/core/CalculatedFieldImpl.java
          </URI>             
          <URI>data/core/QueryField.java
          </URI>         
          <URI>data/core/KeyField.java
          </URI>                 
          <URI>data/Field.java
          </URI>             
          <URI>data/Method.java
          </URI>             
          <URI>data/lang/TupleDelegate.java
          </URI>            
          <URI>data/lang/TupleFocus.java
          </URI> 
          <URI>data/lang/TupleReflector.java
          </URI> 
          <URI>data/lang/AggregateConstructorChannel.java
          </URI> 
          <URI>data/lang/AggregateSelectChannel.java
          </URI> 
          <URI>data/lang/CursorChannel.java
          </URI> 
          <URI>data/lang/DataChannel.java
          </URI> 
          <URI>data/lang/TupleConstructorChannel.java
          </URI> 
          <URI>data/query/EquiJoin.java
          </URI>             
          <URI>data/persist/AbstractXmlObject.java
          </URI>             
          <URI>data/reflect/ReflectionMethod.java
          </URI>             
          <URI>data/session/BufferChannel.java
          </URI> 
          <URI>data/session/BufferField.java
          </URI>
          <URI>data/spi/DataKeyFunction.java
          </URI>
          <URI>data/task/Collect.java
          </URI>
          <URI>data/util/RelationalMap.java
          </URI>
          <URI>lang/Assignment.java
          </URI>
          <URI>lang/BaseFocus.java
          </URI>
          <URI>lang/Channel.java
          </URI>
          <URI>lang/CompoundFocus.java
          </URI>
          <URI>lang/SimpleFocus.java
          </URI>
          <URI>lang/StaticFocus.java
          </URI>
          <URI>lang/TeleFocus.java
          </URI>
          <URI>lang/functions/Tree.java
          </URI>
          <URI>lang/parser/BinaryOpNode.java
          </URI>
          <URI>lang/parser/ListNode.java
          </URI>
          <URI>lang/parser/ObjectLiteralNode.java
          </URI>
          <URI>lang/parser/RangeNode.java
          </URI>
          <URI>lang/parser/StructNode.java
          </URI>
          <URI>lang/parser/SubcontextNode.java
          </URI>
          <URI>lang/spi/AbstractChannel.java
          </URI>
          <URI>lang/spi/AbstractReflector.java
          </URI>
          <URI>lang/spi/AbstractFunctorChannel.java
          </URI>
          <URI>lang/spi/Accumulator.java
          </URI>
          <URI>lang/spi/ArrayConstructorChannel.java
          </URI>
          <URI>lang/spi/ArrayContainsChannel.java
          </URI>
          <URI>lang/spi/ArrayIndexChannel.java
          </URI>
          <URI>lang/spi/ArrayRangeChannel.java
          </URI>
          <URI>lang/spi/ArraySelectChannel.java
          </URI>
          <URI>lang/spi/AspectChannel.java
          </URI>
          <URI>lang/spi/AssignmentChannel.java
          </URI>
          <URI>lang/spi/BindingChannel.java
          </URI>
          <URI>lang/spi/ClosureChannel.java
          </URI>
          <URI>lang/spi/ClosureFocus.java
          </URI>
          <URI>lang/spi/GatherChannel.java
          </URI>
          <URI>lang/spi/IterableContainsChannel.java
          </URI>
          <URI>lang/spi/IterableRangeChannel.java
          </URI>
          <URI>lang/spi/IterableSelectChannel.java
          </URI>
          <URI>lang/spi/IterationCursorChannel.java
          </URI>
          <URI>lang/spi/IterationProjector.java
          </URI>
          <URI>lang/spi/ListRangeChannel.java
          </URI>
          <URI>lang/spi/LogChannel.java
          </URI>
          <URI>lang/spi/PrimitiveArrayConstructorChannel.java
          </URI>
          <URI>lang/spi/ProxyChannel.java
          </URI>
          <URI>lang/spi/SourceChannel.java
          </URI>
          <URI>lang/spi/ThreadLocalChannel.java
          </URI>
          <URI>lang/spi/TranslatorChannel.java
          </URI>
          <URI>lang/spi/TuneChannel.java
          </URI>
          <URI>lang/spi/ViewCache.java
          </URI>
          <URI>text/translator/Translator.java
          </URI>
        </resources>      
        
      </scm:Change>

      <scm:Change>
      
        <notes>
          <scm:Note>Refactor spiralcraft.registry and spiralcraft.service
           patterns into spiralcraft.app component model. 
          </scm:Note>
          <scm:Note>Removed the spiralcraft.registry package and all
            references
          </scm:Note>
        </notes>
      
        <path>source/spiralcraft/
        </path>

        <resources>
          <URI>registry/Registry.java
          </URI>
          <URI>registry/LocalRegistryNode.java
          </URI>
          <URI>registry/RegistryNode.java
          </URI>
          <URI>registry/Registrant.java
          </URI>
          <URI>registry/RegistryPathObject.java
          </URI>
          <URI>builder/Assembly.ava
          </URI>
          <URI>builder/PropertyBinding.ava
          </URI>          
          <URI>data/Space.java
          </URI>         
          <URI>data/core/TaskMethod.java
          </URI>       
          <URI>data/persist/PersistentReference.java
          </URI> 
          <URI>data/persist/AbstractXmlObject.java
          </URI>                 
          <URI>exec/Executor.java
          </URI>                 
          <URI>log/jul/RegistryLogger.java
          </URI>                 
          <URI>service/Daemon.java
          </URI>                 
          <URI>service/Service.java
          </URI>                 
          <URI>service/ServiceException.java
          </URI>                 
          <URI>service/ServiceGroup.java
          </URI>                 
          <URI>service/ThreadService.java
          </URI>                 
          <URI>task/TaskRunner.java
          </URI>                 
          <URI>ui/UIService.java
          </URI>                 
          <URI>ui/ViewService.java
          </URI>                 
        </resources>      
      </scm:Change>

      <scm:Change>
      
        <notes>
          <scm:Note>Fix NPE in Reference task when chain is null
          </scm:Note>
        </notes>
      
        <path>source/spiralcraft/task/Reference.java
        </path>
      
      </scm:Change>

      <scm:Change>
      
        <notes>
          <scm:Note>Fix NPE after parsing expression with binary operator missing
        second operand.
          </scm:Note>
        </notes>
      
        <path>source/spiralcraft/lang/parser/ExpressionParser.java
        </path>
      
      </scm:Change>

    </detail>
  </scm:Change>
  
  
  <scm:Change>
  
    <revision>0.4.9
    </revision>
    
    <authorId>miketoth
    </authorId>
    
    <date>2010-07-12
    </date>
  
    <notes>
      <scm:Note>Fix non-compliant behavior where "+" would be erroneously 
          treated as encoding a space in paths encoded and decoded by the 
          URLEncoder. "+" maps to space only in the query portion of a URL.
      </scm:Note>
      <scm:Note>Added Path.trim() to remove leading and trailing slashes
      </scm:Note>
      <scm:Note>Time API enhancements
      </scm:Note>
      <scm:Note>Better exception handling for test assertions
      </scm:Note>
      <scm:Note>Task scheduling functionality
      </scm:Note>
      <scm:Note>ELaine enhancement to propagate "constant" values through
        strict functions declared by Translators.
      </scm:Note>
    </notes>

    <detail>
      <scm:Change>
      
        <notes>
          <scm:Note>Fix non-compliant behavior where "+" would be erroneously 
            treated as encoding a space in paths encoded and decoded by the 
            URLEncoder. "+" maps to space only in the query portion of a URL.
          </scm:Note>
        </notes>
      
        <path>source/spiralcraft/text/html/URLEncoder.java
        </path>
      
      </scm:Change>

      <scm:Change>
      
        <notes>
          <scm:Note>Added Path.trim() to remove leading and trailing delimiters
          </scm:Note>
        </notes>
      
        <path>source/spiralcraft/util/Path.java
        </path>
      
      </scm:Change>
    
      <scm:Change>
      
        <notes>
          <scm:Note>Time representation system, initial release
          </scm:Note>
          <scm:Note>Clock now exposes exact millis and adjusted nanos
          </scm:Note>
        </notes>
      
        <path>source/spiralcraft/time/
        </path>
      
        <resources>
          <URI>Calendar.java
          </URI>
          <URI>Chronology.java
          </URI>
          <URI>Chronom.java
          </URI>
          <URI>Clock.java
          </URI>
          <URI>Duration.java
          </URI>
          <URI>Frequency.java
          </URI>
          <URI>Instant.java
          </URI>
          <URI>Interval.java
          </URI>
          <URI>RecurrenceRule.java
          </URI>
          <URI>Recurrent.java
          </URI>
          <URI>Schedule.java
          </URI>
          <URI>SimpleInstantFormat.java
          </URI>
          <URI>TimeField.java
          </URI>
          <URI>TimeX.java
          </URI>
        </resources>
      </scm:Change>
          
      <scm:Change>
      
        <notes>
          <scm:Note>Better exception reporting for test Assertions
          </scm:Note>
        </notes>
      
        <path>source/spiralcraft
        </path>
      
        <resources>
          <URI>test/Assertion.java
          </URI>
          <URI>test/TestResult.java
          </URI>
          <URI>test/TestFailedException.java
          </URI>
          <URI>test/TestGroup.java
          </URI>
          <URI>util/lang/ExceptionUtil.java
          </URI>
        </resources>
      </scm:Change>

      <scm:Change>
      
        <notes>
          <scm:Note>Task scheduling functionality
          </scm:Note>
        </notes>
      
        <path>source/spiralcraft/
        </path>
        
        <resources>
          <URI>command/CommandScheduler.java
          </URI>
          <URI>task/TaskScheduler.java
          </URI>
        
        </resources>
      
      </scm:Change>

      <scm:Change>
      
        <notes>
          <scm:Note>ELaine enhancement to propagate "constant" values through
            strict functions declared by Translators.
          </scm:Note>
          
        </notes>
        
        <path>source/spiralcraft/
        </path>
        
        <resources>
          <URI>lang/parser/BinaryOpNode.java
          </URI>
          <URI>lang/parser/ConditionalNode.java
          </URI>
          <URI>lang/parser/EqualityNode.java
          </URI>
          <URI>lang/parser/ExclusiveOrNode.java
          </URI>
          <URI>lang/parser/LogicalAndNode.java
          </URI>
          <URI>lang/parser/LogicalNegateNode.java
          </URI>
          <URI>lang/parser/LogicalOrNode.java
          </URI>
          <URI>lang/parser/NumericNegateNode.java
          </URI>
          <URI>lang/parser/RelationalNode.java
          </URI>
          <URI>lang/parser/StructNode.java
          </URI>
          <URI>lang/parser/SubcontextNode.java
          </URI>
          <URI>lang/reflect/ArrayLengthTranslator.java
          </URI>
          <URI>lang/reflect/BeanFieldTranslator.java
          </URI>
          <URI>lang/reflect/BeanPropertyTranslator.java
          </URI>
          <URI>lang/reflect/BeanReflector.java
          </URI>
          <URI>lang/reflect/ConstructorTranslator.java
          </URI>
          <URI>lang/reflect/IterableLengthTranslator.java
          </URI>
          <URI>lang/reflect/MethodTranslator.java
          </URI>
          <URI>lang/spi/ArrayEqualityTranslator.java
          </URI>
          <URI>lang/spi/ArrayIndexTranslator.java
          </URI>
          <URI>lang/spi/IterableIndexTranslator.java
          </URI>
          <URI>lang/spi/MapIndexTranslator.java
          </URI>
          <URI>lang/spi/NamespaceAttribute.java
          </URI>
          <URI>lang/spi/ReverseTranslator.java
          </URI>
          <URI>lang/spi/StringConcatTranslator.java
          </URI>
          <URI>lang/spi/Translator.java
          </URI>
          <URI>lang/spi/TranslatorChannel.java
          </URI>
          <URI>data/lang/AggregateIndexTranslator.java
          </URI>
          <URI>data/lang/FieldTranslator.java
          </URI>
          <URI>data/lang/ToDataTranslator.java
          </URI>
          <URI>data/lang/ToStringTranslator.java
          </URI>
        </resources>
        
      </scm:Change>
      
      <scm:Change>
      
        <notes>
          <scm:Note>Don't allow BeanReflectors to be overridden by
            data PrimitiveReflectors
          </scm:Note>
        </notes>
      
        <path>source/spiralcraft/data/lang/PrimitiveReflector.java
        </path>
      
      </scm:Change>      
      
      <scm:Change>
      
        <notes>
          <scm:Note>Provide a way to decorate methods that return an
            Iterator.
          </scm:Note>
        </notes>
      
        <path>source/spiralcraft/lang/spi/IteratorIterationDecorator.java
        </path>
      
      </scm:Change>      

    </detail>
  </scm:Change>
  
  
  <scm:Change>
    <revision>0.4.8.3
    </revision>
    
    <authorId>miketoth
    </authorId>
    
    <date>2010-06-03
    </date>
    
    <notes>
      <scm:Note>Fix bug in AssemblyType.fromData(), implement
        AssemblyType.toData()
      </scm:Note>
      <scm:Note>Removed unused method getMemberNames() in AssemblyClass
      </scm:Note>
      <scm:Note>Fix typo in TaskCommand.getError() signature
      </scm:Note>
    </notes>
    
    <path>source/spiralcraft/
    </path>
    
    <resources>
      <URI>data/reflect/AssemblyType.java
      </URI>
      <URI>builder/AssemblyClass.java
      </URI>
      <URI>task/TaskCommand.java
      </URI>
    </resources>
  </scm:Change>
  
  <scm:Change>
    <revision>0.4.8.2
    </revision>
    
    <authorId>miketoth
    </authorId>
    
    <date>2010-05-13
    </date>
    
    <notes>
      <scm:Note>Fix issue where '+' is not escaped when encoding URL query
        data.
      </scm:Note>
    </notes>
    
    <path>source/spiralcraft/
    </path>
    
    <resources>
      <URI>text/html/URLDataEncoder.java
      </URI>
    </resources>
  </scm:Change>

  <scm:Change>
    <revision>0.4.8.1
    </revision>
    
    <authorId>miketoth
    </authorId>
    
    <date>2010-05-04
    </date>
    
    <notes>
      <scm:Note>Fix misconfiguration of VFS MirrorSubscriber assembly
      </scm:Note>
      <scm:Note>Prevent/catch ClassCastException in ArrayListDecorator
      </scm:Note>
      <scm:Note>Make sure that ToDataTranslator returns appropriate
        Reflector for data aspect of type. This is accomplished by 
        DataReflector.getExternalizedInstance(), which ensures that
        the data aspect of the given Type is reflected instead of the
        normal aspect, which may be an instance of a native object or
        array.
      </scm:Note>
      <scm:Note>Tolerate a null path in Mirror
      </scm:Note>
    </notes>
    
    <path>source/spiralcraft
    </path>
    
    <resources>
      <URI>vfs/context/Mirror.assy.xml
      </URI>
      <URI>vfs/context/MirrorSubscriber.assy.xml
      </URI>
      <URI>lang/spi/ArrayListDecorator.java
      </URI>
      <URI>data/lang/ToDataTranslator.java
      </URI>
      <URI>data/lang/DataReflector.java
      </URI>
    </resources>
  </scm:Change>

  <scm:Change>
    <revision>0.4.8
    </revision>
    
    <authorId>miketoth
    </authorId>
    
    <date>2010-05-01
    </date>
    
    <notes>
      <scm:Note>VFS mirroring implementation
      </scm:Note>
      <scm:Note>spiralcraft.data enhancements to support VFS mirroring
        architecture
      </scm:Note>      
      <scm:Note>spiralcraft.lang enhancements to support VFS mirroring
        architecture
      </scm:Note>      
      <scm:Note>VFS enhancements for Volume management and 
        Resource metadata. 
      </scm:Note> 
      <scm:Note>VFS refactoring pass to better organize interfaces.
      </scm:Note>
      <scm:Note>Memory optimization pass.
      </scm:Note> 
      <scm:Note>Enhancements for evaluating expressions from the command line
      </scm:Note> 
      <scm:Note>A StandardPrefixResolver implementation has been promoted
        from SaxPrefixResolver and moved to common/namespace. 
      </scm:Note>
      <scm:Note>The "FocusChainObject" interface has been renamed to
        "Contextual". The ThreadedFocusChainObject interface has been replaced
        with a different interface ThreadContextual.
      </scm:Note>
      <scm:Note>spiralcraft.builder enhancements to facilitate the repeated
        use of a single Assembly as a factory to apply structure to multiple 
        pre-constructed objects.
      </scm:Note>      
    </notes>
    
    <details>
      
      <scm:Change>
        <notes>
          <scm:Note>The "FocusChainObject" interface has been renamed to
            "Contextual". The ThreadedFocusChainObject interface has been 
            replaced with a different interface ThreadContextual.
          </scm:Note>      
          <scm:Note>New ThreadContextual interface to represent Contextual
            implementations that publish Thread-specific references.
          </scm:Note>      
        </notes>
        
        <path>source/spiralcraft
        </path>
        
        <resources>
          <URI>lang/Contextual.java
          </URI>
          <URI>lang/FocusChainObject.java
          </URI>
          <URI>lang/ThreadContextual.java
          </URI>
          <URI>lang/ThreadedFocusChainObject.java
          </URI>
          <URI>data/Space.java
          </URI>
          <URI>data/editor/TupleEditor.java
          </URI>
          <URI>data/flatfile/FieldMapping.java
          </URI>
          <URI>data/flatfile/RecordFormat.java
          </URI>
          <URI>data/persist/AbstractXmlObject.java
          </URI>
          <URI>data/persist/PersistentReference.java
          </URI>
          <URI>data/sax/XmlDataRenderer.java
          </URI>
          <URI>data/spi/AbstractStore.java
          </URI>
          <URI>data/util/RelationalMap.java
          </URI>
          <URI>data/rest/RestClient.java
          </URI>
          <URI>data/rest/RestService.java
          </URI>
          <URI>lang/Operation.java
          </URI>
          <URI>lang/parser/ObjectLiteralNode.java
          </URI>
          <URI>lang/spi/ViewCache.java
          </URI>
          <URI>sax/ElementRenderer.java
          </URI>
          <URI>security/auth/Authenticator.java
          </URI>
          <URI>security/auth/AuthModule.java
          </URI>
          <URI>security/spi/CredentialValidator.java
          </URI>
          <URI>task/Scenario.java
          </URI>
          <URI>task/TaskRunner.java
          </URI>
          <URI>task/Reference.java
          </URI>
        </resources>
      </scm:Change>
      
      
      <scm:Change>
        <notes>
          <scm:Note>A StandardPrefixResolver implementation has been promoted
            from SaxPrefixResolver and moved to common/namespace. 
          </scm:Note>

        </notes>
        
        <path>source/spiralcraft
        </path>

        <resources>
          <URI>builder/PropertySpecifier.java
          </URI>
          <URI>common/namespace/StandardPrefixResolver.java
          </URI>
          <URI>sax/Node.java
          </URI>
          <URI>sax/ParseTree.java
          </URI>
          <URI>sax/SaxPrefixResolver.java
          </URI>
        </resources>
      
      </scm:Change>

      <scm:Change>
        <notes>
          <scm:Note>Enhancements for evaluating expressions from the
            command line
          </scm:Note>
          <scm:Note>Error message for empty non-boolean configuration option
            in BeanArguments
          </scm:Note>
          <scm:Note>Executor provides Namespace resolution as part of its
            context
          </scm:Note>
          <scm:Note>Added log.Level.isInfo() for convenience writing Log 
            related code.
          </scm:Note>
          <scm:Note>TaskRunner outputs command results if not null.
          </scm:Note>
        </notes>
      
        <path>source
        </path>

        <resources>
          <URI>spiralcraft/exec/BeanArguments.java
          </URI>
          <URI>spiralcraft/exec/Executor.java
          </URI>
          <URI>spiralcraft/log/Level.java
          </URI>
          <URI>spiralcraft/task/TaskRunner.java
          </URI>
          <URI>META-INF/spiralcraft.env/eval.env.xml
          </URI>
        </resources>
      </scm:Change>      
    
      <scm:Change>
        <notes>
          <scm:Note>spiralcraft.builder enhancements to facilitate the repeated
            use of a single Assembly asa factory to apply structure to multiple 
            pre-constructed objects.
          </scm:Note>
          <scm:Note>Assembly.setDefaultInstance() is no longer public- a 
            pre-existing object is specified via a new required single parameter
            for the "resolve" method.
          </scm:Note>

        </notes>
        
        <path>source/spiralcraft
        </path>
        <resources>
          <URI>builder/Assembly.java
          </URI>
          <URI>builder/AssemblyClass.java
          </URI>
          <URI>builder/PropertyBinding.java
          </URI>
          <URI>builder/BuilderChannel.java
          </URI>
        </resources>
      
      </scm:Change>
      
      <scm:Change>
        <notes>
          <scm:Note>spiralcraft.lang enhancements to support VFS mirroring
            architecture
          </scm:Note>
          <scm:Note>Syntax to express array types of arbitrary nesting levels
            using "[@ns:type]" + "[]"*
          </scm:Note>
          <scm:Note>RelationalNode- ( &lt;,&gt;,etc,.. ) will return null
            when either operator is null, due to Comparable.compareTo() being
            undefined (and unreliable) against a null argument.
          </scm:Note>
          <scm:Note>spiralcraft.lang "Tuple" has now been more appropriately 
            named "Struct" to differentiate them from the spiralcraft.data Tuple.
          </scm:Note>
          <scm:Note>New functions Concatenate, Max, Min, and Tree
          </scm:Note>          
          <scm:Note>CollectionDecorator implementations must support
            addAll(dest,source) where source is type compatible with dest, in
            order to avoid excessive Iteration as a least-common-denominator
            approach.
          </scm:Note>
          <scm:Note>New Operation class permits use of a 
            spiralcraft.builder .assy as a type in an object-literal
            language construct by extending Operation and specifying an
            arbitrary Expression to satisfy the ChannelFactory contract.
          </scm:Note>      
          <scm:Note>ArrayReflector determines that 2 array reflectors are
            compatible if they have the same content type. Corner case 
            re. array with "void" content better defined.
          </scm:Note>  
          <scm:Note>BeanReflector constructs interface Proxies via the use of a
            spiralcraft.builder Assembly
          </scm:Note>       
          <scm:Note>ClosureFocus 2-arg constructor does not require
            Focus chain to match primary input type.
          </scm:Note>       
        </notes>
        
        <path>source/spiralcraft
        </path>
        
        <resources>
          <URI>lang/parser/Struct.java
          </URI>
          <URI>lang/parser/StructField.java
          </URI>
          <URI>lang/parser/StructNode.java
          </URI>
          <URI>lang/parser/Tuple.java
          </URI>
          <URI>lang/parser/TupleField.java
          </URI>
          <URI>lang/parser/TupleNode.java
          </URI>
          <URI>lang/parser/ExpressionParser.java
          </URI>
          <URI>lang/parser/TypeFocusNode.java
          </URI>
          <URI>lang/parser/RelationalNode.java
          </URI>
          <URI>lang/parser/RelationalNode.java
          </URI>
          <URI>lang/functions/Concatenate.java
          </URI>
          <URI>lang/functions/Min.java
          </URI>
          <URI>lang/functions/Max.java
          </URI>
          <URI>lang/functions/Tree.java
          </URI>
          <URI>lang/CollectionDecorator.java
          </URI>
          <URI>lang/reflect/ArrayReflector.java
          </URI>
          <URI>lang/reflect/BeanReflector.java
          </URI>
          <URI>lang/spi/ArrayListDecorator.java
          </URI>
          <URI>lang/spi/GenericCollectionDecorator.java
          </URI>
          <URI>lang/spi/GenericListDecorator.java
          </URI>
          <URI>lang/spi/ClosureFocus.java
          </URI>
          <URI>lang/spi/IterationDecorator.java
          </URI>
        </resources>
      </scm:Change>
      
      
      <scm:Change>
        <notes>
          <scm:Note>spiralcraft.data enhancements to support VFS mirroring
            architecture
          </scm:Note>
          <scm:Note>Improved support for converting Tuple based interface
            Proxies to and from data representations and dispatching Proxy
            methods to high level implementations.
          </scm:Note>
          <scm:Note>Added spiralcraft.lang operations to Externalize
            / Internalize object data. These operations are now supported
            using Type.getExternalizer()
          </scm:Note>
          <scm:Note>Improve construction support for all composite data types 
            by allowing Types to provide constructors and allowing the
            automatic construction of Aggregates from any Iterable data.
          </scm:Note>          
        </notes>
        
        <path>source/spiralcraft
        </path>
        
        <resources>
          <URI>data/Type.java
          </URI>
          <URI>data/core/AbstractAggregateType.java
          </URI>
          <URI>data/core/TypeImpl.java
          </URI>
          <URI>data/lang/TupleDelegate.java
          </URI>
          <URI>data/lang/AggregateConstructorChannel.java
          </URI>
          <URI>data/lang/AggregateReflector.java
          </URI>
          <URI>data/lang/TupleReflector.java
          </URI>
          <URI>data/lang/ToDataTranslator.java
          </URI>
          <URI>data/lang/ToStringTranslator.java
          </URI>
          <URI>data/task/Internalize.java
          </URI>
          <URI>data/task/Externalize.java
          </URI>
          <URI>data/reflect/AssemblyType.java
          </URI>
          <URI>lang/spi/ReverseTranslator.java
          </URI>
          
        </resources>
      
      </scm:Change>
      
      <scm:Change>
      
        <notes>
          <scm:Note>VFS mirroring implementation
          </scm:Note>
          <scm:Note>VFS enhancements for Volume management and 
            Resource metadata. 
          </scm:Note> 
          <scm:Note>ContextResource resolution mechanism moved to a function
            of ContextResourceMap. FileSpace, Authority and Graft mechanisms
            created to provide modularized control over contextually
            associated resources.
          </scm:Note>
          <scm:Note>CommandScheduler fix to abort run() when component 
            is stopped after event is fired.
          </scm:Note>                
          <scm:Note>Path is now a managed spiralcraft.data primitive type
          </scm:Note>                
          <scm:Note>IteratorChain and IteratorStack support streaming 
            Iteration by permitting the queuing and stacking of Iterators
            during iteration.
          </scm:Note>                
          <scm:Note>Enhance support for spiralcraft.lang path manipulation: 
            Path supports 
            static create() method to create a standard '/' delimited path, and
            is also Iterable.
          </scm:Note>
          <scm:Note>New utility method URIUtil.ensureTrailingSlash(URI)
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft
        </path>
        <resources>
          <URI>vfs/context/ContextResource.java
          </URI>
          <URI>vfs/context/ContextResourceFactory.java
          </URI>
          <URI>vfs/context/ContextResourceMap.java
          </URI>
          <URI>vfs/context/Authority.java
          </URI>
          <URI>vfs/context/FileSpace.java
          </URI>
          <URI>vfs/context/Graft.java
          </URI>
          <URI>vfs/context/Mirror.java
          </URI>
          <URI>vfs/context/Redirect.java
          </URI>
          <URI>vfs/context/MirrorSubscriber.assy.xml
          </URI>
          <URI>vfs/meta/Entry.java
          </URI>
          <URI>vfs/meta/ResourceToEntry.java
          </URI>
          <URI>vfs/meta/TreeSnapshot.java
          </URI>
          <URI>command/CommandScheduler.java
          </URI>
          <URI>data/types/standard/PathType.java
          </URI>
          <URI>vfs/file/FileResource.java
          </URI>
          <URI>util/IteratorChain.java
          </URI>
          <URI>util/IteratorStack.java
          </URI>
          <URI>util/Path.java
          </URI>
          <URI>util/URIUtil.java
          </URI>
        </resources>
        
        
      </scm:Change>
      
      
      <scm:Change>
        <notes>
          <scm:Note>VFS refactoring pass to better organize interfaces
          </scm:Note>
          <scm:Note>spiralcraft.vfs.ByteArrayResource is now
            spiralcraft.vfs.util.ByteArrayResource
          </scm:Note>
          <scm:Note>spiralcraft.vfs.AbstractResource is now 
            spiralcraft.vfs.spi.AbstractResource
          </scm:Note>
          <scm:Note>Resource iface adds getChildren() for fluency
          </scm:Note>
          <scm:Note>Resource iface adds setLastModified()
          </scm:Note>
          <scm:Note>Container iface adds listChildren(ResourceFilter)
          </scm:Note>
          <scm:Note>VfsUtil is obsolete
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/
        </path>
        
        <resources>
          <URI>vfs/Resource.java
          </URI>
          <URI>vfs/spi/AbstractResource.java
          </URI>
          <URI>vfs/jar/JarFileResource.java
          </URI>
          <URI>vfs/file/FileResource.java
          </URI>
          <URI>vfs/url/URLResource.java
          </URI>
          <URI>vfs/classpath/ClasspathResource.java
          </URI>
          <URI>vfs/util/ByteArrayResource.java
          </URI>
          <URI>vfs/util/ResourceWrapper.java
          </URI>
          <URI>vfs/ByteArrayResource.java
          </URI>
          <URI>vfs/VfsUtil.java
          </URI>
        </resources>
      </scm:Change>
      
      <scm:Change>
        <notes>
          <scm:Note>Enclose CalculatedField in ClosureChannel to ensure
            that the Expression is evaluated against a cached thread local
            context as is QueryField and KeyField.
          </scm:Note> 
        </notes>
        
        <path>source/spiralcraft/
        </path>
        
        <resources>
          <URI>data/core/CalculatedFieldImpl.ajva
          </URI>
          <URI>lang/spi/ClosureChannel.java
          </URI>
        </resources>
      </scm:Change>
        
      <scm:Change>
        <notes>
          <scm:Note>Ensure that field bindings are properly cached in
            their source channels.
          </scm:Note> 
          <scm:Note>Don't automatically cache resolved Expressions in Focus
            implementations, as it may be redundant, and may increase memory
            usage for high fan-out trees at at the end of subtype expansions. 
            BaseFocus.cacheChannels is an optimization flag  that defaults to
            false. 
          </scm:Note> 
        </notes>
        
        <path>source/spiralcraft/
        </path>

        <resources>
          <URI>lang/BaseFocus.java
          </URI>
          <URI>data/lang/TupleReflector.java
          </URI>
          <URI>query/Join.java
          </URI>
          <URI>query/EquiJoin.java
          </URI>
          <URI>query/Projection.java
          </URI>
          <URI>query/Query.java
          </URI>
          <URI>query/ReferenceQuery.java
          </URI>
          <URI>query/Scan.java
          </URI>
          <URI>query/Selection.java
          </URI>
          <URI>query/SetFilter.java
          </URI>
          <URI>query/UnionBinding.java
          </URI>
          <URI>spi/BaseExtentQueryable.java
          </URI>
        </resources>

            
      </scm:Change>
    </details>
  </scm:Change>
    
  <scm:Change>
    <revision>0.4.7.4
    </revision>
    
    <authorId>miketoth
    </authorId>
    
    <date>2010-03-29
    </date>
    
    <notes>
      <scm:Note>Fix issue where query of heterogeneous base type would
        incorrectly optimize, resulting in improper sort results
      </scm:Note> 
    </notes>
      
    <details>
      <scm:Change>
        <notes>
          <scm:Note>Fix issue where query of heterogeneous base type would
        incorrectly optimize, resulting in improper sort results.
          </scm:Note> 
          <scm:Note>Delegated merge function to the query itself by
            adding an isMergeable() and merge() functions.
          </scm:Note>
          <scm:Note>UnionBinding accepts source channels for 
            use as Distinct utility.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/data/
        </path>
        
        <resources>
          <URI>Space.java
          </URI>
          <URI>query/Concatenation.java
          </URI>
          <URI>query/Join.java
          </URI>
          <URI>query/EquiJoin.java
          </URI>
          <URI>query/Projection.java
          </URI>
          <URI>query/Query.java
          </URI>
          <URI>query/ReferenceQuery.java
          </URI>
          <URI>query/Scan.java
          </URI>
          <URI>query/Selection.java
          </URI>
          <URI>query/SetFilter.java
          </URI>
          <URI>query/UnionBinding.java
          </URI>
          <URI>spi/BaseExtentQueryable.java
          </URI>
        </resources>

            
      </scm:Change>
    </details>
  </scm:Change>

  <scm:Change>
    <revision>0.4.7.3
    </revision>
    
    <authorId>miketoth
    </authorId>
    
    <date>2010-03-27
    </date>
    
    <notes>
      <scm:Note>Fixed synchronization logic bug in XmlStore locking code.
      </scm:Note> 
    </notes>
      
    <details>
      <scm:Change>
        <notes>
          <scm:Note>Fixed synchronization logic bug in XmlStore locking code.
          </scm:Note> 

        </notes>
        
        <path>source/spiralcraft/data/xml/XmlQueryable.java
        </path>

            
      </scm:Change>
    </details>
  </scm:Change>

  <scm:Change>
    <revision>0.4.7.2
    </revision>
    
    <authorId>miketoth
    </authorId>
    
    <date>2010-03-26
    </date>
    
    <notes>
      <scm:Note>Performance optimizations in common spiralcraft.lang and
        spiralcraft.data operations
      </scm:Note> 
      <scm:Note>spiralcraft.builder can now define variables in the 
        common ContextDictionary string substitution mechanism.
        "spiralcraft.builder.dir"
        and "spiralcraft.builder.dir.URI" are automatically defined to refer to 
        the location of the assembly definition file where the property is
        used.
      </scm:Note> 
      <scm:Note>Misc debugging enhancements
      </scm:Note> 
    </notes>
      
    <details>
      <scm:Change>
        <notes>
          <scm:Note>spiralcraft.builder can now define variables in the 
            common ContextDictionary string substitution mechanism.
            "spiralcraft.builder.dir"
            and "spiralcraft.builder.dir.URI" are automatically defined to refer
            to 
            the location of the assembly definition file where the property is
            used.
          </scm:Note> 
          <scm:Note>ContextDictionary can now use an external definition
            map and supports a local override mode where locally defined
            properties take precedence over globally defined properties.
          </scm:Note>

        </notes>
        
        <path>source/spiralcraft
        </path>

        <resources>
          <URI>builder/Assembly.java
          </URI>
          <URI>builder/AssemblyClass.java
          </URI>
          <URI>builder/AssemblyLoader.java
          </URI>
          <URI>builder/PropertyBinding.java
          </URI>
          <URI>builder/PropertySpecifier.java
          </URI>
          <URI>util/ContextDictionary.java
          </URI>
          <URI>util/URIUtil.java
          </URI>
        </resources>
            
      </scm:Change>

      <scm:Change>
        <notes>
          <scm:Note>Misc debugging enhancements
          </scm:Note> 

          <scm:Note>Added debugLevel variables for XmlTypeFactory and Loader
            to trace class and type loading process.
          </scm:Note>

        </notes>
        
        <path>source/spiralcraft
        </path>

        <resources>
          <URI>data/xml/XmlTypeFactory.java
          </URI>
          <URI>classloader/Loader.java
          </URI>
        </resources>
            
      </scm:Change>
      
      <scm:Change>
        <notes>
          <scm:Note>Performance optimizations in common spiralcraft.lang and
            spiralcraft.data operations
          </scm:Note> 

          <scm:Note>Generally optimized direct queries against base extents
            by delegating to each subtype extent and concatenating the results.
          </scm:Note>
          <scm:Note>Replaced Union with Concatenation for base extent scans.
          </scm:Note>

          <scm:Note>Enclosed the upstream context of KeyField and QueryField
            implementations to eliminate unnecessary loading of
            iterative query execution.
          </scm:Note> 
          <scm:Note>Added additional constructor to ClosureFocus for 
            subject channel to enclose.
          </scm:Note> 

          <scm:Note>Ensure that UnionBinding and ConcatenationBinding
            respect design contract for use of Queryable and Focus params in
            constructor. Ensure that Concatenation resolves own type
            appropriately. 
          </scm:Note> 
          
          <scm:Note>ConcatenationBinding accepts Type in utility
            constructor.
          </scm:Note>

        </notes>
        
        <path>source/spiralcraft
        </path>

        <resources>
          <URI>data/core/KeyField.java
          </URI>
          <URI>data/core/QueryField.java
          </URI>
          <URI>lang/spi/ClosureFocus.java
          </URI>
          
          <URI>data/spi/BaseExtentQueryable.java
          </URI>
          
          <URI>data/Space.java
          </URI>
          <URI>data/query/Concatenation.java
          </URI>
          <URI>data/query/ConcatenationBinding.java
          </URI>
          <URI>data/query/UnionBinding.java
          </URI>


        </resources>
            
      </scm:Change>

     </details>
  </scm:Change>
  
  
  <scm:Change>
    <revision>0.4.7.1
    </revision>
    
    <authorId>miketoth
    </authorId>
    
    <date>2010-03-19
    </date>
    
    <notes>
      <scm:Note>Ensure that @top meta operation uses ListDecorator when
        available
      </scm:Note> 
      <scm:Note>Standardize on UTF-8 XML encoding for internal type defs
      </scm:Note>
    </notes>
      
    <details>
      
      <scm:Change>
        <notes>
          <scm:Note>Ensure that @top meta operation uses ListDecorator when
           available
          </scm:Note>
          <scm:Note>Don't allow AggregateReflector to throw IndexO.O.B
            exception
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/lang/spi/AbstractReflector.java
        </path>
        
        <resources>
          <URI>lang/spi/AbstractReflector.java
          </URI>
          <URI>data/lang/AggregateReflector.java
          </URI>
        </resources>
            
      </scm:Change>

      <scm:Change>
        <notes>
          <scm:Note>Standardize on UTF-8 XML encoding for internal type defs
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/
        </path>
        
        <resources>
          <URI>data/spi/Sequence.type.xml
          </URI>
          <URI>security/Login.type.xml
          </URI>
        </resources>
      
      </scm:Change>
    </details>
  </scm:Change>

  <scm:Change>
    <revision>0.4.7
    </revision>
    
    <authorId>miketoth
    </authorId>
    
    <date>2010-03-16
    </date>
    
    <notes>
      <scm:Note>Allow rolling enlistment during transaction prepare stage
        (fix ConcurrentAccessException during prepare)
      </scm:Note> 
      <scm:Note>Fixes for variable-credential authentication
      </scm:Note>
    </notes>
      
    <details>
      
      <scm:Change>
        <notes>
          <scm:Note>Allow for rolling enslistment during transaction prepare
            stage (fix ConcurrentAccessException during prepare)
          </scm:Note>
          <scm:Note>New RollingIterable class allows for elements to be added
            to an Iterable during iteration.
          </scm:Note>
          <scm:Note>Catch all RuntimeExceptions during transaction events
            and convert them to TransactionExceptions
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/
        </path>
        
        <resources>
          <URI>data/transaction/Transaction.java
          </URI>
          <URI>util/RollingIterable.java
          </URI>
        </resources>
      
      </scm:Change>

      <scm:Change>
        <notes>
          <scm:Note>Fixes for variable-credential authentication 
          </scm:Note>
          <scm:Note>Added update and reset method to make LoginEntry credential 
            update atomic and fix issue where old credentials interfered with
            new login attempts using different credential types.
          </scm:Note>
          <scm:Note>Assume that password digest is encoded as hex in the login
            digestpass field to allow for more straightforward usage
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/security/
        </path>
        
        <resources>
          <URI>auth/LoginEntry.java
          </URI>
          <URI>spi/PasswordDataAuthModule.assy.xml
          </URI>
        
        </resources>
      
      </scm:Change>

    </details>
  </scm:Change>

  <scm:Change>
    <revision>0.4.6
    </revision>
    
    <authorId>miketoth
    </authorId>
    
    <date>2010-03-05
    </date>
    
    <notes>
      <scm:Note>Implement bidirectional relational mapping to map between
        candidate keys in a relation.
      </scm:Note> 
      <scm:Note>Complete authentication using password hash
      </scm:Note> 
      <scm:Note>Fix DataAuthenticator, which broke in refactor though
        deprecated anyway.
      </scm:Note> 
      <scm:Note>Enhancements and fixes to spiralcraft.lang: handling of
        primitive Java types, implementation of @size for
        anything that supports CollectionDecorator, fixed Tuple field
        assignment.
      </scm:Note> 
      <scm:Note>Enhanced debugging of spiralcraft.builder instantiation
        process.
      </scm:Note> 
      <scm:Note>Fixed spurious "waiting for pool" messages when using 
        the Scheduler.
      </scm:Note> 
      <scm:Note>Changed default text log format to 2 lines to be more readable
      </scm:Note> 
    </notes>
      
    <details>
      
      <scm:Change>
        <notes>
          <scm:Note>Implement bidirectional relational mapping to map between
            candidate keys in a relation.
          </scm:Note> 
        </notes>
        
        <path>source/spiralcraft/data
        </path>
        
        <resources>
          <URI>query/EquiJoin.java
          </URI>
          <URI>util/RelationalMap.java
          </URI>
        </resources>
      
      </scm:Change>
      <scm:Change>
        <notes>
          <scm:Note>Complete authentication using password hash
          </scm:Note> 
          <scm:Note>Provide option to validate a digest password with no
            challenge against a cleartext database for test purposes.
          </scm:Note>           
          <scm:Note>Ensure that all digests are based on UTF-8 text
            encodings. 
          </scm:Note>           
          <scm:Note>Allow AuthSession clients to obtain the realmName to
            support external digest credential generation.
          </scm:Note>           
          <scm:Note>Standardize on "saltedDigest" term to refer to the 
            stable password digest salted with shared tokens. This affects
            clients of LoginEntry.
          </scm:Note>           
          <scm:Note>Fix DataAuthenticator, which is broke in refactor though
            deprecated anyway.
          </scm:Note> 
          <scm:Note>Standardize on new HexCodec class for encoding binary
            data to hexadecimal.
          </scm:Note> 
          <scm:Note>Provide String conversion ops for byte[] to base64,
            byte[] to hex, and character[] to String
          </scm:Note> 
        </notes>

        <path>source/spiralcraft/
        </path>
      
        <resources>
          <URI>security/auth/LoginEntry.java
          </URI>
          <URI>security/auth/AuthSessiony.java
          </URI>
          <URI>security/auth/LoginEntry.java
          </URI>
          <URI>security/spi/DataAuthenticator.java
          </URI>
          <URI>security/spi/PasswordDataAuthModule.assy.xml
          </URI>
          <URI>codec/text/HexCodec.java
          </URI>
          <URI>util/crypt/Digester.java
          </URI>
          <URI>util/string/ByteArrayToBase64.java
          </URI>
          <URI>util/string/ByteArrayToHex.java
          </URI>
          <URI>util/string/StringConverter.java
          </URI>
          
        </resources>
      
      </scm:Change>
      
      <scm:Change>
      
        <notes>
          <scm:Note>Changed default text log format to 2 lines to be more 
            readable
          </scm:Note> 
        </notes>
      
        <path>source/spiralcraft/log/DefaultFormatter.java
        </path>
      
      </scm:Change>
      
      <scm:Change>
        <notes>
          <scm:Note>Fixed spurious "waiting for pool" messages when using 
            the Scheduler.
          </scm:Note>       
          <scm:Note>Set start flag early so pool has an opportunity
            to fill to its minimum level before returning from start().
          </scm:Note>       
        
        </notes>
        
        <path>source/spiralcraft/pool/Pool.java
        </path>
      </scm:Change>

      <scm:Change>
        <notes>
          <scm:Note>Enhancements and fixes to spiralcraft.lang
          </scm:Note>
          <scm:Note>Handling of primitive Java types.
          </scm:Note>
          <scm:Note>Fixed Tuple field assignment
          </scm:Note>
          <scm:Note>Implement @size for anything that supports
            CollectionDecorator.
          </scm:Note>
          <scm:Note>Construction of primitive arrays supported
          </scm:Note>
          <scm:Note>Fixed some BeanReflector.isAssignableFrom() issues handling
            primitives. 
          </scm:Note>
          <scm:Note>Primitives can now be resolved by a type URI- eg. class:/int
          </scm:Note>
        </notes>
          
        <path>source/spiralcraft/
        </path>
     
        <resources>
          <URI>beans/BeanInfoCache.java
          </URI>
          <URI>lang/spi/PrimitiveArrayConstructorChannel.java
          </URI>
          <URI>lang/reflect/BeanReflector.java
          </URI>
          <URI>lang/parser/SubscriptNode.java
          </URI>
          <URI>lang/spi/ArrayConstructorChannel.java
          </URI>
        </resources>
      
      </scm:Change>

      <scm:Change>
        <notes>
          <scm:Note>Enhanced debugging of spiralcraft.builder 
            instantiation process.
          </scm:Note>
          <scm:Note>PropertySpecifier now has a debugLevel property.
          </scm:Note>
        
        </notes>
        
        <path>source/spiralcraft/builder/
        </path>
     
        <resources>
          <URI>AssemblyLoader.java
          </URI>
          <URI>PropertyBinding.java
          </URI>
          <URI>PropertySpecifier.java
          </URI>
        </resources>
     
      </scm:Change>

    </details>
  </scm:Change>

  <scm:Change>
    <revision>0.4.5.2
    </revision>
    
    <authorId>miketoth
    </authorId>
    
    <date>2010-02-25
    </date>
    
    <notes>
      <scm:Note>Fix NPE in Union query when using no-arg constructor due to 
        Type not getting resolved from sources. Ensure that Fetch calls
        query.resolve().
      </scm:Note> 
      
      <path>source/spiralcraft/data/
      </path>
      
      <resources>
        <URI>query/Union.java
        </URI>
        <URI>task/Fetch.java
        </URI>
      </resources>
    
    </notes>
  </scm:Change>

  <scm:Change>
    <revision>0.4.5.1
    </revision>
    
    <authorId>miketoth
    </authorId>
    
    <date>2010-02-24
    </date>
    
    <notes>
      <scm:Note>Fix for NPE in Union query when querying an abstract base
        type.
      </scm:Note> 
      
      <scm:Note>Remove extraneous logging inadvertently left in 
        spiralcraft.builder.PropertyBinding
      </scm:Note> 

      <scm:Note>New spiralcraft.app package (incomplete) for common
        component model factored from the component model aspect of 
        spiralcraft-textgen.
      </scm:Note> 
    
    </notes>
    
    <detail>
      <scm:Change>
        <notes>
          <scm:Note>Fix for NPE in Union query and AbstractStore when querying 
            an abstract base type due to issue where Focus is not passed
            through.
          </scm:Note> 
        </notes>
        
        <path>source/spiralcraft/data
        </path>
        
        <resources>
          <URI>query/Union.java
          </URI>
          <URI>query/UnionBinding.java
          </URI>
          <URI>spi/AbstractStore.java
          </URI>
        </resources>
      
      </scm:Change>
    
    
      <scm:Change>
        <notes>
          <scm:Note>Remove extraneous logging inadvertently left in 
            spiralcraft.builder.PropertyBinding
          </scm:Note> 
        </notes>
        
        <path>source/spiralcraft/builder/PropertyBinding.java
        </path>
      
      </scm:Change>

      <scm:Change>
        <notes>
          <scm:Note>
            Added isConfig(),isDebug(),isTrace(),isFine() convenience 
            methods to log.Level class.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/log/Level.java
        </path>
      
      </scm:Change>
      
      <scm:Change>
        <notes>
          <scm:Note>
            New spiralcraft.app package (incomplete) for common
            component model factored from the component model aspect of 
            spiralcraft-textgen.    
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/app
        </path>
        
        <resources>
          <URI>Component.java
          </URI>
          <URI>Container.java
          </URI>
          <URI>Event.java
          </URI>
          <URI>EventHandler.java
          </URI>
          <URI>InitializeMessage.java
          </URI>
          <URI>Message.java
          </URI>
          <URI>MessageContext.java
          </URI>
          <URI>MessageHandler.java
          </URI>
          <URI>MessageHandlerChain.java
          </URI>
          <URI>State.java
          </URI>
          <URI>StateFrame.java
          </URI>
          <URI>components/Iterate.java
          </URI>
          <URI>components/IterationState.java
          </URI>
          <URI>spi/AbstractComponent.java
          </URI>
          <URI>spi/AbstractContainer.java
          </URI>
          <URI>spi/MessageHandlerState.java
          </URI>
          <URI>spi/SimpleState.java
          </URI>
          <URI>spi/ValueState.java
          </URI>
        
        </resources>
      </scm:Change>
    </detail>
  </scm:Change>
  
  
  <scm:Change>
    <revision>0.4.5
    </revision>
    
    <authorId>miketoth
    </authorId>
    
    <date>2010-02-19
    </date>
    
    <notes>
      <scm:Note>Implementation of Reduce functionality (ie. reducing sets
        using aggregate functions) and associated spiralcraft.lang 
        enhancements.
      </scm:Note>
      
      <scm:Note>Security enhancements to support token hashing schemes for
        secure transmission and storage of passwords and password hashes.
      </scm:Note>

      <scm:Note>Minor updates and bug fixes to support spiralcraft-launcher
        enhancements and spiralcraft-sql refresh.
      </scm:Note>
    
    </notes>
    
    <detail>
    
      <scm:Change>
        <notes>
          <scm:Note>
            Implementation of reduce functionality (ie. reducing sets
            using aggregate functions) and associated spiralcraft.lang 
            enhancements. Associated minor updates to spiralcraft.data
            query functionality to take advantage of reduce ops.
          </scm:Note>
          <scm:Note>
            ArrayUtil has new functions concat(T[],Collection) to add the 
            contents of a collection to an Array and asKey(T[]) to use
            the array as a "key"- an immutable object that can be
            compared for equality to other instances returned from the same
            function.
          </scm:Note>
          <scm:Note>
            ClassUtil deals with primitive equivalence of Void.TYPE and
            Void.class
          </scm:Note>
          <scm:Note>Don't make reflectors define map or reduce.
          </scm:Note>
          <scm:Note>Collections must now support addAll(Iterator) to
            enable efficient adds to immutable representations (ie. arrays)
          </scm:Note>
          <scm:Note>Generic list operations on Iterables. Obsoletes 
            CollectionSelectChannel.
          </scm:Note>
          <scm:Note> IterableChain  provides Iteration over multiple sources. 
          </scm:Note>
          <scm:Note>Reflector.getCommonType() no longer throws exception and
            now returns null when no common type exists.
          </scm:Note>
          <scm:Note>Type coercion introduced into Logical expressions to
            permit some number comparison operations (ie. float to Double)
            by using Number class conversions. Factored Translator interface
            for logical expressions (LogicalNode) into inner class so 
            implementation can be chosen at bind-time.
          </scm:Note>
          <scm:Note>Changed NumericOpNode to BinaryOpNode because we deal
            with intrinsic Strings and List ops internally.
          </scm:Note>
          <scm:Note>List literals are now read as Tuples, to avoid
            redundancy
          </scm:Note>
          <scm:Note>Disambiguate between an array subscript and an
            object literal in a FocusRelativeExpression
          </scm:Note>
          <scm:Note>Added Reduce functionality (aggregate functions) using
            $[ expr ] operator.
          </scm:Note>          
          <scm:Note>AggregateProjectNode is now MapReduceNode due to
            addition of Reduce functionality.
          </scm:Note>
          <scm:Note>Define Tuple equality and allow fields to be
            examined.
          </scm:Note>
          <scm:Note>Projection query now integrates 1-m queries.
          </scm:Note>
          <scm:Note>Collect task provides results.
          </scm:Note>
          <scm:Note>Fetch task provides result reflector from bound query
          </scm:Note>
        </notes>
      
        <path>source/spiralcraft/
        </path>
        
        <resources>
          <URI>util/ArrayUtil.java
          </URI>
          <URI>util/lang/ClassUtil.java
          </URI>
          <URI>util/IterableChain.java
          </URI>
          <URI>lang/Reflector.java
          </URI>
          <URI>lang/CollectionDecorator.java
          </URI>
          <URI>lang/spi/GenericCollectionDecorator.java
          </URI>
          <URI>lang/spi/GenericListDecorator.java
          </URI>
          <URI>lang/spi/IterableIndexTranslator.java
          </URI>
          <URI>lang/spi/IterableRangeChannel.java
          </URI>
          <URI>lang/spi/IterableSelectChannel.java
          </URI>
          <URI>lang/spi/AbstractReflector.java
          </URI>
          <URI>lang/spi/ArrayConstructorChannel.java
          </URI>
          <URI>lang/spi/ArrayListDecorator.java
          </URI>
          <URI>lang/spi/CollectionSelectChannel.java
          </URI>
          <URI>lang/spi/IterationProjector.java
          </URI>
          <URI>lang/spi/ViewCache.java
          </URI>
          <URI>lang/spi/ViewState.java
          </URI>
          <URI>lang/spi/StateScope.java
          </URI>
          <URI>lang/parser/AggregateProjectNode.java
          </URI>
          <URI>lang/parser/MapReduceNode.java
          </URI>
          <URI>lang/parser/LogicalNode.java
          </URI>
          <URI>lang/parser/LogicalNegateNode.java
          </URI>
          <URI>lang/parser/RelationalNode.java
          </URI>
          <URI>lang/parser/EqualityNode.java
          </URI>
          <URI>lang/parser/ExclusiveOrNode.java
          </URI>
          <URI>lang/parser/ConditionalNode.java
          </URI>
          <URI>lang/parser/LogicalAndNode.java
          </URI>
          <URI>lang/parser/LogicalOrNode.java
          </URI>
          <URI>lang/parser/NumericOpNode.java
          </URI>
          <URI>lang/parser/BinaryOpNode.java
          </URI>
          <URI>lang/parser/Node.java
          </URI>
          <URI>lang/parser/ExpressionParser.java
          </URI>
          <URI>lang/parser/Tuple.java
          </URI>
          <URI>lang/parser/TupleField.java
          </URI>
          <URI>lang/parser/TupleNode.java
          </URI>
          <URI>lang/reflect/BeanReflector.java
          </URI>
          <URI>lang/reflect/ArrayReflector.java
          </URI>
          <URI>lang/reflect/IterableLengthTranslator.java
          </URI>
          <URI>lang/reflect/IterableReflector.java
          </URI>
          <URI>data/EditableAggregate.java
          </URI>
          <URI>data/spi/EditableArrayListAggregate.java
          </URI>
          <URI>data/spi/EditableKeyedListAggregate.java
          </URI>
          <URI>data/session/BufferAggregate.java
          </URI>
          <URI>data/lang/AggregateReflector.java
          </URI>
          <URI>data/query/Projection.java
          </URI>
          <URI>data/task/Collect.java
          </URI>
          <URI>data/task/Fetch.java
          </URI>
                
        </resources>
      </scm:Change>

      <scm:Change>
        <notes>
          <scm:Note>Security enhancements to support token hashing schemes for
            secure transmission and storage of passwords and password hashes.
          </scm:Note>
          <scm:Note>Changed cryptpass to digestpass in Login.type.xml
          </scm:Note>
          <scm:Note>AuthSession: Changed opaqueDigest to saltedDigest, 
            and added digest
            method to provide for repeated applications on externally
            salted digests.
          </scm:Note>
          <scm:Note>Added a ChallengeCredential to the LoginEntry and to
            authentication logic. The Challenge is used by the password
            authenticator to re-digest the password hash and may be  
            associated with an application specific expiration mechanism.
          </scm:Note>
          <scm:Note>Added a CredentialValidator interface to deal with
            various credential presentation scenarios in a more declarative 
            fashion.
          </scm:Note>
          <scm:Note>Obsoleted PasswordDataAuthModule.java in favor of
            PasswordDataAuthModule.assy.xml by making DataAuthModule
            more fully configurable
          </scm:Note>
        </notes>
      
        <path>source/spiralcraft</path>
        
        <resources>
          <URI>security/Login.type.xml
          </URI>
          <URI>security/auth/AuthSession.java
          </URI>
          <URI>security/auth/ChallengeCredential.java
          </URI>
          <URI>security/auth/LoginEntry.java
          </URI>
          <URI>security/spi/BasicCredentialValidator.java
          </URI>
          <URI>security/spi/DataAuthModule.java
          </URI>
          <URI>security/spi/PasswordDataAuthModule.java
          </URI>
          <URI>security/spi/PasswordDataAuthModule.assy.xml
          </URI>
        </resources>
      </scm:Change>
      
      
      <scm:Change>
      
        <notes>
          <scm:Note>Provide "task" built-in to run TaskRunner
          </scm:Note>
        </notes>
    
        <path>source/META-INF/spiralcraft.env/task.env.xml
        </path>
        
      </scm:Change>     

      <scm:Change>
      
        <notes>
          <scm:Note>Provide timeout options and timeout exception for
            Pool: Pool.maxStartupMs, Pool.maxCheckoutMs
          </scm:Note>
          <scm:Note>checkout() now throws InterruptedException if 
            checkout timeout is exceeded
          </scm:Note>
        </notes>
    
        <path>source/spiralcraft/
        </path>
        
        <resources>
          <URI>pool/Pool.java
          </URI>
          <URI>pool/ThreadPool.java
          </URI>
          <URI>time/Scheduler.java
          </URI>
        
        </resources>
    
      </scm:Change>     

      <scm:Change>
      
        <notes>
          <scm:Note>Provide a list of primary queryables (queryables for
            explicitly managed types)
          </scm:Note>
        </notes>
    
        <path>source/spiralcraft/data/spi/AbstractStore.java
        </path>
    
      </scm:Change>     

      <scm:Change>
      
        <notes>
          <scm:Note>Throw meaningful exception when attempt to instantiate
            an abstract class fails.
          </scm:Note>
        </notes>
    
        <path>source/spiralcraft/data/reflect/ReflectionType.java
        </path>
    
      </scm:Change>     

      <scm:Change>
      
        <notes>
          <scm:Note>Fix bug in exception text when reporting unmapped
            namespace.
          </scm:Note>
        </notes>
    
        <path>source/spiralcraft/builder/AssemblyLoader.java
        </path>
    
      </scm:Change>     

      <scm:Change>
      
        <notes>
          <scm:Note>Added "description" property to Field and Type
          </scm:Note>
          <scm:Note>KeyField is Transient
          </scm:Note>
          <scm:Note>Don't persist transient fields
          </scm:Note>
        </notes>
    
        <path>source/spiralcraft/data
        </path>
    
        <resources>
          <URI>Field.java
          </URI>
          <URI>core/KeyField.java
          </URI>
          <URI>sax/DataWriter.java
          </URI>
          <URI>Type.java
          </URI>
          <URI>core/FieldImpl.java
          </URI>
          <URI>core/TypeImpl.java
          </URI>
          <URI>core/AbstractAggregateType.java
          </URI>
        </resources>
    
      </scm:Change>     
       
      <scm:Change>
      
        <notes>
          <scm:Note>
            Added ArrayUtil.format(array,separator,beginDelimiter,endDelimiter)
          </scm:Note>
        </notes>
    
        <path>source/spiralcraft/util/ArrayUtil.java
        </path>
        
      </scm:Change>      

    </detail>
  </scm:Change>

  <scm:Change>
    <revision>0.4.4.2
    </revision>
    
    <authorId>miketoth
    </authorId>
    
    <date>2010-02-03
    </date>
    
    <notes>
      <scm:Note>Avoid setting Snapshot transactionId to 0, because 0
        is defined to always generate a snapshot.
      </scm:Note>
      <scm:Note>Enhance debugging for ContextResourceMap
      </scm:Note>
    </notes>
    
    <path>source/spiralcraft
    </path>
    
    <resources>
      <URI>data/xml/XmlStore.java</URI>
      <URI>vfs/context/ContextResource.java</URI>
      <URI>vfs/context/ContextResourceMap.java</URI>
    </resources>
  </scm:Change>

  <scm:Change>
    <revision>0.4.4.1
    </revision>
    
    <authorId>miketoth
    </authorId>
    
    <date>2010-02-03
    </date>
    
    <notes>
    
      <scm:Note>Change XmlStore Subscriber whenX to only use absolute
        uris
      </scm:Note>
      <scm:Note>Suppress debug messages from XmlStore
      </scm:Note>
      <scm:Note>Default subscriber debug to false
      </scm:Note>
      <scm:Note>ParseXML has ignoreNull option to buffer input and return
        null if empty
      </scm:Note>
      <scm:Note>Enhance debugging for ContextResourceMap
      </scm:Note>
    </notes>
    
    <path>source/spiralcraft
    </path>
    
    <resources>
      <URI>data/sax/ParseXml.java</URI>
      <URI>data/xml/XmlStore.java</URI>
      <URI>data/xml/Subscriber.java</URI>
      <URI>vfs/context/ContextResource.java</URI>
      <URI>vfs/context/ContextResourceMap.java</URI>
    </resources>
  </scm:Change>

  <scm:Change>
    <revision>0.4.4
    </revision>
    
    <authorId>miketoth
    </authorId>
    
    <date>2010-02-03
    </date>
    
    <notes>
    
      <scm:Note>New XmlStore slave mode subscribes to a master
      </scm:Note>
      <scm:Note>Support for Java interface fascades backed by Tuples to
        facilitate Java programming against data Types.
      </scm:Note>
      <scm:Note>Achieved generalized XML object transport for both
        Java and data types.
      </scm:Note>
      <scm:Note>Redefine CollectionDecorator.add() to return the modified
        collection, allowing support for immutable collection implementations
        such as arrays.
      </scm:Note>
      <scm:Note>In spiralcraft.builder assembly definitions (.assy.xml files),
        provide better support for creating collections of primitives and
        other string-encodable objects by
        treating the text values of multiple property elements with the same 
        name into a collection of text values for the field.
      </scm:Note>
      <scm:Note>Initial implementation of JournalTuple, for  
        multiversion concurrency control.
      </scm:Note>
      <scm:Note>Initial implementation of StateScope, to manage transaction
        boundaries to track the running state of stateful functions.
      </scm:Note>

    </notes>
    
    <detail>
    
      <scm:Change>
        <notes>
          <scm:Note>New XmlStore master/slave capability provides remote
            replication
          </scm:Note>
          <scm:Note>XmlStore and XmlQueryable integrate with local 2PC
            transaction mechanism.
          </scm:Note>
          <scm:Note>XmlStore transactionalizes sequence allocation
          </scm:Note>
          <scm:Note>Transactions now properly support nesting levels PROPOGATE
            and ISOLATE, and provide sensible transaction id sequences 
            seeded with the system time. Transaction context is now maintained
            until all branches have completed, ensuring that completing 
            branches have access to the contextual Transaction id.
          </scm:Note>
          <scm:Note>Fetch task accepts an explicit queryable object in
            a new constructor (Queryable,Query)
          </scm:Note>
          <scm:Note>Achieved generalized XML object transport for both
            Java and data types.
          </scm:Note>
          <scm:Note>New XmlDataRenderer wraps DataWriter in a general
            purpose Renderer interface
          </scm:Note>
          <scm:Note>DataWriter can now write to a Writer and not just an
            OutputStream.
          </scm:Note>
          <scm:Note>ParseXml and QueryXml tasks now generate a Command
            result if the type property is defined.
          </scm:Note>
          <scm:Note>When using the "ref" attribute for aggregates, DataHandler
            upgrades the frame type to the actual type of the value read
            from the referenced resource. 
          </scm:Note>
          <scm:Note>AttributeBinding and underlying DictionaryBinding provide
             (name,Expression) constructor
          </scm:Note>
          <scm:Note>Space provides access to Stores by name
          </scm:Note>        
          <scm:Note>New CommandScheduler class to run Commands periodically.
            Required new Scheduler.cancel(Runnable) method for Lifecycle.
            contract.
          </scm:Note>
          <scm:Note>Better thread identification for Scheduler and Pool.
          </scm:Note>
          <scm:Note>A Scenario late-binds the command result reflector as it may
            be derived from something in the context. This is facilitated
            by GenericReflector providing ability to enhance using a 
            client-supplied ChannelFactory.
          </scm:Note>
          <scm:Note>Scenarios now all provide conditional execution using
            whenX.
          </scm:Note>
          <scm:Note>Scenarios bind the local context channel before bindImports
            to allow bindImports to be aware of the context Reflector. 
          </scm:Note>
          <scm:Note>New Eval Scenario allows for arbitrary Expression
            evaluation, puts result in chain context as well as returning.
          </scm:Note>          
          <scm:Note>"If" Scenario gets constructors, uses Binding instead of
            Expression.
          </scm:Note>
          <scm:Note>KeyedList provides a default constructor.
          </scm:Note>
          
        </notes>
      
        <path>source/spiralcraft
        </path>
        
        <resources>
          <URI>data/Space.java
          </URI>
          <URI>data/access/Store.java
          </URI>
          <URI>data/access/Snapshot.java
          </URI>
          <URI>data/spi/AbstractStore.java
          </URI>
          <URI>data/xml/XmlStore.java
          </URI>
          <URI>data/xml/XmlQueryable.java
          </URI>
          <URI>data/xml/Subscriber.assy.xml
          </URI>
          <URI>data/sax/AttributeBinding.java
          </URI>
          <URI>data/sax/DataHandler.java
          </URI>
          <URI>data/sax/DataWriter.java
          </URI>
          <URI>data/sax/ParseXml.java
          </URI>
          <URI>data/sax/QueryXml.java
          </URI>
          <URI>data/sax/XmlDataRenderer.java
          </URI>
          <URI>data/task/Fetch.java
          </URI>
          <URI>data/transaction/Transaction.java
          </URI>
          <URI>command/CommandScheduler.java
          </URI>
          <URI>lang/spi/GenericReflector.java
          </URI>
          <URI>task/Scenario.java
          </URI>
          <URI>task/TaskCommand.java
          </URI>
          <URI>task/If.java
          </URI>
          <URI>task/Eval.java
          </URI>
          <URI>time/Scheduler.java
          </URI>
          <URI>pool/ThreadPool.java
          </URI>
          <URI>util/KeyedList.java
          </URI>
        </resources>
      </scm:Change>

      <scm:Change>
        <notes>
          <scm:Note>Removed unnecessary generic type parameter
          </scm:Note>
        </notes>
      
        <path>source/spiralcraft
        </path>
        
        <resources>
          <URI>lang/spi/AbstractFunctorChannel.java
          </URI>
          <URI>command/CommandFunctorChannel.java
          </URI>
        </resources>
      </scm:Change>
      
      <scm:Change>
        <notes>
          <scm:Note>Support for Java interface fascades backed by Tuples to
            facilitate Java programming against data Types.
          </scm:Note>
          <scm:Note>Requires additional support for handling situations where
            "raw" DataComposite types are exposed by Java classes.
          </scm:Note>          
          <scm:Note>DataTypeModel allows for "data" scheme to disambiguate
            between Java class reflectors and the reflectors for their derived
            data Types- eg. "data:class:/mypkg/MyType"
          </scm:Note>
          <scm:Note>spiralcraft.lang name resolution no longer relies on
            URI.resolve(), because it doesn't work for "wrapper" schemes.
          </scm:Note>
          <scm:Note>TypeImpl.fromData() now passes through DataComposites if
            there is no associated native class. 
          </scm:Note>
          <scm:Note>TypeResolver.resolveSafeFromClass(Class) convenience method
            to provide a Type object from a fascade interface
          </scm:Note>
          <scm:Note>Indexable interface helps subscript and size Aggregates
            returned by Java code.
          </scm:Note>
          <scm:Note>BeanReflector supports new Indexable interface and "long"
            values as indexes.
          </scm:Note>
          <scm:Note>BeanReflector and MethodTranslator use java.lang.Object
            as collection component type when type parameter cannot be 
            interpreted.
          </scm:Note>
          <scm:Note>BufferAggregate.get() no longer throws DataException (to
            conform to Indexable interface)
          </scm:Note>
          <scm:Note>ArrayIndexChannel returns null instead of throwing an
            ArrayIndexOutOfBounds exception
          </scm:Note>
          <scm:Note>TranslatorChannel dumps signatures when resolve fails
          </scm:Note>
          <scm:Note>AggregateIndexTranslator and AggregateListDecorator 
            converts DataException to RuntimeException
          </scm:Note>
          <scm:Note>ReflectionType will create a TupleDelegate when asked
            to create a Java interface via the fromData() method.
          </scm:Note>
          <scm:Note>Proxy method mapping is incomplete.
          </scm:Note>
          <scm:Note>TupleDelegate is now more useful for constructing Java
            interface fascades backed by Tuples. TupleDelegate can now be 
            constructed with a client-supplied backing Tuple, and now has a getter
            to provide access to the backing Tuple. 
          </scm:Note>
          <scm:Note>More informative TypeMismatchException
          </scm:Note>
          <scm:Note>More informative exception when Focus subject is null
          </scm:Note>
          <scm:Note>AnyType.TYPE_URI
          </scm:Note>
          <scm:Note>Void.class is now treated as a wildcard parameter 
            like Void.TYPE when resolving methods in ClassUtilities. 
            MethodResolver exception enhanced.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/
        </path>
        
        <resources>
          <URI>data/Aggregate.java
          </URI>
          <URI>data/TypeMismatchException.java
          </URI>
          <URI>data/TypeResolver.java
          </URI>
          <URI>data/core/TypeImpl.java
          </URI>
          <URI>data/lang/TupleDelegate.java
          </URI>
          <URI>data/lang/AggregateReflector.java
          </URI>
          <URI>data/session/BufferAggregate.java
          </URI>
          <URI>data/reflect/ReflectionType.java
          </URI>
          <URI>data/types/standard/AnyType.java
          </URI>
          <URI>common/Indexable.java
          </URI>
          <URI>lang/reflect/BeanReflector.java
          </URI>
          <URI>lang/reflect/MethodTranslator.java
          </URI>
          <URI>lang/spi/ArrayIndexChannel.java
          </URI>
          <URI>lang/parser/Node.java
          </URI>
          <URI>util/lang/ClassUtilities.java
          </URI>
          <URI>util/lang/MethodResolver.java
          </URI>
        </resources>
      </scm:Change>
    
      <scm:Change>
        <notes>
          <scm:Note>In spiralcraft.builder assembly definitions (.assy.xml files),
            provide better support for creating collections of primitives and
            other string-encodable objects by
            treating the text values of multiple property elements with the same 
            name into a collection of text values for the field.
          </scm:Note>
          <scm:Note>This currently only works for properties defined in the
            same file. We still need to implement append/insert
            behavior for overridden properties.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/builder/
        </path>
        
        <resource>
          <URI>AssemblyClass.java
          </URI>
          <URI>PropertyBinding.java
          </URI>
          <URI>PropertySpecifier.java
          </URI>
        </resource>
      </scm:Change>
      
      
      <scm:Change>
        <notes>
          <scm:Note>Initial implementation of JournalTuple, for  
            multiversion concurrency control (incomplete).
          </scm:Note>
          <scm:Note>AbstractTuple and ArrayTuple provide
             for DeltaTuple construction chain
          </scm:Note>
          <scm:Note>Added getTransactionId() and getVersion() to JournalTuple
          </scm:Note>
          <scm:Note>DeltaTuple.getBaseExtent() returns covariant DeltaTuple.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/data/
        </path>
        
        <resource>
          <URI>DeltaTuple.java
          </URI>
          <URI>JournalTuple.java
          </URI>
          <URI>spi/AbstractTuple.java
          </URI>
          <URI>spi/ArrayTuple.java
          </URI>
          <URI>spi/ArrayDeltaTuple.java
          </URI>
          <URI>spi/ArrayJournalTuple.java
          </URI>
          <URI>session/BufferTuple.java
          </URI>
          <URI>lang/BoundTuple.java
          </URI>
        </resource>
      </scm:Change>
      
      
      
      <scm:Change>
        <notes>
          <scm:Note>Redefine CollectionDecorator.add() to return the modified
            collection, allowing support for immutable collection implementations
            such as arrays.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/
        </path>
        
        <resource>
          <URI>lang/CollectionDecorator.java
          </URI>
          <URI>lang/spi/ArrayListDecorator.java
          </URI>
          <URI>lang/spi/GenericCollectionDecorator.java
          </URI>
          <URI>lang/spi/GenericListDecorator.java
          </URI>
          <URI>lang/spi/ListRangeChannel.java
          </URI>
          <URI>lang/util/DictionaryBinding.java
          </URI>
          <URI>data/lang/AggregateReflector.java
          </URI>
        </resource>
      </scm:Change>
      
      <scm:Change>
        <notes>
          <scm:Note>Initial implementation of StateScope, to manage transaction
            boundaries to track the running state of stateful functions
            (incomplete)
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/lang/StateScope.java
        </path>

      </scm:Change>
      
      <scm:Change>
        <notes>
          <scm:Note>Misc lang/spi enhancements
          </scm:Note>
          <scm:Note>ThreadLocalChannel can incorporate its source with
            new no-arg push() method allowing generic Channel type to stay
            encapsulated. ClosureFocus now uses this method instead of
            rolling its own. 
          </scm:Note>
          <scm:Note>GenericReflector now has a single-arg constructor which
            allows the GenericReflector to adopt the same typeURI as its
            delegate, for the common cases where the GenericReflector instance 
            is not public.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/lang/spi
        </path>
        
        <resource>
          <URI>ClosureFocus.java
          </URI>
          <URI>ThreadLocalChannel.java
          </URI>
          <URI>GenericReflector.java
          </URI>
        </resource>
      </scm:Change>
    </detail>
  </scm:Change>

  <scm:Change>
    <revision>0.4.3
    </revision>
    
    <authorId>miketoth
    </authorId>
    
    <date>2010-01-24
    </date>
    
    <notes>
      <scm:Note>spiralcraft.security.auth Authentication system now provides
        generic mechanisms for communicating associations between 
        local accounts and contextual credentials managed by secondary
        providers.
      </scm:Note>
      <scm:Note>spiralcraft.data.reflect Types (ie. Java class bridge)
        now resolve AssemblyClass instances.
      </scm:Note>
      <scm:Note>spiralcraft.lang enhancements- multi-Expression subcontexts:
        expr{ expr1, expr2, exprReturn } and Expression literals: `expr`
      </scm:Note>
      <scm:Note>Enhance data tasks Edit and Fetch for use as Object Literal
        Functors.
      </scm:Note>
      <scm:Note>Simplify resolution of DataSession channels 
      </scm:Note>
      <scm:Note>TaskMethod implementation of data Method provides the option to
        execute the command and return the result, which will be the
        default case whenever returnType is specified.
      </scm:Note>
      <scm:Note>Moved spiralcraft.task.Session to spiralcraft.data.task.Session
        because that's where all the other spiralcraft.data specific tasks are.
      </scm:Note>
      <scm:Note>Misc fixes
      </scm:Note>
    </notes>
    
    <detail>
      <scm:Change>
        <notes>
          <scm:Note>Add methods to bean signature list
          </scm:Note>
          <scm:Note>Signature now prints method parameters cleanly
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/lang/
        </path>
        
        <resource>
          <URI>Signature.java
          </URI>
          <URI>reflect/BeanReflector.java
          </URI>
        </resource>
      </scm:Change>

      <scm:Change>
        <notes>
          <scm:Note>Moved spiralcraft.task.Session to
            spiralcraft.data.task.Session because that's where all the other
            spiralcraft.data specific tasks are.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/
        </path>
        
        <resources>
          <URI>task/Session.java
          </URI>
          <URI>data/task/Session.java
          </URI>
        </resources>
      </scm:Change>
      
      <scm:Change>
        <notes>
          <scm:Note>Fix bug when saving outside of a transaction context
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/data/session/BufferTuple.java
        </path>
      </scm:Change>

      <scm:Change>
        <notes>
          <scm:Note>Simplify resolution of DataSession channels
          </scm:Note>
          <scm:Note>Static method DataSession.findChannel to look in Focus 
            chain and extract the channel that provides the DataSession.
          </scm:Note>
          <scm:Note>TupleConstructorChannel.java now creates buffers as long
            as there is a DataSession in context.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/data/
        </path>
        
        <resources>
          <URI>session/BufferChannel.java
          </URI>
          <URI>session/DataSession.java
          </URI>
          <URI>rest/RestService.java
          </URI>
          <URI>lang/TupleConstructorChannel.java
          </URI>
          <URI>editor/EditorBase.java
          </URI>
          
        </resources>
      </scm:Change>

      <scm:Change>
        <notes>
          <scm:Note>Enhance data tasks Edit and Fetch and Selection query for
            use as Object Literal Functors.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/data/
        </path>
        
        <resources>
          <URI>task/Edit.java
          </URI>
          <URI>task/Fetch.java
          </URI>
          <URI>query/Selection.java
          </URI>
        </resources>
      </scm:Change>
      
      <scm:Change>
        <notes>
          <scm:Note>spiralcraft.security.auth Authentication system now provides
            generic mechanisms for communicating associations between 
            local accounts and contextual credentials managed by secondary
            providers.
          </scm:Note>
          <scm:Note>Added methods AuthSession.associateLogin(String moduleName)
            and AuthSession.getAccountId() and AuthModule.Session
            counterparts and implementations.
          </scm:Note>
          <scm:Note>DataAuthModule now creates a DataSession for use by
            data manipulation objects during credential management
            transactions (ie. associateLogin()). This required making
            DataSession.setFocus() public.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/
        </path>
        
        <resources>
          <URI>security/auth/AuthModule.java
          </URI>
          <URI>security/auth/AuthSession.java
          </URI>
          <URI>security/spi/DataAuthModule.java
          </URI>
          <URI>data/session/DataSession.java
          </URI>
        </resources>
      
      </scm:Change>
      
      <scm:Change>
        <notes>
          <scm:Note>Fix bug reconstructing URI in URIUtil.replaceRawQuery()
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/util/URIUtil.java
        </path>
      </scm:Change>
    
      <scm:Change>
        <notes>
          <scm:Note>Enforce requirement that Functors be referenced from constant
            Channels to preserve the integrity of the Channel graph.
          </scm:Note>
          <scm:Note>ThreadLocalChannel keeps stack trace of initializer chain to
            assist in resolving context when encountering 
            "ThreadLocal not initialized".
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/lang/
        </path>
        
        <resources>
          <URI>reflect/BeanReflector.java
          </URI>
          <URI>spi/ThreadLocalChannel.java
          </URI>
        </resources>
      </scm:Change>
      
      <scm:Change>
        <notes>
          <scm:Note>Fixed error where two XmlStore transactions
           occurring in the same millisecond would try to use the same
             temporary filename, resulting in a failure. Added a sequential
            differentiator to the filename. 
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/data/xml/XmlQueryable.java
        </path>
      </scm:Change>
      
      <scm:Change>
        <notes>
          <scm:Note>spiralcraft.lang enhancements- multi-Expression subcontexts:
            expr{ expr1, expr2, exprReturn } and Expression literals: `expr`
          </scm:Note>
          <scm:Note>multi-Expression subcontexts allow multiple expressions in
            a subcontext block and evaluate to the value of the last expression
            in the block. 
          </scm:Note>
          <scm:Note>If the source of a subcontext block is a FocusChannel, as 
            is the case
            when an ObjectLiteralNode is a FocusChainObject, the subcontext
            will bind to the Focus from the FocusChannel. 
          </scm:Note>
          <scm:Note>Expression literals allow for the creation of in-line
             Expressions which can be passed as objects to components which
             accept Expressions for internal binding. For example
             [*query:Selection{[@myns:MyType].type,`.fooValue>=25`}] will pass the
             unbound Expression `.fooValue>=25` to the second argument of
             the constructor spiralcraft.data.query.Selection(Type,Expression),
             where Selection can bind it into the query context or convert it
             to an optimized representation.
          </scm:Note>
          <scm:Note>ObjectLiteralNode now publishes a FocusChannel to provide
            context to to downstream expressions capable of processing this
            construct.  
          </scm:Note>
          
        </notes>
                
        <path>source/spiralcraft/lang/
        </path>
        
        <resources>
          <URI>parser/ExpressionParser.java
          </URI>
          <URI>parser/Node.java
          </URI>
          <URI>parser/LiteralNode.java
          </URI>
          <URI>parser/SubcontextNode.java
          </URI>
          <URI>parser/ExpressionLiteralNode.java
          </URI>
          <URI>parser/ObjectLiteralNode.java
          </URI>
          <URI>spi/FocusChannel.java
          </URI>
        </resources>
      
      
      </scm:Change>

      <scm:Change>
        <notes>
          <scm:Note>spiralcraft.data.reflect Types (ie. Java class bridge)
            now resolve AssemblyClass instances via the AssemblyType class.
          </scm:Note>
          <scm:Note>ReflectionTypeFactory now tries to load a builder assembly
            for the specified type URI and creates an AssemblyType in
            appropriate situations.
          </scm:Note>
          <scm:Note>ReflectionType.isAssignableFrom() now accepts AssemblyTypes
          </scm:Note>
          <scm:Note>XmlBean now uses Type.fromData() to construct object, if
            applicable.
          </scm:Note>
          <scm:Note>spiralcraft.builder.Managable tags POJOs for inclusion in
            this mechanism if no [classname].assy.xml exists for the type.
          </scm:Note>
          <scm:Note>New method AssemblyLoader.isAssemblyClass(URI) to
            query whether given URI represents an AssemblyClass
          </scm:Note>
          <scm:Note>PropertySpecifier now applies contextual namespace 
            PrefixResolver to injector expressions
          </scm:Note>
          <scm:Note>BuilderScheme fixed to recognize AssemblyType as a
            ReflectionType equivalent.
          </scm:Note>
          <scm:Note>URIUtil now has addSuffixToPath(URI uri,String rawSuffix)
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/
        </path>
        
        <resources>
          <URI>builder/Managable.java
          </URI>
          <URI>builder/AssemblyLoader.java
          </URI>
          <URI>builder/PropertySpecifier.java
          </URI>
          <URI>data/builder/BuilderScheme.java
          </URI>
          <URI>data/persist/XmlBean.java
          </URI>
          <URI>data/reflect/AssemblyType.java
          </URI>
          <URI>data/reflect/ReflectionTypeFactory.java
          </URI>
          <URI>data/reflect/ReflectionType.java
          </URI>
          <URI>util/URIUtil.java
          </URI>
        </resources>
      </scm:Change>

      <scm:Change>
        <notes>
          <scm:Note>Fixed NPE when no modules configured
          </scm:Note>
        </notes>
        
        <path>/source/spiralcraft/security/auth/AuthSession.java
        </path>
      </scm:Change>

    </detail>
  </scm:Change>    

  <scm:Change>
    <revision>0.4.2.2
    </revision>
    
    <authorId>miketoth
    </authorId>
    
    <date>2010-01-19
    </date>
    
    <notes>
      <scm:Note>Refactored spiralcraft.security.auth package to support
        multiple authentication modules.
      </scm:Note>
      <scm:Note>Added a Join query and backing functionality
      </scm:Note>
      <scm:Note>Added a Projection query and backing functionality
      </scm:Note>
      <scm:Note>The spiralcraft.data.task.Fetch task now returns a result,
        making it useful as a Functor in an expression and permitting
        in-line queries in Expressions.
      </scm:Note>
      <scm:Note>Misc fixes
      </scm:Note>
    </notes>
    
    <detail>

      <scm:Change>
        <notes>
          <scm:Note>Refactored spiralcraft.security.auth package to support
          multiple authentication modules.
          </scm:Note>
        
          <scm:Note>Authenticator and AuthSession are now concrete classes that
            are fully functional on their own. 
          </scm:Note>
          <scm:Note>The functionality previously in DataAuthenticator has been
            abstracted into a a DataAuthModule and a PasswordDataAuthModule.
            DataAuthenticator is now deprecated, and will probably disappear
            in the 0.5 series. 
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/security/
        </path>
        
        <resources>
          <URI>auth/Authenticator.java
          </URI>
          <URI>auth/AuthModule.java
          </URI>
          <URI>auth/AuthSession.java
          </URI>
          <URI>auth/TestAuthenticator.java
          </URI>
          <URI>spi/AbstractAuthModule.java
          </URI>
          <URI>spi/DataAuthenticator.java
          </URI>
          <URI>spi/DataAuthModule.java
          </URI>
          <URI>spi/PasswordDataAuthModule.java
          </URI>
        </resources>
      </scm:Change>

      <scm:Change>
        <notes>
          <scm:Note>The spiralcraft.data.task.Fetch task now returns a 
           result.
          </scm:Note>
        </notes>

        
        <path>/source/spiralcraft/data/task/Fetch.java
        </path>
      </scm:Change>

      <scm:Change>
        <notes>
          <scm:Note>Added a Projection query
          </scm:Note>
        </notes>

        
        <path>/source/spiralcraft/data/query/Projection.java
        </path>
      
      </scm:Change>
      
      
      <scm:Change>
        <notes>
          <scm:Note>Added a Join query
          </scm:Note>
        </notes>
        
        <path>/source/spiralcraft/data/query/Join.java
        </path>
      
      </scm:Change>
      
      <scm:Change>
        <notes>
          <scm:Note>Allow setting of debugLevel on BoundQuery
          </scm:Note>
        </notes>
        
        <path>/source/spiralcraft/data/query/BoundQuery.java
        </path>
      
      </scm:Change>
      
      <scm:Change>
        <notes>
          <scm:Note>Remove named parameters (BindingChannel instances) from 
            member signature debug message.
          </scm:Note>
        </notes>

        <path>/source/spiralcraft/lang/spi/AbstractChannel.java
        </path>
      
      </scm:Change>

      <scm:Change>
        <notes>
          <scm:Note>Fixed cast exception- chain property can be any Scenario, not
            just a Chain.
          </scm:Note>
        </notes>
        
        <path>/source/spiralcraft/task/Reference.java
        </path>
      
      </scm:Change>

    </detail>
  </scm:Change>    

  <scm:Change>
    <revision>0.4.2.1
    </revision>
    
    <authorId>miketoth
    </authorId>
    
    <date>2010-01-17
    </date>
    
    <notes>
      <scm:Note>Minor fixes and enhancements
      </scm:Note>
    </notes>
    
    <detail>

      <scm:Change>
        <notes>
          <scm:Note>Removed debugging messages
          </scm:Note>
        </notes>
        
        <path>/source/spiralcraft/lang/parser/ObjectLiteralNode.java
        </path>
      
      </scm:Change>
      
      <scm:Change>
        <notes>
          <scm:Note>Use context substitution for value of "ref" attribute
            to enable customization of resource location.
          </scm:Note>
        </notes>
        
        <path>/source/spiralcraft/data/sax/DataHandler.java
        </path>
      
      </scm:Change>
      
      <scm:Change>
        <notes>
          <scm:Note>Assert parameters for @tune and @log to fix NPE
          </scm:Note>
        </notes>
        
        <path>/source/spiralcraft/lang/spi/AbstractReflector.java
        </path>
      
      </scm:Change>

    </detail>
  </scm:Change>    

  <scm:Change>
    <revision>0.4.2
    </revision>
    
    <authorId>miketoth
    </authorId>
    
    <date>2010-01-13
    </date>
    
    <notes>
      <scm:Note>Completed bulk of enhancements related to integrating granular
      RPC based APIs- eg. Facebook, cloud APIs. 
      </scm:Note>
    </notes>
    
    <detail>
      <scm:Change>
      
        <date>2010-01-13
        </date>
        
        <notes>
          <scm:Note>Provided isContext(Channel) method in Focus to help
            ChannelFactories determine whether to chain the supplied Focus or
            use the existing Focus.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/
        </path>
        
        <resources>
          <URI>data/core/CalculatedFieldImpl.java
          </URI>
          <URI>data/core/KeyField.java
          </URI>
          <URI>data/core/ProjectionImpl.java
          </URI>
          <URI>data/core/QueryField.java
          </URI>
          <URI>data/core/TaskMethod.java
          </URI>
          <URI>lang/BaseFocus.java
          </URI>
          <URI>lang/Focus.java
          </URI>
          <URI>lang/FocusWrapper.java
          </URI>
          <URI>rules/ExpressionRule.java
          </URI>
        </resources>
        
      </scm:Change>

      <scm:Change>
      
        <date>2010-01-13
        </date>
        
        <notes>
          <scm:Note>Further clarification of ChannelFactory and Functor
            interfaces. 
          </scm:Note>
          <scm:Note>ChannelFactory interface re-established as a simple
            interface to extend Channel graphs. Most code that used the new
            Functor interface has been reverted back to using the no-longer
            deprecated ChannelFactory. The new ChannelFactory accepts a source
            channel and parameter expressions for maximum utility.
            
          </scm:Note>
          <scm:Note>Functor interface redefined to not accept a "source" 
            Channel, and to accept a set of bound channels as parameters.
            A Functor is expected to have a reference to its context (if any)
            at the time the Functor.bindChannel() is called (possibly
            repeatedly). By definition, the "source" of a Functor from
            the perspective of the channel graph would always be itself anyway.  
          </scm:Note>
          <scm:Note>GenericReflector simplified by use of ChannelFactory
            instead of Functor to enhance return types of base members.
          </scm:Note>          
        </notes>
        
        <path>source/spiralcraft/
        </path>
        
        <resources>
          <URI>lang/ChannelFactory.java
          </URI>
          <URI>lang/Functor.java
          </URI>
          <URI>lang/spi/GenericReflector.java
          </URI>
          <URI>data/Constraint.java
          </URI>
          <URI>data/Field.java
          </URI>
          <URI>data/Projection.java
          </URI>
          <URI>text/Translator.java
          </URI>
        </resources>
        
      </scm:Change>
    
      <scm:Change>
      
        <date>2010-01-13
        </date>
        
        <notes>
          <scm:Note>New language constructs
          </scm:Note>
          <scm:Note>Object literals: "[*myns:MyObj]",
            [*myns:MyObj{param1 , param2 , ... }] instantiate a constant
            reference to an object or to a channel provided by a 
            ChannelFactory. 
            If the object is a FocusChainObject it will be bound
            into the chain.
          </scm:Note>
          <scm:Note>Functors (callable objects): "myFunctorExpr.()",
            "myFunctorExpr.(param1, param2, ...)" provides a way to pass
            contextually defined functions around where they may be invoked
            against parameters that come from a different context via
            anonymous methods.
          </scm:Note>
          <scm:Note>"publish-as-URI" construct is now [#qname], changed from
            [*qname] because natural semantics match up better- ie. Names can be
            "hashed" into directories, and the "star" symbol is typically
            associated with "newing" things.
          </scm:Note>
          <scm:Note>Permit named parameters for all method calls.
          </scm:Note>
          <scm:Note>TypeModel consolidates cross-model search functionality
            into static method. 
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/
        </path>
        
        <resources>
          <URI>lang/TypeModel.java
          </URI>
          <URI>lang/parser/ExpressionParser.java
          </URI>
          <URI>lang/parser/TypeFocusNode.java
          </URI>
          <URI>lang/parser/TupleNode.java
          </URI>
          <URI>lang/parser/MethodCallNode.java
          </URI>
          <URI>lang/parser/ObjectLiteralNode.java
          </URI>
          <URI>lang/spi/AbstractFunctorChannel.java
          </URI>
          
        
        </resources>
      </scm:Change>

      <scm:Change>
      
        <date>2010-01-13
        </date>
        
        <notes>
          <scm:Note>CommandFactory now extends Functor. All CommandFactory
            instances can now be referenced from spiralcraft.lang as Functors,
            permitting the direct referencing of Task Scenarios from 
            expressions.
          </scm:Note>
          <scm:Note>Commands must now implement the setContext() method, even 
            if they choose to disallow this operation, as it is required for
            compilation of client code.
          </scm:Note>
          <scm:Note>CommandFactory.getCommandReflector() is now public
          </scm:Note>
          <scm:Note>Scenario now defines a bindImports method to allow 
            subclasses to operate on incoming data and augment both the
            internal and external Focus chain.
          </scm:Note>
          <scm:Note>TaskCommand now exposes an "error" property to allow 
            Scenario task implementations to register an expected error state,
            ie. not an exception. Also, result passing is now enabled through
            Scenario.storeResults. TaskCommand.collectResults now indicates
            that the command should accumulate task results in a collection.
          </scm:Note>
          <scm:Note>Chain scenario now requires addChainResult=true to 
            call ChainTask.addResult() with the completed chain command 
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/
        </path>
        
        <resources>
          <URI>command/AbstractCommandFactory.java
          </URI>
          <URI>command/Command.java
          </URI>
          <URI>command/CommandFactory.java
          </URI>
          <URI>command/CommandFunctorChannel.java
          </URI>
          <URI>task/Scenario.java
          </URI>
          <URI>task/TaskCommand.java
          </URI>
          <URI>task/Batch.java
          </URI>
          <URI>task/Chain.java
          </URI>
          <URI>data/sax/QueryXml.java
          </URI>
        </resources>
      </scm:Change>

      <scm:Change>
      
        <date>2010-01-13
        </date>
        
        <notes>
          <scm:Note>Reflectors are Functor aware via the isFunctor() method,
            which is used by client components to ensure that anonymous
            methods can be invoked.
          </scm:Note>
          <scm:Note>Reflectors which are themselves Functors provide 
            constructor access via the Functor mechanism.
          </scm:Note>
          <scm:Note>Various support components provide object construction
            and property binding services referenced by Functor method
            code.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/
        </path>
        
        <resources>
          <URI>lang/Reflector.java
          </URI>
          <URI>lang/reflect/BeanReflector.java
          </URI>
          <URI>lang/reflect/ConstructorChannel.java
          </URI>
          <URI>lang/reflect/MethodTranslator.java
          </URI>
          <URI>lang/spi/AbstractReflector.java
          </URI>
          <URI>lang/spi/GatherChannel.java
          </URI>
          <URI>data/lang/TupleConstructorChannel.java
          </URI>
          <URI>data/lang/TupleReflector.java
          </URI>
          
        </resources>
      </scm:Change>
      
      <scm:Change>
      
        <date>2010-01-13
        </date>
        
        <notes>
          <scm:Note>Renamed PrimaryIdentifierNode to ContextIdentifierNode to
            provide better clarity as to purpose.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/
        </path>
        
        <resources>
          <URI>data/query/Selection.java
          </URI>
          <URI>lang/parser/ContextIdentifierNode.java
          </URI>
          <URI>lang/parser/PrimaryIdentifierNode.java
          </URI>
          <URI>lang/parser/ExpressionParser.java
          </URI>
        </resources>
      </scm:Change>

      <scm:Change>
      
        <date>2010-01-13
        </date>
        
        <notes>
          <scm:Note>More infrastructure support for the use of Binding objects
            in lieu of expressions to simplify spiralcraft.lang client code.
          </scm:Note>
          <scm:Note>Use of Binding objects allow spiralcraft.lang clients to
            accept dynamic arguments via a pre-bound Binding object supplied
            to a bean setter. 
          </scm:Note>
          <scm:Note>Binding is now mapped from a data Type to support 
            externalization of Bindings in the same manner of Expressions 
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/
        </path>
        
        <resources>
          <URI>lang/spi/BindingChannel.java
          </URI>
          <URI>data/reflect/ReflectionType.java
          </URI>
          <URI>data/types/standard/BindingType.java
          </URI>
          <URI>task/Debug.java
          </URI>
          <URI>task/Debug.java
          </URI>
        </resources>
      </scm:Change>
      
      <scm:Change>
      
        <date>2010-01-13
        </date>
        
        <notes>
          <scm:Note>Make sure Expression text is reconstructed if no text is
            provided on construction.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/lang/Expression.java
        </path>
      </scm:Change>

      <scm:Change>
      
        <date>2010-01-13
        </date>
        
        <notes>
          <scm:Note>New "debugFormat(char)" method prints the text and numeric
            value of a character to assist in debugging character related
            issues.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/util/string/StringUtil.java
        </path>
      </scm:Change>

      <scm:Change>
      
        <date>2010-01-13
        </date>
        
        <notes>
          <scm:Note>Made ParsePosition object in LookaheadParseContext and
            PushbackParserContext final to ensure that references will be
            valid for the lifetime of the parse operation.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/text/
        </path>
        
        <resources>
          <URI>LookaheadParserContext.java
          </URI>
          <URI>PushbackParserContext.java
          </URI>
        </resources>
      </scm:Change>

    </detail>
  </scm:Change>
  
  <scm:Change>
    <revision>0.4.1
    </revision>
    
    <authorId>miketoth
    </authorId>
    
    <date>2010-01-05
    </date>
    
    <notes>
      <scm:Note>Many enhancements related to integrating granular RPC 
        based APIs- eg. Facebook, cloud APIs. 
      </scm:Note>
    </notes>
    
    <detail>
      <scm:Change>
        <date>2009-12-31
        </date>
        
        <notes>
          <scm:Note>New Binding class unifies Expression and Channel to
            make it easier to accept Expression based properties. 
          </scm:Note>
          
        </notes>
        
        <path>source/spiralcraft/lang/</path>
        
        <resources>
          <URI>Binding.java
          </URI>
          <URI>ParseXml.java
          </URI>
        </resources>
        
      </scm:Change>
          
      <scm:Change>
        <date>2009-12-31
        </date>
        
        <notes>
          <scm:Note>XML "rest" pipeline enhancements  
          </scm:Note>
          <scm:Note>Granularize XML data processing component binding to
            allow subclasses to export the command context to internals
            and children and provide an application specific query string
          </scm:Note>
          <scm:Note>Enhance DictionaryBinding so that the get() and multiGet()
            methods will both return a meaningful value as long as the
            appropriate converters are set. Provide information re. 
            binding cardinality.
          </scm:Note>

          
        </notes>
        
        <path>source/spiralcraft/</path>
        <resources>
          <URI>data/sax/ParseXml.java
          </URI>
          <URI>data/sax/QueryXml.java
          </URI>
          <URI>lang/util/DictionaryBinding.java
          </URI>
        </resources>
        
      </scm:Change>
      
      <scm:Change>
        <date>2009-12-27
        </date>
        
        <notes>
          <scm:Note>Remove duplicate code between UncheckedCastChannel
            and AspectChannel by converting all uses to AspectChannel.
          </scm:Note>
          <scm:Note>Move AssignmentChannel to lang.spi for easier use by
            client code.
          </scm:Note>
          
          <path>source/spiralcraft/</path>
          
          <resources>
            <URI>data/core/FieldImpl.java
            </URI>
            <URI>lang/spi/UncheckedCastChannel.java
            </URI>
            <URI>lang/Assignment.java
            </URI>
            <URI>lang/parser/AssignmentNode.java
            </URI>
            <URI>lang/parser/AssignmentChannel.java
            </URI>
          </resources>
          
        </notes>
      </scm:Change>

      <scm:Change>
        <date>2009-12-27
        </date>
        
        <notes>
          <scm:Note>Made command input context accessible
          </scm:Note>
          <scm:Note>Provide a means for enhancing Reflectors with additional
            type information
          </scm:Note>
          <scm:Note>Enabled parameterization of TaskMethods in spiralcraft.data
          </scm:Note>
          <scm:Note>Implemented named parameters for TaskMethods.
          </scm:Note>
          <scm:Note>Data methods expose Signatures for parameter matching and
            debugging
          </scm:Note>
          <scm:Note>Task infrastructure enhanced to manage Command context and
            result.
          </scm:Note>
          <scm:Note>BeanReflector now allows primitives to be
            assigned to their boxed equivalents.
          </scm:Note>
          <scm:Note>Signature added to AbstractChannel.resolve() exception 
          </scm:Note>
          
          
          <path>source/spiralcraft/</path>
          
          <resources>
            <URI>command/AbstractCommandFactory.java
            </URI>
            <URI>command/CommandFactory.java
            </URI>
            <URI>lang/Reflectable.java
            </URI>
            <URI>lang/Signature.java
            </URI>
            <URI>lang/parser/BindingNode.java
            </URI>
            <URI>lang/parser/ExpressionParser.java
            </URI>
            <URI>lang/parser/Node.java
            </URI>
            <URI>lang/parser/TupleField.java
            </URI>
            <URI>lang/parser/TupleNode.java
            </URI>
            <URI>lang/spi/AbstractChannel.java
            </URI>
            <URI>lang/spi/AbstractReflector.java
            </URI>
            <URI>lang/spi/BindingChannel.java
            </URI>
            <URI>lang/spi/ProxyReflector.java
            </URI>
            <URI>lang/spi/GenericReflector.java
            </URI>
            <URI>lang/reflect/BeanReflector.java
            </URI>
            <URI>service/Daemon.java
            </URI>
            <URI>task/Batch.java
            </URI>
            <URI>task/Chain.java
            </URI>
            <URI>task/Debug.java
            </URI>
            <URI>task/Exec.java
            </URI>
            <URI>task/Scenario.java
            </URI>
            <URI>task/TaskCommand.java
            </URI>
            <URI>ui/StepControl.java
            </URI>
            <URI>data/Method.java
            </URI>
            <URI>data/core/MethodImpl.java
            </URI>
            <URI>data/lang/TupleReflector.java
            </URI>
          </resources>
          
        </notes>
      </scm:Change>

      <scm:Change>
        <date>2009-12-26
        </date>
        
        <notes>
          <scm:Note>Warnings cleanup
          </scm:Note>
          
          
          <path>source/spiralcraft/task/Batch.java</path>
          
        </notes>
      </scm:Change>

      <scm:Change>
        <date>2009-12-26
        </date>
        
        <notes>
          <scm:Note>Make it easier for components to use namespace mappings
            from XML, Builder, WebUI and other DI/IOC containers.
          </scm:Note>
          
          <scm:Note>Refactored the Namespace resolution mechanism to add
            thread-context based prefix mappings checked at object
            construction time. This applies to Namespace-aware objects 
            constructed directly or indirectly within the context of a 
            Namespace-aware container, and accounts for the major use case.
          </scm:Note>
          
          <scm:Note>The Expression AST traversal "copy" mechanism, which
            resolves unresolved namespace prefixes at a post-construction
            point in time, has been made more efficient to ensure that a 
            copy of an Expression is only used when the copy is not
            identical to the original instance.
          </scm:Note>

          <scm:Note>The Namespace mechanism has been moved to its own 
            common package spiralcraft.common.Namespace. An empty string
            is used to represent the "default" prefix mapping, instead of
            requiring an extra method.
          </scm:Note>
          
          <path>source/spiralcraft/</path>
          
          <resource>
            <URI>builder/PropertyBinding.java
            </URI>
            <URI>builder/PropertySpecifier.java
            </URI>
            <URI>common/NamespaceResolver.java
            </URI>
            <URI>common/namespace/NamespaceContext.java
            </URI>
            <URI>common/namespace/PrefixResolver.java
            </URI>
            <URI>data/access/Updater.java
            </URI>
            <URI>data/sax/AbstractFrameHandler.java
            </URI>
            <URI>data/sax/DataHandlerBase.java
            </URI>
            <URI>data/sax/FrameHandler.java
            </URI>
            <URI>data/sax/RecursiveFrame.java
            </URI>
            <URI>lang/BaseFocus.java
            </URI>
            <URI>lang/Expression.java
            </URI>
            <URI>lang/Focus.java
            </URI>
            <URI>lang/FocusWrapper.java
            </URI>
            <URI>lang/NamespaceFocus.java
            </URI>
            <URI>lang/SimpleFocus.java
            </URI>
            <URI>lang/parser/AbsoluteFocusNode.java
            </URI>
            <URI>lang/parser/AggregateProjectNode.java
            </URI>
            <URI>lang/parser/AssignmentNode.java
            </URI>
            <URI>lang/parser/ConditionalNode.java
            </URI>
            <URI>lang/parser/ContainsNode.java
            </URI>
            <URI>lang/parser/ContextNode.java
            </URI>
            <URI>lang/parser/EqualityNode.java
            </URI>
            <URI>lang/parser/ExclusiveOrNode.java
            </URI>
            <URI>lang/parser/ListNode.java
            </URI>
            <URI>lang/parser/LiteralNode.java
            </URI>
            <URI>lang/parser/LogicalAndNode.java
            </URI>
            <URI>lang/parser/LogicalNegateNode.java
            </URI>
            <URI>lang/parser/LogicalNode.java
            </URI>
            <URI>lang/parser/LogicalOrNode.java
            </URI>
            <URI>lang/parser/MethodCallNode.java
            </URI>
            <URI>lang/parser/Node.java
            </URI>
            <URI>lang/parser/NumericNegateNode.java
            </URI>
            <URI>lang/parser/NumericOpNode.java
            </URI>
            <URI>lang/parser/OpNode.java
            </URI>
            <URI>lang/parser/ParentFocusNode.java
            </URI>
            <URI>lang/parser/PrimaryIdentifierNode.java
            </URI>
            <URI>lang/parser/RangeNode.java
            </URI>
            <URI>lang/parser/RelationalNode.java
            </URI>
            <URI>lang/parser/ResolveNode.java
            </URI>
            <URI>lang/parser/SubcontextNode.java
            </URI>
            <URI>lang/parser/SubscriptNode.java
            </URI>
            <URI>lang/parser/SyntaxNode.java
            </URI>
            <URI>lang/parser/TupleField.java
            </URI>
            <URI>lang/parser/TupleNode.java
            </URI>
            <URI>lang/parser/TypeFocusNode.java
            </URI>
            <URI>sax/Node.java
            </URI>
            <URI>sax/ParseTree.java
            </URI>
            <URI>sax/PrefixResolver.java
            </URI>
            <URI>sax/SaxPrefixResolver.java
            </URI>
          </resource>
          
        </notes>

      </scm:Change>
    </detail>
  </scm:Change>
        

  <scm:Change>
    <revision>0.4.0
    </revision>
    
    <authorId>miketoth
    </authorId>
    
    <date>2009-12-15
    </date>
    
    <notes>
      <scm:Note>Many enhancements related to integrating granular RPC 
        based APIs- eg. Facebook, cloud APIs. Interim release contains
        partial implementation of new features.
      </scm:Note>
    </notes>
    
    <detail>

      <scm:Change>
        <date>2009-12-15
        </date>
        
        <notes>
          <scm:Note>Buffer provides a touch() method to make it dirty.
          </scm:Note>
          
          <path>source/spiralcraft/data/session</path>
          
          <resource>
            <URI>Buffer.java
            </URI>
            <URI>BufferAggregater.java
            </URI>
            <URI>BufferTuple.java
            </URI>
          </resource>
          
        </notes>

      </scm:Change>

      <scm:Change>
        <date>2009-12-14
        </date>
        
        <notes>
          <scm:Note>Default namespaces are mapped to the empty string instead
            of "default" to match the SAX API spec.
          </scm:Note>
          <scm:Note>AbstractFrameHandler.transformNamespace is no longer static
            and can generate debug messages.
          </scm:Note>
          
          <path>source/spiralcraft</path>
          
          <resource>
            <URI>data/sax/DataHandlerBase.java</URI>
          </resource>
          
        </notes>

      </scm:Change>
      
      <scm:Change>
        <date>2009-12-14
        </date>
        
        <notes>
          <scm:Note>Functor replaces ChannelFactory as general purpose 
            mechanism to extend Channel graphs. ChannelFactory is now
            deprecated, and all implementers now implement Functor instead.
          </scm:Note>
          
          <scm:Note>Reflector is now an interface to facilitate wrapping and
            proxying. Implementation classes now extend AbstractReflector.
          </scm:Note>
          
          
        </notes>
      
        <resource>
          <URI>lang/Functor.java</URI>
          <URI>lang/ChannelFactory.java</URI>
          <URI>lang/Reflector.java</URI>
          <URI>lang/StaticFocus.java</URI>
          <URI>lang/parser/TupleNode.java</URI>
          <URI>lang/reflect/ArrayReflector.java</URI>
          <URI>lang/reflect/BeanReflector.java</URI>
          <URI>lang/spi/AbstractReflector.java</URI>
          <URI>lang/spi/ExtendedReflector.java</URI>
          <URI>lang/spi/NamespaceReflector.java</URI>
          <URI>lang/spi/VoidReflector.java</URI>
          <URI>security/auth/CredentialSetChannel.java</URI>
          <URI>data/Constraint.java</URI>
          <URI>data/Field.java</URI>
          <URI>data/Projection.java</URI>
          <URI>data/access/DataSynchronizer.java</URI>
          <URI>data/core/CalculatedFieldImpl.java</URI>
          <URI>data/core/CursorField.java</URI>
          <URI>data/core/FieldImpl.java</URI>
          <URI>data/core/KeyField.java</URI>
          <URI>data/core/ProjectionImpl.java</URI>
          <URI>data/core/QueryField.java</URI>
          <URI>data/core/RequiredRule.java</URI>
          <URI>data/core/TaskMethod.java</URI>
          <URI>data/core/UniqueRule.java</URI>
          <URI>data/lang/DataReflector.java</URI>
          <URI>data/lang/TupleReflector.java</URI>
          <URI>data/query/Distinct.java</URI>
          <URI>data/sax/TupleFrame.java</URI>
          <URI>data/session/BufferField.java</URI>
          <URI>data/spi/DataKeyFunction.java</URI>
          <URI>data/types/standard/StringType.java</URI>
          <URI>text/translator/Clip.java</URI>
          <URI>text/translator/Translator.java</URI>
          <URI>rules/Rule.java</URI>
          <URI>rules/ExpressionRule.java</URI>
          <URI>rules/PatternRule.java</URI>
          <URI>rules/Inspector.java</URI>
          
           
        </resource>
      </scm:Change>
      
      
      <scm:Change>
        <date>2009-12-14
        </date>
        
        <notes>
          <scm:Note>Scenario and TaskCommand now have type parameters
            reflecting command API changes. All Scenario
            implementations are updated.
          </scm:Note>        
        </notes>
        
        <path>source/spiralcraft
        </path>
        
        <resources>
          <URI>task/AbstractTask.java</URI>
          <URI>task/Assign.java</URI>
          <URI>task/Batch.java</URI>
          <URI>task/Chain.java</URI>
          <URI>task/Debug.java</URI>
          <URI>task/Exec.java</URI>
          <URI>task/If.java</URI>
          <URI>task/Reference.java</URI>
          <URI>task/Scenario.java</URI>
          <URI>task/Sequence.java</URI>
          <URI>task/Session.java</URI>
          <URI>task/TaskCommand.java</URI>
          <URI>task/TaskRunner.java</URI>
          <URI>task/When.java</URI>
          <URI>test/Test.java</URI>
          <URI>test/TestGroup.java</URI>
          <URI>data/sax/ParseXml.java</URI>
          <URI>data/task/Collect.java</URI>
          <URI>data/task/Edit.java</URI>
          <URI>data/task/Fetch.java</URI>
          <URI>data/util/DataBatchProcessor.java</URI>
          <URI>vfs/task/Copy.java</URI>
        </resources>
      </scm:Change>

      
      <scm:Change>
        <date>2009-12-14
        </date>
        
        <notes>
          <scm:Note>Command pattern now incorporates a generic input context
            to support the notion of parameter-driven Commands. This allows
            the Command pattern to support "method" semantics and to act
            as an intermediate representation of method calls and RPC 
            invocations.
          </scm:Note>
          <scm:Note>This is a broad interface change which affects most
            code which uses the spiralcraft.command package.
          </scm:Note>
        
        </notes>
        
        <path>source/spiralcraft
        </path>
        
        <resources>
          <URI>command/Command.java</URI>
          <URI>command/Commandable.java</URI>
          <URI>command/CommandAdapter.java</URI>
          <URI>command/CommandFactory.java</URI>
          <URI>command/CommandProcessor.java</URI>
          <URI>data/editor/EditorBase.java</URI>
          <URI>data/editor/TupleEditor.java</URI>
          <URI>data/flatfile/Output.java</URI>
          <URI>data/flatfile/Parser.java</URI>
          <URI>data/flatfile/Scan.java</URI>
          <URI>data/rest/RestService.java</URI>
          <URI>data/spi/ListAggregate.java</URI>
          <URI>ui/Step.java</URI>
          <URI>ui/StepControl.java</URI>
          <URI>service/Daemon.java</URI>
          <URI>shell/CommandConsole.java</URI>
          <URI>shell/FocusCommand.java</URI>
          <URI>shell/HelpCommand.java</URI>
          <URI>shell/LookCommand.java</URI>
        </resources>
      </scm:Change>
      
      <scm:Change>
        <date>2009-11-23
        </date>
        
        <notes>
          <scm:Note>Implemented MessageDigest utility to convert from 
            different content representations to different digest
            representations.
          </scm:Note>
          <scm:Note>Added prepad function to StringUtil to pad number
            representations with leading digits/chars.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/util/
        </path>
        
        <resources>
          <URI>crypt/Digester.java
          </URI>
          <URI>string/StringUtil.java
          </URI>
        </resources>
        

      </scm:Change>

      <scm:Change>
        <date>2009-11-23
        </date>
        
        <notes>
          <scm:Note>Implemented Character literals delimited by single quote
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/lang/ExpressionParser.java
        </path>
        

      </scm:Change>
    </detail>
  
  </scm:Change>
  
  
  <scm:Change>
    <revision>0.3.22
    </revision>
    
    <authorId>miketoth
    </authorId>
    
    <date>2009-11-15
    </date>
    
    <notes>
      <scm:Note>Modification to Focus mechanism to provide better naming
        and association flexibility.
      </scm:Note>
      <scm:Note>Revision of spiralcraft.lang tuple/inline-context syntax.
      </scm:Note>
      <scm:Note>Changed "cause" to "root cause" in DataException text
      </scm:Note>
      <scm:Note>Fix NPE in spiralcraft.lang when handling non-hierarchical URIs
      </scm:Note>
      <scm:Note>Fix: Applying a new Type to a SequenceField did not work.
      </scm:Note>
      <scm:Note>Fix NPE: When no Sequences are defined in an AbstractStore
      </scm:Note>    
      <scm:Note>Provide a more detailed Exception when loading a type from XML
        fails. 
      </scm:Note>    
    </notes>
    
    <detail>

      <scm:Change>
        <date>2009-11-13
        </date>
        
        <notes>
          <scm:Note>Provide access to the index counter in inline
            iterations using [lang:IterationCursor].index
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/lang/
        </path>
        
        <resources>
          <URI>IterationCursor.java
          </URI>
          <URI>spi/IterationProjector.java
          </URI>
        </resources>
      </scm:Change>
    
      <scm:Change>
        <date>2009-11-13
        </date>
        
        <notes>
          <scm:Note>Provide access to the index counter in inline
            iterations using [lang:IterationCursor].index
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/lang/
        </path>
        
        <resources>
          <URI>IterationCursor.java
          </URI>
          <URI>spi/IterationProjector.java
          </URI>
        </resources>
      </scm:Change>

      <scm:Change>
        <date>2009-11-13
        </date>
        
        <notes>
          <scm:Note>Provide a more detailed Exception when loading a data 
            Type from XML fails.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/data/xml/XmTypeFactory.java
        </path>
      </scm:Change>

    
      <scm:Change>
        <date>2009-11-13
        </date>
        
        <notes>
          <scm:Note>Provide a more detailed Exception when loading a type
            from XML fails.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/data/xml/XmTypeFactory.java
        </path>
      </scm:Change>

      <scm:Change>
        <date>2009-11-13
        </date>
        
        <notes>
          <scm:Note>Fix: Spin condition in lazy fetch functionality when 
            initial fetch contains no elements and expected size is not set.
          </scm:Note>
          <scm:Note>Added "fetchable" flag, which is set on the installation
            of the fetchCommand and turned off when the fetchCommand throws
            an exception or adds no results.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/data/spi/ListAggregate.java
        </path>
      </scm:Change>

      <scm:Change>
        <date>2009-11-13
        </date>
        
        <notes>
          <scm:Note>Fix NPE: When no Sequences are defined in an AbstractStore
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/data/spi/AbstractStore.java
        </path>
      </scm:Change>

      <scm:Change>
        <date>2009-11-13
        </date>
        
        <notes>
          <scm:Note>Fix: Applying a new Type to a SequenceField did not work.
          </scm:Note>
          <scm:Note>The case where overriding an existing type using 
            a TypeReference vs. extension of an existing type using
            its TypeReference were insufficiently differentiated.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/data/
        </path>
        
        <resources>
          <URI>MetaType.java
          </URI>
          <URI>reflect/ReflectionField.java
          </URI>
          <URI>reflect/ReflectionType.java
          </URI>
        </resources>
      </scm:Change>

      <scm:Change>
        <date>2009-11-13
        </date>
        
        <notes>
          <scm:Note>Changed "cause" to "root cause" in DataException text
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/data/DataException.java
        </path>
      </scm:Change>

      <scm:Change>
        <date>2009-11-13
        </date>
        
        <notes>
          <scm:Note>Modification to Focus mechanism to provide better naming
            and association flexibility.
          </scm:Note>
          <scm:Note>In-line iterations '#{ }' provide iteration metadata into
            Focus chain via [lang:IterationCursor]
          </scm:Note>
          <scm:Note>Added addAlias,addFacet,toFormattedString methods to Focus.
          </scm:Note>
          <scm:Note>CompoundFocus is now deprecated. All Foci
            now support facets.
          </scm:Note>
          <scm:Note>StaticFocus is now deprecated. Use static method
            syntax [@myns:MyClass].@myStaticMethod(foo)
          </scm:Note>
          <scm:Note>BaseFocus assumes findFocus() and isFocus() default
            implementation, and manages aliases and facets (other Foci 
            addressable from below this Focus chain link).
          </scm:Note>
          <scm:Note>BaseFocus implements getFocusChain().toFormattedString()
             and makes output more readable.
          </scm:Note>
          <scm:Note>Fix NPE when handling non-hierarchical URIs
          </scm:Note>
          <scm:Note>AssemblyFocus trimmed down by refactor
          </scm:Note>
          <scm:Note>RestService, DataSessionFocus moved off CompoundFocus to 
                SimpleFocus
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/
        </path>
        
        <resources>
          <URI>lang/SimpleFocus.java
          </URI>
          <URI>lang/BaseFocus.java
          </URI>
          <URI>lang/CompoundFocus.java
          </URI>
          <URI>lang/StaticFocus.java
          </URI>
          <URI>lang/TeleFocus.java
          </URI>
          <URI>lang/FocusWrapper.java
          </URI>         
          <URI>lang/spi/ClosureFocus.java
          </URI>
          <URI>util/URIUtil.java
          </URI>
          <URI>builder/Assembly.java
          </URI>
          <URI>data/rest/RestService.java
          </URI>
          <URI>data/session/DataSessionFocus.java
          </URI>
          <URI>security/auth/Authenticator.java
          </URI>
        </resources>
      </scm:Change>
      
      <scm:Change>
        <date>2009-11-13
        </date>

        <notes>
           <scm:Note>Array equality computation in lang/reflect defers to single
             deep implementation.
           </scm:Note>
           <scm:Note>ArrayEqualityTranslator passes null for "not equal" 
             condition for use in implementing != operator.
           </scm:Note>
        </notes>

        <path>source/spiralcraft/lang/
        </path>
        
        <resources>
          <URI>parser/ArrayEqualityTranslator.java
          </URI>
          <URI>reflect/ArrayReflector.java
          </URI>
          <URI>reflect/BeanReflector.java
          </URI>
        </resources>      
      </scm:Change>
            
      <scm:Change>
        <date>2009-11-13
        </date>

        <notes>
           <scm:Note>Logical and Aggregate nodes query the Reflector to bind
             an operation as part of the bind attempt
           </scm:Note>
        </notes>

        <path>source/spiralcraft/lang/parser/
        </path>
        
        <resources>
          <URI>AggregateProjectNode.java
          </URI>         
          <URI>LogicalNode.java
          </URI>
        </resources>      
      </scm:Change>

      <scm:Change>
        <date>2009-11-13
        </date>

        <notes>
           <scm:Note>Pulled namespace translation logic into Node class.
           </scm:Note>
        </notes>

        <path>source/spiralcraft/lang/parser/
        </path>
        
        <resources>
          <URI>AbsoluteFocusNode.java
          </URI>         
          <URI>TypeFocusNode.java
          </URI>
          <URI>Node.java
          </URI>
        </resources>      
      </scm:Change>

      <scm:Change>
        <date>2009-11-13
        </date>

        <notes>
          <scm:Note>Simplified spiralcraft.lang tuple/inline-context
            syntax.
          </scm:Note>
          <scm:Note>A TupleExpression is now a stand-alone expression that
            contains an expression list, that starts and ends with { }- ie
            { x:=6, y:=.x }. It contains its own telescoped focus so that
            fields can be bound to the previously defined  fields. 
          </scm:Note>
          <scm:Note>An in-line context is contained within a postfix expression
            and creates a telescoped focus on the part of the postfix expression
            that preceeds it. ie. customer.name{ .substring(1,.length()) }. The
            in-line context provides the result of the contained expression.
          </scm:Note>
          <scm:Note>Simplified parser handling of postfix expressions
          </scm:Note>
        </notes>

        <path>source/spiralcraft/lang/parser/
        </path>
        
        <resources>
          <URI>ExpressionParser.java
          </URI>         
          <URI>TupleNode.java
          </URI>
          <URI>SyntaxNode.java
          </URI>
          <URI>SubcontextNode.java
          </URI>
          <URI>TupleProjectNode.java
          </URI>
        </resources>      
      </scm:Change>
    </detail>
    
  </scm:Change>
    
  <scm:Change>
    <revision>0.3.21.1
    </revision>
    
    <authorId>miketoth
    </authorId>
    
    <date>2009-09-30
    </date>
    
    <notes>
      <scm:Note>Fix NPE: Default the contentType (Tuple implementation type)
        of TupleReflector to be Tuple.class if no specific subtype is supplied.
        Also check for nulls in BeanReflector methods to better indicate
        when a null is being past to static and instance contructors.
      </scm:Note>
    </notes>
    
    <path>source/spiralcraft/
    </path>
    
    <resources>
      <URI>data/lang/TupleReflector.java
      </URI>
      <URI>lang/reflect/BeanReflector.java
      </URI>
    </resources>
  </scm:Change>
  
  <scm:Change>
    <revision>0.3.21
    </revision>
    
    <authorId>miketoth
    </authorId>
    
    <date>2009-09-25
    </date>
    
    <notes>
      <scm:Note>Fixed incomplete implementation of modulo operator
      </scm:Note>
    </notes>
    
    <path>source/spiralcraft/lang/NumericOpNode.java
    </path>
  </scm:Change>

  <scm:Change>
    <revision>0.3.20
    </revision>
    
    <authorId>miketoth
    </authorId>
    
    <date>2009-09-25
    </date>
    
    <notes>
      <scm:Note>Fixed various corner case issues in spiralcraft.data
        inheritance
      </scm:Note>
      <scm:Note>Provide access to the run directory through the vfs "context"
        uri scheme. 
      </scm:Note>
      <scm:Note>TaskRunner accepts a --serviceURI argument.
      </scm:Note>
      <scm:Note>Hooks for post-startup tasks to be run for Daemons
      </scm:Note>
      
      <scm:Note>spiralcraft.lang enhancements to provide access to  
        abstracted Collection and List semantics of Channel objects.
      </scm:Note>
      <scm:Note>Implemented Range Expressions int spiralcraft.lang
      </scm:Note>
      <scm:Note>Completed support in data task package for publishing 
        lazy-loading aggregates
      </scm:Note>
      <scm:Note>Simplification of Pool implementation to use dedicated thread
        for Keeper.
      </scm:Note>
      <scm:Note>Sanitized system log by converting message to ASCII
      </scm:Note>
      <scm:Note>Further refinements to spiralcraft.lang tuple syntax
      </scm:Note>
      <scm:Note>Misc fixes
      </scm:Note>
    </notes>
    
    <detail>
      <scm:Change>
        <date>2009-09-25
        </date>

        <notes>
          <scm:Note>Sanitized system log by converting message to ASCII
          </scm:Note>
        </notes>

        <path>source/spiralcraft/
        </path>
        
        <resources>
          <URI>log/DefaultFormatter.java</URI>
          <URI>util/string/StringUtil.java</URI>
        </resources>
      </scm:Change>

      <scm:Change>
        <date>2009-09-25
        </date>

        <notes>
          <scm:Note>TaskRunner accepts a --serviceURI argument
          </scm:Note>
        </notes>

        <path>source/spiralcraft/task/TaskRunner.java
        </path>
        
      </scm:Change>

      <scm:Change>
        <date>2009-09-25
        </date>

        <notes>
          <scm:Note>Provide access to the run directory through the vfs "context"
        uri scheme. Set the "context" URI scheme default mapping to the 
        ExecutionContext focusURI (usually the process working directory)
        at the main Executor entry point.
          </scm:Note>
        </notes>

        <path>source/spiralcraft/
        </path>
        
        <resources>
          <URI>exec/Executor.java</URI>
          <URI>vfs/ContextResourceMap.java</URI>
        </resources>
      </scm:Change>

        
        
      <scm:Change>
        <date>2009-09-25
        </date>

        <notes>
          <scm:Note>Implemented Range Expressions in spiralcraft.lang
          </scm:Note>
        </notes>    
        
        <path>source/spiralcraft/
        </path>
        
        <resources>
          <URI>lang/Range.java</URI>
          <URI>lang/parser/ExpressionParser.java</URI>
          <URI>lang/parser/RangeNode.java</URI>
          <URI>lang/reflect/ArrayReflector.java</URI>
          <URI>lang/reflect/BeanReflector.java</URI>
          <URI>lang/spi/ArrayRangeChannel.java</URI>
          <URI>lang/spi/ListRangeChannel.java</URI>
          <URI>data/lang/AggregateReflector.java</URI>
          <URI></URI>
        </resources>
      </scm:Change>

      <scm:Change>
        <date>2009-09-25
        </date>

        <notes>
          <scm:Note>Fixed various corner case issues in spiralcraft.data
            inheritance
          </scm:Note>
          <scm:Note>Implemented Field level polymorphism for baseType extension
            in spiralcraft.data. 
          </scm:Note>
          <scm:Note>Scheme defers to Type when determining primary key through
            inheritance hierarchy.
          </scm:Note>
        </notes>    
        
        <path>source/spiralcraft/
        </path>
        
        <resources>
          <URI>data/core/FieldImpl.java</URI>
          <URI>data/core/SchemeImpl.java</URI>
          <URI>lang/spi/UncheckedCastChannel.java</URI>
        </resources>
      </scm:Change>

      <scm:Change>
        <date>2009-09-22
        </date>

        <notes>
          <scm:Note>Further refinements to spiralcraft.lang tuple syntax
          </scm:Note>
          <scm:Note>Permit standalone expressions as implicit, anonymous fields
          </scm:Note>
          <scm:Note>Type decls must be associated with an explicit field decl
          </scm:Note>
          <scm:Note>Allow Type decl to be included along with source
            expression to allow for wider field type than source type.
          </scm:Note>
        </notes>    
        
        <path>source/spiralcraft/lang/parser/
        </path>
        
        <resources>
          <URI>ExpressionParser.java</URI>
          <URI>TupleField.java</URI>
          <URI>TupleNode.java</URI>
        </resources>
      </scm:Change>

      <scm:Change>
        <date>2009-09-21
        </date>

        <notes>
          <scm:Note>Simplified Pool to use dedicated thread for Keeper
          </scm:Note>
          
        </notes>    
        
        <path>source/spiralcraft/
        </path>
        
        <resources>
          <URI>pool/Pool.java</URI>
          <URI>time/Scheduler.java</URI>
        </resources>
      </scm:Change>

      <scm:Change>
        <date>2009-09-21
        </date>

        <notes>
          <scm:Note>Remove extraneous debug messages
          </scm:Note>
          
        </notes>    
        
        <path>source/spiralcraft/data/builder/BuilderField.java
        </path>
      </scm:Change>

      <scm:Change>
        <date>2009-09-17
        </date>

        <notes>
          <scm:Note>Simple chainable "If" scenario for task framework.
          </scm:Note>
          
        </notes>    
        
        <path>source/spiralcraft/task/If.java
        </path>
      </scm:Change>

      <scm:Change>
        <date>2009-09-17
        </date>

        <notes>
          <scm:Note>Usability enhancements to data query framework
          </scm:Note>
          <scm:Note>It is no longer required that a Store be present in
            the Focus chain for queries to work, if all queries can
            resolve their default binding. This permits non-optimized queries
            to be created against opaque data sources (ie. ReferenceQuery). It
            is still preferable for Query clients to resolve the query against
            a specific Queryable.
          </scm:Note>          
          <scm:Note>ReferenceQuery can obtain data from any Channel that
            supports an IterationDecorator, by using an IteratorCursor to
            publish the result.
          </scm:Note>          
          <scm:Note>Sort allows the result type (and resulting Comparator set)
            to be determined from the upstream bound query.
          </scm:Note>          
          <scm:Note>KeyField uses Query.bind() when no Queryable is available
          </scm:Note>
          
        </notes>    
        
        <path>source/spiralcraft/data/
        </path>
        
        <resources>
          <URI>query/Query.java</URI>
          <URI>query/ReferenceQuery.java</URI>
          <URI>query/Sort.java</URI>
          <URI>query/Scan.java</URI>
          <URI>query/UnaryBoundQuery.java</URI>
          <URI>spi/IteratorCursor.java</URI>
          <URI>task/Fetch.java</URI>
          <URI>core/KeyField.java</URI>
        </resources>
      </scm:Change>

      <scm:Change>
        <date>2009-09-17
        </date>

        <notes>
          <scm:Note>Completed support in data task package for publishing 
            lazy-loading aggregates
          </scm:Note>
        </notes>    
        
        <path>source/spiralcraft/data/
        </path>
        
        <resources>
          <URI>task/Collect.java</URI>
          <URI>spi/ListAggregate.java</URI>
        </resources>
      </scm:Change>
      
      <scm:Change>
        <date>2009-09-17
        </date>

        <notes>
          <scm:Note>spiralcraft.lang enhancements to provide access to  
            abstracted Collection and List semantics of Channel objects.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/
        </path>
        
        <resources>
          <URI>lang/CollectionDecorator.java</URI>
          <URI>lang/ListDecorator.java</URI>
          <URI>lang/reflect/ArrayReflector.java</URI>
          <URI>lang/reflect/BeanReflector.java</URI>
          <URI>lang/reflect/CollectionReflector.java</URI>
          <URI>lang/spi/ArrayCollectionDecorator.java</URI>
          <URI>lang/spi/ArrayListDecorator.java</URI>
          <URI>lang/spi/GenericCollectionDecorator.java</URI>
          <URI>lang/spi/GenericListDecorator.java</URI>
          <URI>data/lang/AggregateReflector.java</URI>
        </resources>
      </scm:Change>

      <scm:Change>
        <date>2009-09-17
        </date>

        <notes>
          <scm:Note>Make the Scheduler ensure a minAvailable of 2 threads so
            the PoolKeeper for the ThreadPool can schedule itself efficiently.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/time/Scheduler.java
        </path>
        
      </scm:Change>
      
      <scm:Change>
        <date>2009-09-14
        </date>

        <notes>
          <scm:Note>Make URLResource overwrite the "Connection" property
            to avoid keepalive connections by default.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/vfs/url/URLResource.java
        </path>
        
      </scm:Change>
      
      <scm:Change>
        <date>2009-09-14
        </date>

        <notes>
          <scm:Note>Added buffering and debugging enhancements to QueryXml
            and underlying URLResource where applicable.
          </scm:Note>
          <scm:Note>Added inputBufferLength property to URLResource
          </scm:Note>
          <scm:Note>Added inputBufferLength property to QueryXml, which is
            passed through to URLResource where applicable.
          </scm:Note>
          <scm:Note>When URLResource system-wide debugging is set to FINE, 
            a DebugInputStream wraps the URLConnection inputStream and times
            calls to the read() methods.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft
        </path>
        
        <resources>
          <URI>data/sax/QueryXml.java
          </URI>
          <URI>io/DebugInputStream.java
          </URI>
          <URI>vfs/url/URLResource.java
          </URI>
        </resources>
        
      </scm:Change>
            
      <scm:Change>
        <date>2009-09-14
        </date>

        <notes>
          <scm:Note>Fixed issue where QueryXML.timeoutSeconds was applied as
            as milliseconds, prematurely aborting back-end response.
          </scm:Note>
          <scm:Note>Removed extraneous debug messages
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/data/sax/
        </path>
        
        <resources>
           <URI>QueryXml.java</URI>
           <URI>ParseXml.java</URI>
        </resources>
        
      </scm:Change>
      
      <scm:Change>
        <date>2009-09-14
        </date>

        <notes>
          <scm:Note>Added afterStart property to Daemon which accepts a
            scenario to be run immediately after startup.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/service/Daemon.java
        </path>
        
      </scm:Change>
    </detail>
  </scm:Change>

  <scm:Change>
    <revision>0.3.19
    </revision>
    
    <authorId>miketoth
    </authorId>
    
    <date>2009-09-08
    </date>
    
    <notes>
      <scm:Note>Formalized array literal syntax in spiralcraft.lang to free up 
        syntax for inline tuples. Adjusted tuple syntax for more intuitive
        and consistent use of subject and context.
      </scm:Note>
      <scm:Note>Fix for issue where the Focus chain exported by the Scenario
        doesn't have a subject. Made the Scenario the 
        subject of its own ClosureFocus. 
      </scm:Note>
    </notes>
    
    <detail>
      <scm:Change>
        <date>2009-09-08
        </date>
        
        <notes>
          <scm:Note>Fix for issue where a set of namespaces added by
            a  NamespaceFocus
            replaced a previous set of namespaces added by a NamespaceFocus if
            the previous NamespaceFocus was the parent of the new 
            NamespaceFocus.
          </scm:Note>
          <scm:Note>Added debugging information for namespaces to FocusChain.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/lang/
        </path>
        
        <resources>
          <URI>FocusWrapper.java
          </URI>
          <URI>NamespaceFocus.java
          </URI>
          <URI>TeleFocus.java
          </URI>
        </resources>
        
      </scm:Change>

      <scm:Change>
        <date>2009-09-08
        </date>
        
        <notes>
          <scm:Note>Fix for issue where the Focus chain exported by the Scenario
            doesn't have a subject. Made the Scenario the 
            subject of its own ClosureFocus. 
          </scm:Note>
          <scm:Note>Use of ClosureFocus in Batch is obsolete now that
            Scenario handles general case.
          </scm:Note>

        </notes>
        
        <path>source/spiralcraft
        </path>
        
        <resources>
          <URI>lang/spi/ClosureFocus.java
          </URI>
          <URI>task/Scenario.java
          </URI>
          <URI>task/Batch.java
          </URI>
        </resources>
        
      </scm:Change>
      
      <scm:Change>
        <date>2009-09-08
        </date>
        
        <notes>
          <scm:Note>Array literals can only be created using the syntax
            [@typeName][{ ... }]
          </scm:Note>
          <scm:Note>Inline tuples are now valid expressions in themselves.
          </scm:Note>
          <scm:Note>Inline tuples telescope instead of chaining-
            ie. {:=myStr: l:=.length() } instead of { :=mystr:  l:=length() }
          </scm:Note>
          <scm:Note>Tuple wrapping or inheritance now uses brackets instead
            of ':'- ie. { {=.} ... } or { {[@myType]} ... } instead of
            { :=.: ... } or { :[@mytype] .... }
          </scm:Note>
          <scm:Note>Enhanced debugging information for bind exceptions in
            test framework
          </scm:Note>
          <scm:Note>Enhanced debugging information for Expression parse
            exceptions
          </scm:Note>
          <scm:Note>Fixed argument reversal on reconstruct in AssignmentNode
          </scm:Note>
          <scm:Note>Properly handle non '/' terminated namespace definition in 
            TypeFocusNode
          </scm:Note>

        </notes>
        
        <path>source/spiralcraft/
        </path>
        
        <resources>
          <URI>lang/parser/ExpressionParser.java
          </URI>
          <URI>lang/parser/TupleNode.java
          </URI>
          <URI>lang/parser/Tuple.java
          </URI>
          <URI>lang/parser/AssignmentNode.java
          </URI>
          <URI>lang/parser/TypeFocusNode.java
          </URI>
          <URI>lang/ParseException.java
          </URI>
          <URI>test/Assertion.java
          </URI>
        </resources>
      </scm:Change>
    </detail>
  </scm:Change>
  

  <scm:Change>
    <revision>0.3.18
    </revision>
    
    <authorId>miketoth
    </authorId>
    
    <date>2009-09-06
    </date>
    
    <notes>
    </notes>
    
    <detail>
      <scm:Change>
        <date>2009-09-06
        </date>
        
        <notes>
          <scm:Note>Incomplete work on stateful constructs to create cursors
            that can be published by various operations.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/
        </path>
        
        <resources>
          <URI>data/core/CursorField.java
          </URI>
          <URI>data/lang/CursorChannel.java
          </URI>
          <URI>data/spi/ListAggregate.java
          </URI>
          <URI>data/task/Collect.java
          </URI>
          <URI>data/task/Fetch.java
          </URI>
        </resources>
      </scm:Change>

      
      <scm:Change>
        <date>2009-09-06
        </date>
        
        <notes>
          <scm:Note>Deprecated DataBatchProcessor
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/data/util/DataBatchProcessor.java
        </path>
        
      </scm:Change>

      <scm:Change>
        <date>2009-09-06
        </date>
        
        <notes>
          <scm:Note>Refactoring of spiralcraft.test package to separate
            Tests, which represent non-chainable concrete classes like Stub and
            Assertion, from TestGroup, which is chainable.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/test
        </path>
        
        <resources>
          <URI>Assertion.java
          </URI>
          <URI>Stub.java
          </URI>
          <URI>Test.java
          </URI>
          <URI>TestGroup.java
          </URI>
          <URI>TestResult.java
          </URI>
        </resources>
      </scm:Change>

      <scm:Change>
        <date>2009-09-06
        </date>
        
        <notes>
          <scm:Note>Format arrays on output
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/task/Debug.java
        </path>
      </scm:Change>
      
      <scm:Change>
        <date>2009-09-06
        </date>
        
        <notes>
          <scm:Note>Enhancements related to usage of Command in Scenarios and
            other components, in
            preparation for implementation of spiralcraft.lang based 
            parameterization of Commands and binding to Command target and
            results.
          </scm:Note>
          <scm:Note>Convention for exporting a CommandFactory from a Java
            component is to use a public final field to hold the
            CommandFactory. 
          </scm:Note>
          <scm:Note>Command targets should be Void when not used.
          </scm:Note>
          <scm:Note>The target of a TaskCommand is the associated Task.
          </scm:Note>
          <scm:Note>Obsoleted BatchScenarioLegacy
          </scm:Note>
          <scm:Note>Reverted task.Exec to use a simple command channel
            pending further development of CommandFactory pattern, which
            obsoletes BoundCommandFactory.
          </scm:Note>
          <scm:Note>Scenario provides facility to create a closure when
            command is created to support cross-thread usage.
          </scm:Note>
          <scm:Note>ClosureFocus and ThreadLocalChannel now support pass-through
            when Closure/ThreadLocalChannel have not been "scoped". 
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft
        </path>
        
        <resources>
          <URI>command/BoundCommandFactory.java
          </URI>
          <URI>ui/StepControl.java
          </URI>
          <URI>service/Daemon.java
          </URI>
          <URI>task/Exec.java
          </URI>
          <URI>task/BatchScenarioLegacy.java
          </URI>
          <URI>task/Scenario.java
          </URI>
          <URI>task/TaskCommand.java
          </URI>
          <URI>lang/spi/ClosureFocus.java
          </URI>
          <URI>lang/spi/ThreadLocalChannel.java
          </URI>
        </resources>
        
      
      </scm:Change>

      <scm:Change>
        <date>2009-09-06
        </date>
        
        <notes>
          <scm:Note>Simplify the focus chain for components read from XML 
            data or builder definitions- do not insert a BeanReflector 
            for the component into the chain if the component implements
            FocusChainObject, allowing the immediate parent context to
            be visible to the FocusChainObject and usable as a primary
            binding target. This allows Scenarios used as methods to bind
            to their parent context, which should be the "object" that 
            represents the method invocation context.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft
        </path>
        
        <resources>
          <URI>data/persist/AbstractXmlObject.java
          </URI>
          <URI>data/persist/XmlAssembly.java
          </URI>
        </resources>
        
      
      </scm:Change>

      <scm:Change>
        <date>2009-09-06
        </date>
        
        <notes>
          <scm:Note>Support the incorporation of Scenarios as method 
            implementations.
          </scm:Note>
          <scm:Note>Refined "method" implementation remove "invoke" call and 
            require that all methods be bound.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft
        </path>
        
        <resources>
          <URI>data/Method.java
          </URI>
          <URI>data/core/MethodImpl.java
          </URI>
          <URI>data/core/TaskMethod.java
          </URI>
          <URI>data/core/TypeImpl.java
          </URI>
          <URI>data/types/meta/TaskMethodType.java
          </URI>
          <URI>data/reflect/ReflectionMethod.java
          </URI>
          <URI>data/lang/TupleReflector.java
          </URI>
        </resources>
        
      
      </scm:Change>

      <scm:Change>
        <date>2009-09-06
        </date>
        
        <notes>
          <scm:Note>Enhancement to spiralcraft.lang to support collection
            creation and element addition via a CollectionDecorator 
            interface.
          </scm:Note>
          <scm:Note>Provide more ways and more intelligence for constructing
            arrays from literals and other sources.
          </scm:Note>
          <scm:Note>Added better support for java.util.Collections to
            spiralcraft.lang package.
          </scm:Note>
          <scm:Note>Added utility to determine the Class referred to by the
            first parameter in a Java generics parameterized type
          </scm:Note>
          <scm:Note>Added better spiralcraft.data support for array types.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft
        </path>
        
        <resources>
          <URI>lang/Reflector.java
          </URI>
          <URI>lang/CollectionDecorator.java
          </URI>
          <URI>lang/reflect/CollectionReflector.java
          </URI>
          <URI>lang/reflect/BeanReflector.java
          </URI>
          <URI>lang/reflect/ArrayReflector.java
          </URI>
          <URI>lang/spi/ArrayCollectionDecorator.java
          </URI>
          <URI>lang/spi/ArrayConstructorChannel.java
          </URI>
          <URI>lang/spi/ArrayIterationDecorator.java
          </URI>
          <URI>lang/spi/GenericCollectionDecorator.java
          </URI>
          <URI>util/lang/ClassUtil.java
          </URI>
          <URI>data/lang/DataReflector.java
          </URI>
        </resources>
        
      
      </scm:Change>


      <scm:Change>
        <date>2009-09-06
        </date>
        
        <notes>
          <scm:Note>Remove extraneous console output
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft
        </path>
        
        <resources>
          <URI>sax/XmlWriter.java
          </URI>
        </resources>
        
      
      </scm:Change>

      <scm:Change>
        <date>2009-09-06
        </date>
        
        <notes>
          <scm:Note>Fix potential NPE in DictionaryBinding resolving
            StringConverter
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft
        </path>
        
        <resources>
          <URI>lang/util/DictionaryBinding.java
          </URI>
        </resources>
        
      
      </scm:Change>
    </detail>
  </scm:Change>

  <scm:Change>
    <revision>0.3.17
    </revision>
    
    <authorId>miketoth
    </authorId>
    
    <date>2009-08-23
    </date>
    
    <notes>
      <scm:Note>spiralcraft.lang enhancements to provide functionality for
        projection and in-line tuple definition
      </scm:Note>
      <scm:Note>Exception handling enhancements to report document location
        in builder and in XML parse tree system. 
      </scm:Note>
      <scm:Note>Support for multi-valued attributes in DictionaryBinding
      </scm:Note>
      <scm:Note>Minor unit test facility enhancements.
      </scm:Note>
    </notes>
    
    <detail>
      
      <scm:Change>
        <date>2009-08-23
        </date>
        
        <notes>
          <scm:Note>Add better support for multi-valued attributes in
            DictionaryBinding.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft
        </path>
        
        <resources>
          <URI>data/sax/QueryXml.java
          </URI>
          <URI>lang/util/DictionaryBinding.java
          </URI>
        </resources>
        
      
      </scm:Change>
            
      <scm:Change>
        <date>2009-08-23
        </date>
        
        <notes>
          <scm:Note>Expand arrays for assertion output
          </scm:Note>
          <scm:Note>Tweaked TestResult default toString() formatting
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/test
        </path>
        
        <resources>
          <URI>Assertion.java
          </URI>
          <URI>TestResult.java
          </URI>
        </resources>
        
      
      </scm:Change>
          
      <scm:Change>
        <date>2009-08-21
        </date>
        
        <notes>
          <scm:Note>Keep track of source code parse position for builder
            exceptions and incorporate into debugging output.
          </scm:Note>
          <scm:Note>Trap runtime exceptions when applying properties and
            wrap with source code location.
          </scm:Note>          
        </notes>
        
        <path>source/spiralcraft
        </path>
        
        <resources>
          <URI>builder/AssemblyLoader.java
          </URI>
          <URI>builder/PropertyBinding.java
          </URI>
          <URI>builder/PropertySpecifier.java
          </URI>
          <URI>sax/Node.java
          </URI>
          <URI>sax/ParseTree.java
          </URI>
        </resources>
        
      
      </scm:Change>
      
      <scm:Change>

        <date>2009-08-21
        </date>
        
        <notes>
          <scm:Note>Added general exception facility to ExpressionParser
          </scm:Note>
          <scm:Note>Isolated assignmentExpression function to maintain
            recursive descent pattern that mirrors grammar structure.
          </scm:Note>
          <scm:Note>Added AggregateProjection operator "#" and subtree to
            grammar.
          </scm:Note>
          <scm:Note>Added TupleProjection and subtree to grammar to support
             in-line type composition
          </scm:Note>
          <scm:Note>Fix problem where an extra '.' is added on Expression
            reconstruction: 
            Shortcut the '.'+identifier pattern to a dereference in
            parseFocusExpression to maintain expression reconstruction
            capability. Also, ParentFocusNode no longer returns ".." because
            one of them is taken care of by the CurrentFocusNode.
          </scm:Note>
          <scm:Note>Added @log and @tune meta-operations to support debugging
            and optimization tasks.
          </scm:Note>
          <scm:Note>Fix problem where String literals did not reconstruct
            quotes. LiteralNode now detects Strings.
          </scm:Note>
          <scm:Note>Degrade to reflective array access when dealing with
            primitive array objects in ArrayIndexChannel.
          </scm:Note>
          <scm:Note>Added signature hiding computation to Signature
          </scm:Note>
          <scm:Note>Added @top, @log and @tune ops to abstract Reflector
          </scm:Note>

          <scm:Note>Added "?=" containership and "#" projection operators to
            AggregateReflector for spiralcraft.data
          </scm:Note>          
          <scm:Note>Fix ArrayUtil iterator: Now throws NoSuchElementException
            instead of ArrayIndexOutOfBoundsException
          </scm:Note>          
        </notes>
        
        <path>source/spiralcraft/
        </path>
        
        <resources>
          <URI>lang/parser/ExpressionParser.java
          </URI>
          <URI>lang/parser/Tuple.java
          </URI>
          <URI>lang/parser/TupleField.java
          </URI>
          <URI>lang/parser/TupleNode.java
          </URI>
          <URI>lang/parser/Tuple.java
          </URI>
          <URI>lang/parser/TupleProjectNode.java
          </URI>
          <URI>lang/parser/AggregateProjectNode.java
          </URI>
          <URI>lang/parser/LiteralNode.java
          </URI>
          <URI>lang/reflect/ArrayReflector.java
          </URI>
          <URI>lang/reflect/BeanReflector.java
          </URI>
          <URI>lang/spi/LogChannel.java
          </URI>
          <URI>lang/spi/TuneChannel.java
          </URI>
          <URI>lang/spi/IterationProjector.java
          </URI>
          <URI>data/lang/AggregateReflector.java
          </URI>
          <URI>util/ArrayUtil.java
          </URI>
        </resources>
      </scm:Change>
    </detail>
    
    
  </scm:Change>
      
  <scm:Change>
    <revision>0.3.16
    </revision>
    
    <authorId>miketoth
    </authorId>
    
    <date>2009-08-18
    </date>
    
    <notes>
      <scm:Note>
      Provide additional spiralcraft.lang reachable metadata to foreign XML
      parser and other data-driven subsystems for custom primitive Types 
      (eg. string formatted data, dates, etc) published from spiralcraft.data      
      </scm:Note>
    </notes>
    
    <detail>
      <scm:Change>

        <date>2009-08-18
        </date>
        
        <notes>
          <scm:Note>Move to using StringConverter instead of Format 
            for thread safety
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/data/types/standard/
        </path>
        
        <resources>
          <URI>DateType.java
          </URI>
        </resources>
      </scm:Change>

      <scm:Change>

        <date>2009-08-18
        </date>
        
        <notes>
          <scm:Note>Exception handling and reporting enhancements
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/
        </path>
        
        <resources>
          <URI>data/sax/DataSAXException.java
          </URI>
          <URI>spiralcraft/lang/reflect/MethodTranslator.java
          </URI>
        </resources>
      </scm:Change>


      <scm:Change>

        <date>2009-08-17
        </date>
        
        <notes>
          <scm:Note>Data reflection of primitive types
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/
        </path>
        
        <resources>
          <URI>data/lang/PrimitiveReflector.java
          </URI>
          <URI>data/lang/DataReflector.java
          </URI>
          <URI>data/lang/TupleReflector.java
          </URI>
          <URI>data/lang/BufferReflector.java
          </URI>
          <URI>data/lang/AggregateReflector.java
          </URI>
          <URI>data/lang/TypeReflector.java
          </URI>
          <URI>data/sax/ValueFrame.java
          </URI>
          <URI>data/sax/RootFrame.java
          </URI>
          <URI>data/OrderElement.java
          </URI>
        </resources>
      </scm:Change>

      <scm:Change>

        <date>2009-08-17
        </date>
        
        <notes>
          <scm:Note>Obtain StringConverter from Channel Reflector
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/
        </path>
        
        <resources>
          <URI>lang/util/DictionaryBinding.java
          </URI>
          <URI>lang/Reflector.java
          </URI>
          <URI>data/sax/AbstractFrameHandler.java
          </URI>
          <URI>builder/PropertyBinding.java
          </URI>
          <URI>ui/Binding.java
          </URI>
        </resources>
      </scm:Change>
    </detail>
  </scm:Change>

  <scm:Change>
    <revision>0.3.15
    </revision>
    
    <authorId>miketoth
    </authorId>
    
    <date>2009-08-17
    </date>
    
    <notes>
      <scm:Note>Exception handling improvements in data SAX translator
      </scm:Note>
    </notes>
    
    <detail>
      <scm:Change>

        <date>2009-08-17
        </date>
        
        <notes>
          <scm:Note>Handle empty strings as null for StringConverter
            numeric types, instead of throwing a FormatException
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/util/string/StringConverter.java
        </path>

      </scm:Change>

      <scm:Change>

        <date>2009-08-17
        </date>
        
        <notes>
          <scm:Note>Report document position for DataExceptions and
            RuntimeExceptions that occur when translating XML to Channel
            values.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/data/sax/
        </path>
        
        <resources>
          <URI>DataHandler.java
          </URI>
          <URI>DataHandlerBase.java
          </URI>
          <URI>ForeignDataHandler.java
          </URI>
          <URI>DataSAXException.java
          </URI>          
        </resources>

      </scm:Change>
    </detail>
  </scm:Change>

  <scm:Change>
    <revision>0.3.14
    </revision>
    
    <authorId>miketoth
    </authorId>
    
    <date>2009-08-14
    </date>
    
    <notes>
      <scm:Note>Fixes for blind type resolution through lang package
      </scm:Note>
      <scm:Note>Data SAX package enhancements for automated construction of
        frame handler sets.
      </scm:Note>      
    </notes>
    
    <detail>
      <scm:Change>

        <date>2009-08-14
        </date>
        
        <notes>
          <scm:Note>Added a frame type designed specifically for reading
            field or list values in character form.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/data/sax/
        </path>
        
        <resources>
          <URI>ValueFrame.java
          </URI>
        </resources>

      </scm:Change>

      <scm:Change>

        <date>2009-08-11
        </date>
        
        <notes>
          <scm:Note>Fix NPE by throwing exception when an elementAssignment
            does not match any child element.
          </scm:Note>
          <scm:Note>Perform destination specific String type conversions for
            incoming character data when the textBinding is not expressed in
            the form of an assignment.
          </scm:Note>          
        </notes>
        
        <path>source/spiralcraft/data/sax/
        </path>
        
        <resources>
          <URI>AbstractFrameHandler.java
          </URI>
        </resources>

      </scm:Change>
    </detail>

    <detail>
      <scm:Change>

        <date>2009-08-10
        </date>
        
        <notes>
          <scm:Note>Differentiate TypeNotFoundException from errors loading
            a defined type.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/data/lang/
        </path>
        
        <resources>
          <URI>DataTypeModel.java</URI>
        </resources>

      </scm:Change>
    </detail>
  </scm:Change>

  <scm:Change>
    <revision>0.3.13
    </revision>
    
    <authorId>miketoth
    </authorId>
    
    <date>2009-08-07
    </date>
    
    <notes>
      <scm:Note>"Assign" Scenario runs Assignments within a Scenario
      </scm:Note>
      <scm:Note>Generics warnings cleanup required due to upgrade of Eclipse 
        compiler with more thorough LINT.
      </scm:Note>
    </notes>
    
    <detail>
      <scm:Change>

        <date>2009-08-07
        </date>
        
        <notes>
          <scm:Note>Task system refactor- not all Scenarios are chainable.
            Factored chain machinery into Chain subclass of Scenario, and
            handle automatic creation of a Sequence to group non-chainable
            elements together.
          </scm:Note>
          <scm:Note>"Assign" scenario runs assignments and defaults
          </scm:Note>
          <scm:Note>"When" scenario performs another scenario conditionally
          </scm:Note>
          
        </notes>
        
        <path>source/spiralcraft/
        </path>
        
        <resources>
          <URI>task/Assign.java</URI>
          <URI>task/When.java</URI>
          <URI>task/Exec.java</URI>
          <URI>task/Sequence.java</URI>
          <URI>task/Session.java</URI>
          <URI>task/TaskRunner.java</URI>
          <URI>task/Debug.java</URI>
          <URI>task/Chain.java</URI>
          <URI>task/Scenario.java</URI>
          <URI>task/Reference.java</URI>
          <URI>task/Batch.java</URI>
          <URI>data/task/Collect.java</URI>
          <URI>data/task/Fetch.java</URI>
          <URI>data/task/Edit.java</URI>
          <URI>data/sax/ParseXml.java</URI>
          <URI>vfs/task/Copy.java</URI>
          <URI>test/Test.java</URI>
          <URI>data/flatfile/Output.java</URI>
          <URI>data/flatfile/Scan.java</URI>
        </resources>

      </scm:Change>
      
      <scm:Change>

        <date>2009-08-07
        </date>
        
        <notes>
          <scm:Note>Fix: BeanArguments only processed the first short argument 
            in a clump of short arguments
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/exec/BeanArguments.java
        </path>

      </scm:Change>
      <scm:Change>

        <date>2009-08-07
        </date>
        
        <notes>Generics warnings cleanup triggered by Eclipse upgrade
        </notes>
        
        <path>source/spiralcraft/
        </path>
        
        <resources>
          <URI>data/spi/ArrayTuple.java</URI>
          <URI>data/spi/KeyedListAggregate.java</URI>
          <URI>data/spi/ArrayDeltaTuple.java</URI>
          <URI>data/spi/AbstractStore.java</URI>
          <URI>data/sax/AbstractFrameHandler.java</URI>
          <URI>data/reflect/ReflectionType.java</URI>
          <URI>data/reflect/ReflectionScheme.java</URI>
          <URI>data/session/BufferAggregate.java</URI>
          <URI>data/session/BufferType.java</URI>
          <URI>data/query/SetFilter.java</URI>
          <URI>data/query/Selection.java</URI>
          <URI>lang/spi/IterableContainsChannel.java</URI>
          <URI>lang/spi/ArrayConstructorChannel.java</URI>
          <URI>data/lang/DataReflector.java</URI>
          <URI>data/rest/RestService.java</URI>
          <URI>lang/util/DictionaryBinding.java</URI>
          <URI>data/builder/BuilderScheme.java</URI>
          <URI>data/builder/BuilderField.java</URI>
          <URI>task/BatchScenarioLegacy.java</URI>
        </resources>
      </scm:Change>
    </detail>
  </scm:Change>

  <scm:Change>
    <revision>0.3.12
    </revision>
    
    <authorId>miketoth
    </authorId>
    
    <date>2009-08-03
    </date>
    
    <notes>
      <scm:Note>Enhanced generic XML processing capabilities to meet
        requirements of XML Data schema interpretation and data processing
      </scm:Note>
    </notes>
    
    <detail>
      <scm:Change>

        <date>2009-07-28
        </date>
        
        <notes>
          <scm:Note>Refactored SAX API for developer ease of use in
            describing XML Frames- converted
            and deprecated XyzFrameHandler in favor of XyzFrame
          </scm:Note>
          <scm:Note>Added support for recursive xml via RecursiveFrame
            and use of a ClosureFocus at the cyclical boundary
          </scm:Note>

          <scm:Note>More complete namespace management- expanded namespaces
            are used internally for all references and lookups.
          </scm:Note> 
          <scm:Note>Nodes with both elements and character data will be
            processed if allowMixedContent property is set
          </scm:Note> 
          <scm:Note>Factored out redundancy between AttributeBinding and
            lang.DictionaryBinding by moving useful assignment code into
            DictionaryBinding and making AttributeBinding a subclass.
          </scm:Note>          
          <scm:Note>ElementAssignments allow a Frame to post a value
            created by a child context into the Focus chain via Expressions
          </scm:Note>
          <scm:Note>Support proper generation of closed elements for empty 
            Tuples (eg. Type references) in the native XML format
          </scm:Note>
          <scm:Note>DataHandler now appends aggregate field values to
            any pre-existing aggregate to ensure that deep prototype
            references work as expected.
          </scm:Note>
          <scm:Note>In DataHandlerBase, resolution of ref uris is now tolerant 
            to missing trailing slashes, and frames can be configured to allow 
            mixed content (elements and text) without throwing an exception.
          </scm:Note>
          <scm:Note>ParseXml is a Scenario that retrieves and processes 
            XML content from a resolved URI.
          </scm:Note>
          <scm:Note>QueryXml is a Scenario based on ParseXml that constructs
            a Resource from the FocusChain context and extracts data objects
            from the returned XML.
          </scm:Note>
        </notes>
    
        <path>source/spiralcraft/data/sax/
        </path>
        
        <resources>
          <URI>AbstractFrameHandler.java
          </URI>
          <URI>AggregateFrame.java
          </URI>
          <URI>AggregateFrameHandler.java
          </URI>
          <URI>AttributeBinding.java
          </URI>
          <URI>ContainerFrame.java
          </URI>
          <URI>ContainerFrameHandler.java
          </URI>
          <URI>DataHandler.java
          </URI>
          <URI>DataHandlerBase.java
          </URI>
          <URI>DataWriter.java
          </URI>
          <URI>ElementAssignment.java
          </URI>
          <URI>ForeignDataHandler.java
          </URI>
          <URI>ParseXml.java
          </URI>
          <URI>QueryXml.java
          </URI>
          <URI>PrefixMapping.java
          </URI>
          <URI>RecursiveFrame.java
          </URI>
          <URI>RootFrame.java
          </URI>
          <URI>RootFrameHander.java
          </URI>
          <URI>TupleFrame.java
          </URI>
          <URI>TupleFrameHander.java
          </URI>
        </resources>
    
      </scm:Change>  

      <scm:Change>

        <date>2009-08-02
        </date>
        
        <notes>
          <scm:Note>Fix issue where XmlAssembly wasn't automatically
            bound due to Assembly not being a FocusChainObject anymore
          </scm:Note>
        </notes>
    
        <path>source/spiralcraft/data/persist/
        </path>
        
        <resources>
          <URI>AbstractXMLObject.java
          </URI>
          
          <URI>XmlAssembly.java
          </URI>
        </resources>
    
      </scm:Change>  

      <scm:Change>

        <date>2009-08-02
        </date>
        
        <notes>
          <scm:Note>Fix issue where property descriptors in subclasses were
            duplicated in getAllProperties() 
          </scm:Note>
        </notes>
    
        <path>source/spiralcraft/beans/MappedBeanInfo.java
        </path>
    
      </scm:Change>  


      <scm:Change>

        <date>2009-07-28
        </date>
        
        <notes>
          <scm:Note>Make sure Aggregates are immutably copied when 
            constructing immutable Tuples (in addition to immutably 
            copying Tuples).
          </scm:Note>
        </notes>
    
        <path>source/spiralcraft/data/spi/
        </path>
        
        <resources>
          <URI>ArrayTuple.java
          </URI>
          <URI>EditableArrayListAggregate.java
          </URI>
        </resources>
    
      </scm:Change>  

      <scm:Change>

        <date>2009-07-28
        </date>
        
        <notes>
          <scm:Note>Genericized ReflectionField
          </scm:Note>
          <scm:Note>Allow external Types to register canonical class 
            mappings.
          </scm:Note>
        </notes>
    
        <path>source/spiralcraft/data/reflect/
        </path>
        
        <resources>
          <URI>ReflectionField.java
          </URI>
          <URI>ReflectionType.java
          </URI>
          <URI>ReflectionScheme.java
          </URI>
        </resources>
    
      </scm:Change>  
          
      <scm:Change>

        <date>2009-07-28
        </date>
        
        <notes>
          <scm:Note>Misc small fixes, debugging and exception data enhancements
          </scm:Note>
          <scm:Note>TypeImpl shows data in exception when fromData erroneously 
            called
          </scm:Note>
          <scm:Note>UnifiedFieldSet fixed NPE when type has no scheme
          </scm:Note>
          <scm:Note>PrimitiveTypeImpl reports value when toData() erroneously
            called. 
          </scm:Note>
          <scm:Note>FieldImpl throws exception when type set to null
          </scm:Note>
        </notes>
    
        <path>source/spiralcraft/data/
        </path>
        
        <resources>
          <URI>core/TypeImpl.java
          </URI>
          <URI>core/UnifiedFieldSet.java
          </URI>
          <URI>core/PrimitiveTypeImpl.java
          </URI>
          <URI>core/FieldImpl.java
          </URI>
        </resources>
    
      </scm:Change>    

      <scm:Change>

        <date>2009-07-28
        </date>
        
        <notes>
          <scm:Note>TypeType.toData(Type type) generates a Type reference
            via the use of new MetaType constructor specifically for
            generating Type definitions
          </scm:Note>
          <scm:Note>AbstractCollectionType.toData() now correctly uses
            canonical subtype of list object to perform the toData()
            conversion if the list object is a subtype of the native type
          </scm:Note>
          <scm:Note>AbstractAggregateType finds its MetaType by URI
            resolution with the ".type" suffix of local URI and not by 
            using ReflectionType.getCanonicalURI(getClass())
          </scm:Note>
        </notes>
    
        <path>source/spiralcraft/data/
        </path>
        
        <resources>
          <URI>types/meta/TypeType.java
          </URI>
          <URI>core/MetaType.java
          </URI>
          <URI>core/AbstractCollectionType.java
          </URI>
          <URI>core/AbstractAggregateType.java
          </URI>
        </resources>
    
      </scm:Change>    

      <scm:Change>

        <date>2009-07-28
        </date>
        
        <notes>
          <scm:Note>ExpressionType provides a toString() method for
            bidirectional persistence
          </scm:Note>
          <scm:Note>AnyType allows for heterogeneously typed values and list
            elements
          </scm:Note>
        </notes>
    
        <path>source/spiralcraft/data/types/standard/
        </path>
        
        <resources>
          <URI>ExpressionType.java
          </URI>
          <URI>AnyType.java
          </URI>
        </resources>
    
      </scm:Change>    

      <scm:Change>

        <date>2009-07-28
        </date>
        
        <notes>
          <scm:Note>Reflectors can now provide a list of available binding
            signatures for a given Source channel. The signatures are
            included in the Exception when a name reference failure occurs to
            assist a developer in finding the correct name.
          </scm:Note>
        </notes>
    
        <path>source/spiralcraft/
        </path>
        
        <resources>
          <URI>lang/Signature.java
          </URI>
          <URI>lang/Reflector.java
          </URI>
          <URI>lang/reflect/BeanReflector.java
          </URI>
          <URI>lang/spi/AbstractChannel.java
          </URI>
          <URI>data/lang/TupleReflector.java
          </URI>
        </resources>
    
      </scm:Change>    

      <scm:Change>

        <date>2009-07-23
        </date>
        
        <notes>
          <scm:Note>Namespace resolution mechanism tolerates missing trailing 
            slashes in resolved URIs.
          </scm:Note>
        </notes>
    
        <path>source/spiralcraft/lang/parser/AbsoluteFocusNode.java
        </path>
    
      </scm:Change>    

      <scm:Change>

        <date>2009-07-24
        </date>
        
        <notes>
          <scm:Note>ClosureFocus supports a RecursionContext, which re-binds
            escaped Channels at a deeper point in the Focus chain and
            on a recursion event, snapshots the deeper values, and pushes them
            into the shallower context before a recursive call, and pops them
            when the recursive call is complete.
          </scm:Note>
          <scm:Note>Fixed bug where the enclosedFocus would not work with
            more than 1 escaped Channel.
          </scm:Note>
        </notes>
    
        <path>source/spiralcraft/lang/spi/
        </path>
        
        <resources>
          <URI>ClosureFocus.java
          </URI>
        </resources>
    
      </scm:Change>    
          
      <scm:Change>

        <date>2009-07-22
        </date>
        
        <notes>
          <scm:Note>DictionaryBinding now supports using an assignment
            as the target, which allows an Expression to perform the
            String conversion as a function of the input.
          </scm:Note>
        </notes>
    
        <path>source/spiralcraft/lang/
        </path>
        
        <resources>
          <URI>util/DictionaryBinding.java
          </URI>
        </resources>
    
      </scm:Change>    
    
      <scm:Change>

        <date>2009-07-29
        </date>
        
        <notes>
          <scm:Note>Added initialAssignments and typeX properties to Session
             for better usability
          </scm:Note>
          <scm:Note>Added Debug task to conditionally log messages
          </scm:Note>
        </notes>
    
        <path>source/spiralcraft/task/
        </path>
        
        <resources>
          <URI>Session.java
          </URI>
          <URI>Debug.java
          </URI>
        </resources>
    
      </scm:Change>
    
      <scm:Change>

        <date>2009-07-29
        </date>
        
        <notes>
          <scm:Note>Ensure that VFS Resources use URLConnections in
            a ThreadSafe manner and do not leave open backing sockets.
          </scm:Note>
        </notes>
    
        <path>source/spiralcraft/vfs/url/URLResource.java
        </path>
    
      </scm:Change>

      <scm:Change>

        <date>2009-07-27
        </date>
        
        <notes>
          <scm:Note>Property specifier attribute "dataURI" is now 
            namespace aware
          </scm:Note>
        </notes>
    
        <path>source/spiralcraft/builder/AssemblyLoader.java
        </path>
    
      </scm:Change>
    </detail>
  </scm:Change>

  <scm:Change>
    <revision>0.3.11
    </revision>
    
    <authorId>miketoth
    </authorId>
    
    <date>2009-06-19
    </date>
    
    <detail>
    
      <scm:Change>

        <date>2009-06-19
        </date>
        
        <notes>
          <scm:Note>Added ability to associate arbitrary application state
            with an authentication session through 
            setAttribute(String name,Object value)
            and getAttribute(String name) methods.
          </scm:Note>
        </notes>
    
        <path>source/spiralcraft/security/auth/AuthSession.java
        </path>
    
      </scm:Change>

      <scm:Change>

        <date>2009-06-18
        </date>
        
        <notes>
          <scm:Note>New data task "Edit" to perform non-interactive buffered
            data manipulation
          </scm:Note>
          <scm:Note>Generics update in BufferChannel to support more type
            aware scenarios.
          </scm:Note>
        </notes>
    
        <path>source/spiralcraft/data/
        </path>
        
        <resources>
          <URI>task/Edit.java
          </URI>
          <URI>editor/EditorBase.java
          </URI>
          <URI>editor/TupleEditor.java
          </URI>
          <URI>session/BufferChannel.java
          </URI>
          <URI>session/BufferField.java
          </URI>
          <URI>lang/CursorBinding.java
          </URI>
        </resources>
        
    
      </scm:Change>
      
      <scm:Change>

        <date>2009-06-19
        </date>
        
        <notes>
          <scm:Note>Fix NPE reporting InvocationTargetException
          </scm:Note>
        </notes>
    
        <path>source/spiralcraft/lang/reflect/MethodTranslator.java
        </path>
    
      </scm:Change>

    </detail>
  </scm:Change>

  <scm:Change>
    <revision>0.3.10
    </revision>
    
    <authorId>miketoth
    </authorId>
    
    <date>2009-06-10
    </date>
    
    <detail>
    
      <scm:Change>

        <date>2009-06-10
        </date>
        
        <notes>
          <scm:Note>ContextDictionary throws an Exception if property is not
            found
          </scm:Note>
        </notes>
    
        <path>source/spiralcraft/util/ContextDictionary.java
        </path>
    
      </scm:Change>
          
      <scm:Change>

        <date>2009-06-10
        </date>
        
        <notes>
          <scm:Note>Fix problem turning Query debugging off
          </scm:Note>
        </notes>
    
        <path>source/spiralcraft/data/query/Query.java
        </path>
    
      </scm:Change>

      <scm:Change>

        <date>2009-06-10
        </date>
        
        <notes>
          <scm:Note>Data XML now provides mechanism to translate 
            ContextDictionary properties when contextAware attribute is set.
          </scm:Note>
        </notes>
    
        <path>source/spiralcraft/data/sax/
        </path>
    
        <resources>
          <URI>DataReader.java
          </URI>
          <URI>DataHandlerBase.java
          </URI>
        </resources>
        
      </scm:Change>
      
    </detail>

    
  </scm:Change>
  
  <scm:Change>
    <revision>0.3.9.1
    </revision>
    
    <authorId>miketoth
    </authorId>
    
    <date>2009-06-10
    </date>
    
    <notes>
      <scm:Note>NPE Fix for Selection filter when filter returns null
      </scm:Note>
    </notes>
    
    <path>source/spiralcraft/data/query/Selection.java
    </path>

    
  </scm:Change>

  <scm:Change>
    <revision>0.3.9
    </revision>
    
    <authorId>miketoth
    </authorId>
    
    <date>2009-06-05
    </date>
    
    <notes>
      <scm:Note>TupleReflector provides methods to create Assignment sets
        for new, default and fixed expressions associated with a FieldSet's
        fields.
      </scm:Note>
    </notes>
    
    <path>source/spiralcraft/data/lang/TupleReflector.java
    </path>
    
  </scm:Change>

  <scm:Change>
    <revision>0.3.8.2
    </revision>
    
    <authorId>miketoth
    </authorId>
    
    <date>2009-06-04
    </date>
    
    <notes>
      <scm:Note>When a BufferType is requested for a BufferType, simply return
        the specified BufferType instead of throwing an exception
      </scm:Note>
    </notes>
    
    <path>source/spiralcraft/data/
    </path>
    
    <resources>
      <URI>Type.java
      </URI>
    </resources>
    
  </scm:Change>

  <scm:Change>
    <revision>0.3.8.1
    </revision>
    
    <authorId>miketoth
    </authorId>
    
    <date>2009-06-03
    </date>
    
    <notes>
      <scm:Note>Test library updates- example Customer now has an id sequence
      </scm:Note>
      <scm:Note>Fix issue where buffer Type is requested for a buffer Type,
        although in out-of-bounds situation of duplicate ids
      </scm:Note>
      <scm:Note>Remove warning when Rule resolution re-entrance is encountered.
      </scm:Note>
    </notes>
    
    <path>source/spiralcraft/data/
    </path>
    
    <resources>
      <URI>Type.java
      </URI>
      
      <URI>core/TypeImpl.java
      </URI>
    </resources>
    
  </scm:Change>
  
  <scm:Change>
    <revision>0.3.8
    </revision>
    
    <authorId>miketoth
    </authorId>
    
    <date>2009-05-27
    </date>
    
    <detail>
    
      <scm:Change>
        <date>2009-05-27
        </date>
        
        <notes>
          <scm:Note>Provide a general means to set arbitrary Rules for any Type
          </scm:Note>
          <scm:Note>Moved Rule management from abstract Type to implementations
            due to dependency on linking behavior.
          </scm:Note>
          <scm:Note>RuleSet allows chaining other RuleSets, primarily 
            to accomodate archetype rules. 
          </scm:Note>
          <scm:Note>Provide link tracing functionality in the abstract Type
            as a way to debug linking issues.
          </scm:Note>
          <scm:Note>ThreadLocalStack can now provide an array of its contents
          </scm:Note>
        </notes>
    
        <path>source/spiralcraft/data/Type.java
        </path>
        <path>source/spiralcraft/data/core/AbstractAggregateType.java
        </path>
        <path>source/spiralcraft/data/core/TypeImpl.java
        </path>
        <path>source/spiralcraft/data/reflect/ReflectionType.java
        </path>
        <path>source/spiralcraft/rules/RuleSet.java
        </path>
        <path>source/spiralcraft/rules/Inspector.java
        </path>
        <path>source/spiralcraft/rules/Inspector.java
        </path>
        <path>source/spiralcraft/util/thread/ThreadLocalStack.java
        </path>
      </scm:Change>

      <scm:Change>
        <date>2009-05-27
        </date>
        
        <notes>
          <scm:Note>Added back to ArrayUtil some methods to deal with primitive
            arrays.
          </scm:Note>
        </notes>
    
        <path>source/spiralcraft/util/ArrayUtil.java
        </path>
      </scm:Change>
    </detail>
  </scm:Change>
    
  <scm:Change>
    <revision>0.3.7
    </revision>
    
    <authorId>miketoth
    </authorId>
    
    <date>2009-05-26
    </date>
    
    <notes>
      <scm:Note>Enhancements to Pool and to abstract data components to
        support additional implementations (ie. completion of SQL Store).
      </scm:Note>
      <scm:Note>Logging enhancements in query subsystem
      </scm:Note>
      <scm:Note>Made spiralcraft.util.ArrayUtil generic, eliminating lots of
        casting in client code
      </scm:Note>
      <scm:Note>NPE fix in BufferType.link()
      </scm:Note>      
    </notes>
    
    <detail>
      <scm:Change>
    
        <date>2009-05-26
        </date>
    
        <notes>
          <scm:Note>Initial round of logging enhancements to Query 
            subsystem. Queries and BoundQueries accept a debugLevel.
          </scm:Note>
        </notes>
    
        <path>source/spiralcraft/data/
        </path>
        
        <resources>
          <URI>query/BoundQuery.java
          </URI>
          <URI>query/Distinct.java
          </URI>
          <URI>query/Equijoin.java
          </URI>
          <URI>query/Query.java
          </URI>
          <URI>query/Scan.java
          </URI>
          <URI>query/Selection.java
          </URI>
          <URI>query/SetFilter.java
          </URI>
          <URI>query/Sort.java
          </URI>
          <URI>query/UnaryBoundQuery.java
          </URI>
          <URI>spi/AbstractAggregateQueryable.java
          </URI>
        </resources>
      </scm:Change>

      <scm:Change>
    
        <date>2009-05-26
        </date>
    
        <notes>
          <scm:Note>Fixed NPE in BufferType during link() when buffered type
            has key fields but no primary key
          </scm:Note>
        </notes>
    
        <path>source/spiralcraft/data/session/BufferType.java
        </path>
      </scm:Change>

      <scm:Change>
    
        <date>2009-05-25
        </date>
    
        <notes>
          <scm:Note>Made spiralcraft.util.ArrayUtil generic, eliminating lots of
        casting in client code
          </scm:Note>
        </notes>
    
        <path>source/spiralcraft/
        </path>
    
        <resources>
          <URI>builder/AssemblyClass.java
          </URI>
          <URI>data/session/BufferTuple.java
          </URI>
          <URI>data/spi/ArrayDeltaTuple.java
          </URI>
          <URI>exec/Executor.java
          </URI>
          <URI>sax/Element.java
          </URI>
          <URI>shell/ArgumentSet.java
          </URI>
          <URI>task/AbstractTask.java
          </URI>
          <URI>time/Clock.java
          </URI>
          <URI>util/Path.java
          </URI>
          <URI>util/ArrayUtil.java
          </URI>
        </resources>
      </scm:Change>

      <scm:Change>
    
        <date>2009-05-24
        </date>
    
        <notes>
          <scm:Note>Refactor XmlStore generic code into AbstractStore, so
            SqlStore can share 
          </scm:Note>
          <scm:Note>Eliminated Registrant interface as a means of configuration
            for Store,Sequence, and Space and moved to internal resolve() 
            method triggered by Lifecycle.
          </scm:Note>
          <scm:Note>Made ArrayDeltaTuple more typesafe by making Tuple
            constructor a DeltaTuple constructor
          </scm:Note>
        </notes>
    
        <path>source/spiralcraft/data/
        </path>
    
        <resources>
          <URI>xml/XmlStore.java
          </URI>
          <URI>spi/AbstractStore.java
          </URI>
          <URI>Sequence.java
          </URI>
          <URI>spi/ArrayDeltaTuple.java
          </URI>
        </resources>
      </scm:Change>

      <scm:Change>
    
        <date>2009-05-23
        </date>
    
        <notes>
          <scm:Note>Pool enhancements for use by SQL package- genericized,
            updated logging code, and removed Registrant interface (until
            useful again for monitoring).
          </scm:Note>
        </notes>
    
        <path>source/spiralcraft/pool/
        </path>
    
        <resources>
          <URI>Pool.java
          </URI>
          <URI>ResourceFactory.java
          </URI>
          <URI>ThreadPool.java
          </URI>
        </resources>
      </scm:Change>
      
    </detail>
  </scm:Change>
  
  <scm:Change>
    <revision>0.3.6
    </revision>
    
    <authorId>miketoth
    </authorId>
    
    <date>2009-05-22
    </date>
    
    <notes>
      <scm:Note>Fixed whitespace handling for attributes in XML fragment
        parser
      </scm:Note>
    </notes>
    
    <path>source/spiralcraft/text/xml/LiteralReader.java
    </path>
  </scm:Change>


  <scm:Change>
    <revision>0.3.5
    </revision>
    
    <authorId>miketoth
    </authorId>
    
    <date>2009-05-21
    </date>
    
    <notes>
      <scm:Note>New SetFilter query for testing inclusion in a set
      </scm:Note>
      <scm:Note>Array literals in lang  [ type expression ][{x0, x1, ...}]
      </scm:Note>
      <scm:Note>"contains" operator [ set ?= value ] for lang
      </scm:Note>
      <scm:Note>Unit test system enhancements for managing and reporting test
        results. 
      </scm:Note>
      <scm:Note>Added "enum" handling to ReflectionType datatypes 
      </scm:Note>
      <scm:Note>Regression fixes, minor syntax enhancements
      </scm:Note>
    </notes>
    
    <detail>
      <scm:Change>
        <date>2009-05-21
        </date>
        
        <notes>
          <scm:Note>"Collect" scenario- made property aggregateX instead of X
            for more descriptive name
          </scm:Note>
          <scm:Note>Fixed ContextNode NPE when no Focus node is provided as a
            source
          </scm:Note>
          <scm:Note>"Reference" scenario now has setter methods
          </scm:Note>

        </notes>
        
        <path>source/spiralcraft/
        </path>
        
        <URI>data/task/Collect.java
        </URI>
        <URI>lang/parser/ContextNode.java
        </URI>
        <URI>task/Reference.java
        </URI>
      </scm:Change>

      <scm:Change>
        <date>2009-05-21
        </date>
        
        <notes>
          <scm:Note>Handle Enums properly in ReflectionType by looking up
            a StringConverter, and ensuring that Enums are primitive.
          </scm:Note>

        </notes>
        
        <path>source/spiralcraft/
        </path>
        
        <URI>data/reflect/ReflectionType.java
        </URI>
      </scm:Change>

      <scm:Change>
        <date>2009-05-21
        </date>
        
        <notes>
          <scm:Note>Completed "Reference" scenario
          </scm:Note>

        </notes>
        
        <path>source/spiralcraft/task/
        </path>
        
        <URI>Reference.java
        </URI>
      </scm:Change>
      
      <scm:Change>
        <date>2009-05-21
        </date>
        
        <notes>
          <scm:Note>Improved management and reporting of test results via 
            TestGroup.
          </scm:Note>
          <scm:Note>Added standard assertion mechanism
          </scm:Note>

        </notes>
        
        <path>source/spiralcraft/test/
        </path>
        
        <resources>
          <URI>Assertion.java
          </URI>
          <URI>Stub.java
          </URI>
          <URI>Test.java
          </URI>
          <URI>TestFailedException.java
          </URI>
          <URI>TestGroup.java
          </URI>
          <URI>TestResult.java
          </URI>
        </resources>
      </scm:Change>

      <scm:Change>
        <date>2009-05-13
        </date>
        
        <notes>
          <scm:Note>New SetFilter query for testing source data for inclusion 
            in a set.
          </scm:Note>
          <scm:Note>Split up huge "factorNode" method in Select query in
            preparation for future additional optimizable nodes.
          </scm:Note>
          <scm:Note>Provide integral support for an aggregate "contains"
            operation.  
          </scm:Note>
          <scm:Note>Added support for array creation to assist with literal
            sets.
          </scm:Note>
          <scm:Note>Completed implementation of ClosureFocus to transfer
            bound Channel data to another thread via a Closure object.
          </scm:Note>
          <scm:Note>CurrentFocus node accepts scanner token so it can
            reconstruct itself properly
          </scm:Note>          

        </notes>
        
        <path>source/spiralcraft/
        </path>
        
        <resources>
          <URI>data/query/SetFilter.java
          </URI>
          <URI>data/query/Selection.java
          </URI>
          <URI>lang/spi/ClosureFocus.java
          </URI>
          <URI>lang/spi/ArrayConstructorChannel.java
          </URI>
          <URI>lang/spi/ArrayContainsChannel.java
          </URI>
          <URI>lang/spi/IterableContainsChannel.java
          </URI>
          <URI>lang/parser/ContainsNode.java
          </URI>
          <URI>lang/parser/CurrentFocusNode.java
          </URI>
          <URI>lang/parser/ExpressionParser.java
          </URI>
          <URI>lang/parser/Node.java
          </URI>
          <URI>lang/parser/SubscriptNode.java
          </URI>
          <URI>lang/reflect/ArrayReflector.java
          </URI>
          <URI>lang/reflect/BeanReflector.java
          </URI>
          
        </resources>
      </scm:Change>

      <scm:Change>
        <date>2009-05-12
        </date>
        
        <notes>
          <scm:Note>Provide the ability to include namespace prefixes in
            spiralcraft.data XML file "ref" attributes, by requiring that
            absolute URIs in the ref attribute value be prefixed by a ":"
          </scm:Note>
          <scm:Note>These attributes are almost always coded by hand, 
            especially when they reference absolute URIs, so they should
            use the existing namespace prefixes.
          </scm:Note>
          <scm:Note>Provided a deprecation warning when using an absolute URI
            with no ":" prefix to maintain backward compatibility.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/
        </path>
        
        <resources>
          <URI>data/sax/DataHandler.java
          </URI>
          <URI>data/sax/DataHandlerBase.java
          </URI>
        </resources>
      </scm:Change>

      <scm:Change>
        <date>2009-05-11
        </date>
        
        <notes>
          <scm:Note>Make sure queries with no Scans are solved by the Space
            itself, since no Stores will be consulted. Added unit tests
            for use with ReferenceQuery to verify.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/
        </path>
        
        <resources>
          <URI>data/Space.java
          </URI>
        </resources>
      </scm:Change>
    </detail>
    
  </scm:Change>

        
  <scm:Change>
    <revision>0.3.4
    </revision>
    
    <authorId>miketoth
    </authorId>
    
    <date>2009-05-11
    </date>
    
    <notes>
      <scm:Note>Ongoing spiralcraft-sql module support and integration
      </scm:Note>
    </notes>

        
    <detail>
      <scm:Change>
        <date>2009-05-09
        </date>
        
        <notes>
          <scm:Note>Fix regression issues and issues exposed with new
            functionality.
          </scm:Note>
          <scm:Note>Correct exception in PrimitiveTypeImpl.toString() to
            show the correct target type instead of "String"
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/
        </path>
        
        <resources>
          <URI>data/core/PrimitiveTypeImpl.java
          </URI>
        </resources>
      </scm:Change>

      <scm:Change>
        <date>2009-05-09
        </date>
        
        <notes>
          <scm:Note>Fix regression issues and issues exposed with new
            functionality.
          </scm:Note>
          <scm:Note>Prevent a BufferTuple from being created with a non-buffer
            Type.
          </scm:Note>
          <scm:Note>Fetch updater using archetype of BufferType, which is
            original type, because Space doesn't know about the buffer type.
          </scm:Note>
          <scm:Note>External logging added to DataWriter.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/data/
        </path>
        
        <resources>
          <URI>session/BufferTuple.java
          </URI>
          <URI>sax/DataWriter.java
          </URI>
        </resources>
      </scm:Change>

      <scm:Change>
        <date>2009-05-08
        </date>
        
        <notes>
          <scm:Note>Fixed issue where Tuple.set("field",value) syntax
            did not recognize fields in base-type.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/
        </path>
        
        <resources>
          <URI>data/spi/EditableArrayTuple.java
          </URI>
        </resources>
      </scm:Change>

      <scm:Change>
        <date>2009-05-06
        </date>
        
        <notes>
          <scm:Note>Enhanced builder exceptions to show list of available
            properties when a property is not found.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/
        </path>
        
        <resources>
          <URI>beans/MappedBeanInfo.java
          </URI>
          <URI>builder/PropertyBinding.java
          </URI>
          <URI>builder/PropertySpecifier.java
          </URI>
          <URI>data/builder/BuilderField.java
          </URI>
          <URI>data/builder/BuilderType.java
          </URI>
        </resources>
      </scm:Change>
      
      <scm:Change>
        <date>2009-05-04
        </date>

        <notes>
          <scm:Note>Enhancements to flat file data handling and integration
            into task/scenario architecture.
          </scm:Note>
          

          <scm:Note>More informative DataException reporting, as well as
            better reporting for bad record reading.
          </scm:Note>
          
          <scm:Note>FlatFile cursors have an error tolerant mode which skips
            bad records.
          </scm:Note>

          <scm:Note>New IO classes ConsumableFileInputStream and
            FileBufferedInputStream for efficiency when reading huge or
            very granular network input streams.
          </scm:Note>

          <scm:Note>Default formatter does not dump stack trace for
            INFO level exceptions.
          </scm:Note>
          
          <scm:Note>CursorAggregate support for reading subset of records
            in cursor.
          </scm:Note>
          
          <scm:Note>TypeImpl now re-uses its integral FieldSet to preserve
            identity relationship that components depend on.
          </scm:Note>
          
          <scm:Note>TypeImpl now re-uses its integral FieldSet to preserve
            identity relationship that components depend on, and disallows
            call to getFieldSet() before type is linked in order to enforce
            consistency. TupleReflector changed to avoid unnecessary call
            to getFieldSet() before Type is linked.
          </scm:Note>
        </notes>
        
        <resources>
          <URI>source/spiralcraft/log/DefaultFormatter.java
          </URI>
          <URI>source/spiralcraft/data/flatfile/DelimitedRecordFormat.java
          </URI>
          <URI>source/spiralcraft/data/flatfile/FieldMapping.java
          </URI>
          <URI>source/spiralcraft/data/flatfile/Output.java
          </URI>
          <URI>source/spiralcraft/data/flatfile/RecordCursor.java
          </URI>
          <URI>source/spiralcraft/data/flatfile/ScrollableRecordCursor.java
          </URI>
          <URI>source/spiralcraft/data/flatfile/Scan.java
          </URI>
          <URI>source/spiralcraft/data/core/TypeImpl.java
          </URI>
          <URI>source/spiralcraft/data/core/UnifiedFieldSet.java
          </URI>
          <URI>source/spiralcraft/data/lang/TupleReflector.java
          </URI>
          <URI>source/spiralcraft/data/access/CursorAggregate.java
          </URI>
          <URI>source/spiralcraft/data/DataException.java
          </URI>
          <URI>source/spiralcraft/io/ConsumableFileInputStream.java
          </URI>
          <URI>source/spiralcraft/io/FileBufferedInputStream.java
          </URI>
        </resources>
      </scm:Change>

      <scm:Change>
        <date>2009-05-04
        </date>

        <notes>
          <scm:Note>Support Pattern matching rules for data StringType, and
            better exception handling for Rules.
          </scm:Note>
          
          <scm:Note>Added core support for java.util.regex.Pattern as
            a primitive data type.
          </scm:Note>

        </notes>
        
        <resources>
          <URI>source/spiralcraft/util/string/StringConverter.java
          </URI>
          <URI>source/spiralcraft/rules/PatternRule.java
          </URI>
          <URI>source/spiralcraft/rules/RuleException.java
          </URI>
          <URI>source/spiralcraft/rules/Violation.java
          </URI>
          <URI>source/spiralcraft/data/types/standard/PatternType.java
          </URI>
          <URI>source/spiralcraft/data/types/standard/StringType.java
          </URI>
          <URI>source/spiralcraft/data/reflect/ReflectionType.java
          </URI>
        </resources>
      </scm:Change>

      <scm:Change>
        <date>2009-05-04
        </date>

        <notes>
          <scm:Note>Enhancements to TaskRunner to support command line
            utility development
          </scm:Note>
          
          <scm:Note>Added method to retrieve remaining command arguments
            when delegating execute(String ...)
          </scm:Note>

          <scm:Note>Option to dynamically load and chain Scenarios in TaskRunner
            via command line arguments, to allow for Scenario assemblies to
            be re-used in either a command line or embedded context.
          </scm:Note>

          <scm:Note>Suppress redundant exception reporting in TaskCommand
          </scm:Note>
        </notes>
        
        <resources>
          <URI>source/spiralcraft/exec/Arguments.java
          </URI>
          <URI>source/spiralcraft/task/TaskRunner.java
          </URI>
          <URI>source/spiralcraft/task/TaskCommand.java
          </URI>
        </resources>
      </scm:Change>

      <scm:Change>
        <date>2009-05-01
        </date>

        <notes>
          <scm:Note>Added shutdown hook to Scheduler to prevent running
            tasks after shutdown is initiated
          </scm:Note>
        </notes>
        
        <resources>
          <URI>source/spiralcraft/time/Scheduler.java
          </URI>
        </resources>
      </scm:Change>

      <scm:Change>
        <date>2009-05-01
        </date>

        <notes>
          <scm:Note>Automated regression testing facility enhancements
            related to staging data for various stores.
          </scm:Note>
 
          <scm:Note>Scenario model now supports a chain pattern for
            fluent setup.
          </scm:Note>
          
          <scm:Note>Removed excessive generics usage from Scenario model
            and de-emphasized command result path as a data path. Command
            result path is essentially a control path in this model, as
            the data path should be through the FocusChain.
          </scm:Note>

          <scm:Note>VFS supports a copy from classpath function useful for
            using built-in data to stage a test from scratch. This works
            with local classloaders by interpreting the the jar or file URL,
            in conjuction with the pattern search tool.
          </scm:Note>
          
          <scm:Note>vfs now has a JarResource and FileResource
          </scm:Note>
          
          <scm:Note>PathPattern now accepts a prefix, so the pattern
            doesn't need to include it, if the usage only supplies 
            absolute paths.
          </scm:Note>
          
          <scm:Note>Added error handling to vfs and generic task components to 
           deal with secondary cases and more error conditions, and multiple
           Exceptions in multi-task models. 
          </scm:Note>

          <scm:Note>Added spiralcraft.data.task.Collect to manage an
            Aggregate to collect results of batch tasks. 
          </scm:Note>


          <scm:Note>Built ClosureFocus to provide automatic thread-inheritable
            context for tasks which spawn threads.
          </scm:Note>
          
        </notes>
        
        <path>/source/spiralcraft
        </path>
          
        <resources>
          <URI>vfs/task/Copy.java
          </URI>
          <URI>vfs/jar/JarFileResource.java
          </URI>
          <URI>vfs/jar/JarResourceFactory.java
          </URI>
          <URI>vfs/filters/PatternFilter.java
          </URI>
          <URI>vfs/filters/NameGlobFilter.java
          </URI>
          <URI>vfs/file/FileResource.java
          </URI>
          <URI>vfs/classpath/ClasspathResource.java
          </URI>
          <URI>vfs/batch/Search.java
          </URI>
          <URI>vfs/AbstractResource.java
          </URI>
          <URI>vfs/Resolver.java
          </URI>
          <URI>util/Path.java
          </URI>
          <URI>util/PathPattern.java
          </URI>
          <URI>util/MultiException.java
          </URI>
          <URI>task/AbstractTask.java
          </URI>
          <URI>task/Batch.java
          </URI>
          <URI>task/Exec.java
          </URI>
          <URI>task/Reference.java
          </URI>
          <URI>task/MultiTask.java
          </URI>
          <URI>task/ParallelTask.java
          </URI>
          <URI>task/Scenario.java
          </URI>
          <URI>task/Sequence.java
          </URI>
          <URI>task/SerialTask.java
          </URI>
          <URI>task/TaskCommand.java
          </URI>
          <URI>task/TaskListener.java
          </URI>
          <URI>task/TaskRunner.java
          </URI>
          <URI>test/Stub.java
          </URI>
          <URI>test/Test.java
          </URI>
          <URI>test/TestGroup.java
          </URI>
          <URI>test/TestResult.java
          </URI>
          <URI>io/InputStreamWrapper.java
          </URI>
          <URI>data/util/DataBatchProcessor.java
          </URI>
          <URI>data/task/Collector.java
          </URI>
          <URI>data/task/Fetch.java
          </URI>
          <URI>lang/spi/ClosureFocus.java
          </URI>
          <URI>lang/spi/ThreadLocalChannel.java
          </URI>
        </resources>              
      </scm:Change>
      
      <scm:Change>
        <date>2009-04-30
        </date>
        
        <notes>
          <scm:Note>Refactor Space to support multiple Stores, as originally
            intended. class SingleSpace has been removed in favor of a 
            concrete spiralcraft.data.Space.
          </scm:Note>
          <scm:Note>Query supports recursive search for Scan types to 
            better narrow the set of stores to Query. This function was moved
            from AbstractStore.
          </scm:Note>
          <scm:Note>Query resolution should use the Focus chain to obtain the 
            relevant Space in which to recursively solve the query. Implemented
            in AbstractStore.
          </scm:Note>
          <scm:Note>Store interface is now a Service, and provides new method
            isAuthoritative to identify master store when multiple stores 
            support a Type.
          </scm:Note>
          <scm:Note>XmlStore defines authoritative types from the 
            XmlQueryable tables and from base types that have Sequence fields.
          </scm:Note>
        </notes>
        
        <path>/source/spiralcraft/data/
        </path>
        
        <resources>
          <URI>spi/SingleSpace.java
          </URI>
          <URI>Space.java
          </URI>
          <URI>query/Query.java
          </URI>
          <URI>query/Concatenation.java
          </URI>
          <URI>query/ConcatenationBinding.java
          </URI>
          <URI>spi/AbstractStore.java
          </URI>
          <URI>xml/XmlStore.java
          </URI>
          <URI>access/Store.java
          </URI>
        </resources>
        
      </scm:Change>
      
      <scm:Change>
        <date>2009-04-30
        </date>
        
        <notes>
          <scm:Note>Summary- Fix builder regression for persistence mechanism,
            which got tripped up on some other issues.
          </scm:Note>
          <scm:Note>MappedBeaninfo provides a CovariantPropertyType service,
            because java.beans.PropertyDescriptor is not powerful enough
            for Covariants and Generics.
          </scm:Note>
          <scm:Note>We now avoid instantiating and configuring assemblies
            created by default PropertySpecifiers.
          </scm:Note>
          <scm:Note>More intelligent property type resolution in 
            PropertySpecifier via MappedBeanInfo
          </scm:Note>
          <scm:Note>java.lang types are now explicitly dealt with in 
            AssemblyClass, so they do not get in the way of other unqualified 
            declarations for "local" assys.
          </scm:Note>
          <scm:Note>For consistency, PropertySpecifiers will always contain
            a "default" AssemblyClass, which will not be instantiated, but will
            serve as a discovery mechanism for the part of the object subgraph
            it manages. There is no longer a distinction between 
            getProperty() and discoverProperty(), but leaving the method in
            for compatibility.
          </scm:Note>
          <scm:Note>Clarified TypeMismatchException output
          </scm:Note>
          <scm:Note>ClassUtil has tool to determine root type of
            ParameterizedType
          </scm:Note>
          <scm:Note>ObjectType is no longer primitive, and can be assigned
            from anything but Void.
          </scm:Note>
          <scm:Note>data.reflect.ReflectionType now uses type inference 
            mechanism from lang.reflect package to handle java.beans
            issues in an identical fashion.
          </scm:Note>
          <scm:Note>Fields now get log from base class
          </scm:Note>
        </notes>
        
        <path>/source/spiralcraft/
        </path>
        
        <resources>
          <URI>beans/MappedBeanInfo.java
          </URI>
          <URI>builder/Assembly.java
          </URI>
          <URI>builder/AssemblyClass.java
          </URI>
          <URI>builder/PropertyBinding.java
          </URI>
          <URI>builder/PropertySpecifier.java
          </URI>
          <URI>data/TypeMismatchException.java
          </URI>
          <URI>data/types/standard/ObjectType.java
          </URI>
          <URI>data/reflect/ReflectionScheme.java
          </URI>
          <URI>data/reflect/ReflectionField.java
          </URI>
          <URI>util/lang/ClassUtil.java
          </URI>
          <URI>lang/reflect/BeanPropertyTranslator.java
          </URI>
          <URI>lang/reflect/BeanReflector.java
          </URI>
          <URI>data/builder/BuilderField.java
          </URI>
          <URI>data/builder/BuilderScheme.java
          </URI>
          <URI>data/builder/BuilderType.java
          </URI>
          <URI>data/core/CalculatedFieldImpl.java
          </URI>
          <URI>data/core/CalculatedFieldImpl.java
          </URI>
          <URI>data/core/FieldImpl.java
          </URI>
          <URI>data/core/KeyField.java
          </URI>
          <URI>data/core/QueryField.java
          </URI>
        </resources>
        
      </scm:Change>

      <scm:Change>
        <date>2009-04-29
        </date>
        
        <notes>
          <scm:Note>Provide encapsulation of standard Transaction management
            logic in a WorkUnit callback object
          </scm:Note>
        </notes>
        
        <path>/source/spiralcraft/data/transaction/
        </path>
        
        <resources>
          <URI>Transaction.java</URI>
          <URI>WorkUnit.java</URI>
          <URI>WorkException.java</URI>
        </resources>
        
      </scm:Change>

      <scm:Change>
        <date>2009-04-26
        </date>
        
        <notes>
          <scm:Note>Refactor Cursor interface to account for need to use
            close(), and removal of legacy requirement to avoid name 
            clash using the dataXXX method names.
          </scm:Note>
        </notes>
        
        <path>/source/spiralcraft/
        </path>
        
        <resources>
          <URI>data/access/Cursor.java</URI>
          <URI>data/access/SerialCursor.java</URI>
          <URI>data/access/ScrollableCursor.java</URI>
          <URI>data/access/CursorAggregate.java</URI>
          <URI>data/access/DataSynchronizer.java</URI>
          <URI>data/core/KeyField.java</URI>
          <URI>data/core/QueryField.java</URI>
          <URI>data/core/UniqueRule.java</URI>
          <URI>data/flatfile/RecordCursor.java</URI>
          <URI>data/flatfile/ScrollableRecordCursor.java</URI>
          <URI>data/lang/CursorBinding.java</URI>
          <URI>data/lang/TupleFocus.java</URI>
          <URI>data/query/QueryAggregate.java</URI>
          <URI>data/query/BoundQuery.java</URI>
          <URI>data/query/UnaryBoundQuery.java</URI>
          <URI>data/query/Sort.java</URI>
          <URI>data/query/Shuffle.java</URI>
          <URI>data/query/Equijoin.java</URI>
          <URI>data/query/Selection.java</URI>
          <URI>data/query/Distinct.java</URI>
          <URI>data/query/UnionBinding.java</URI>
          <URI>data/query/QueryChannel.java</URI>
          <URI>data/task/Fetch.java</URI>
          <URI>data/spi/AbstractAggregateQueryable.java</URI>
          <URI>data/spi/CursorIterator.java</URI>
          <URI>data/spi/ListCursor.java</URI>
          <URI>data/spi/ManualCursor.java</URI>
          <URI>security/spi/DataAuthenticator.java</URI>
          <URI>data/xml/XmlStore.java</URI>
        </resources>
        
      </scm:Change>
      
      <scm:Change>
        <date>2009-04-26
        </date>
        
        <path>/source/spiralcraft/test/
        </path>
        
        <notes>
          <scm:Note>A package for implementing automated test cases built on 
            the Task/Scenario system, to produce TestResults in a wide variety
            of scenarios. 
          </scm:Note>
        </notes>
      </scm:Change>
      
      <scm:Change>
        <date>2009-04-26
        </date>
        
        <path>/source/spiralcraft/command/BoundCommandFactory.java
        </path>
        
        <notes>
          <scm:Note>Encapsulates the situation where a Command is specified
            by an Expression or other device resolved against the Focus chain.
          </scm:Note>
          <scm:Note>This anticipates
            that Expression driven command resolution will need to support
            just-in time customization of the generated Command objects via
            property injection, for more control in the declarative layer.
          </scm:Note>
        </notes>
        
      </scm:Change>
          
      <scm:Change>
        <date>2009-04-26
        </date>
        
        <path>/source/spiralcraft/builder/PropertyBinding.java
        </path>
        
        <notes>
          <scm:Note>Builder resolves namespaces in Expressions when
            the target is of type Expression, before
            applying the Expression object to the target.
          </scm:Note>
        </notes>
        
      </scm:Change>

      <scm:Change>
        <date>2009-04-26
        </date>
        
        <path>/source/
        </path>
        
        <resources>
          <URI>spiralcraft/vfs/Initializer.java
          </URI>
          <URI>spiralcraft/vfs/Resolver.java
          </URI>
          <URI>META-INF/services/spiralcraft.common.Initializer
          </URI>
        </resources>
        
        <notes>
          <scm:Note>Register a StringConverter for Resource objects
          </scm:Note>
        </notes>
      </scm:Change>
      
      <scm:Change>
        <date>2009-04-26
        </date>
        
        <path>/source/spiralcraft/data/
        </path>
        
        <resources>
          <URI>spi/SingleSpace.java
          </URI>
          <URI>spi/AbstractStore.java
          </URI>
          <URI>xml/XmlStore.java
          </URI>
        </resources>
        
        <notes>
          <scm:Note>Debugging and logging functionality
          </scm:Note>
          <scm:Note>Startup assertion- ensure that Store is started when
             trying to query.
          </scm:Note>
          <scm:Note>XmlStore now calls super Lifecycle interface
          </scm:Note>
          <scm:Note>Space now implements Service, which extends Registrant. 
            Removed redundant implements Registrant declaration from
            SingleSpace.
          </scm:Note>
        </notes>
      </scm:Change>
      
      <scm:Change>
        <date>2009-04-24
        </date>
        
        <path>/source/spiralcraft
        </path>
        
        <resources>
          <URI>task/*
          </URI>
          <URI>data/task/Fetch.java
          </URI>
          <URI>data/util/DataBatchProcessor.java
          </URI>
        </resources>
        
        
        <notes>
          <scm:Note>Scenario is now a CommandFactory, and always creates 
            TaskCommands to allow for interaction between tasks.
          </scm:Note>
          <scm:Note>Created Fetch to run data queries from a Task
          </scm:Note>
          <scm:Note>Added stateless result processing chain to Task
             infrastructure
          </scm:Note>
          <scm:Note>TaskRunner publishes the Service tree into into the
            Focus.
          </scm:Note>
          <scm:Note>Clarified Scenario hierarchical compositional model.
          </scm:Note>
          <scm:Note>Refactored the BatchScenario into multiple components-
            Batch, Reference and Exec.
          </scm:Note>
        </notes>
      </scm:Change>
    </detail>
    
  </scm:Change>
  
  <scm:Change>
    <revision>0.3.3
    </revision>
    
    <date>2009-04-21
    </date>
    
    <authorId>miketoth
    </authorId>
    
    <notes>
      <scm:Note>Ongoing spiralcraft-sql module support and integration
      </scm:Note>
    </notes>
    

    <detail>
      <scm:Change>
        <date>2009-04-21
        </date>
        
        <path>/source/spiralcraft/io/
        </path>
        
        <resources>
          <URI>FileSequence.java</URI>
          <URI>RotatingFileOutputAgent.java</URI>
        </resources>
        
        <notes>
          <scm:Note>Handle situation where log fails to rotate because file
            is opened by something else. Put off rotate for 2 seconds
            default.
          </scm:Note>
        </notes>
      </scm:Change>

      <scm:Change>
        <date>2009-04-20
        </date>
        
        <path>/source/spiralcraft/data/sax/
        </path>
        
        <resources>
          <URI>DataHandler.java</URI>
          <URI>DataHandlerBase.java</URI>
          <URI>DataReader.java</URI>
          <URI>DataSAXException.java</URI>
        </resources>
        
        <notes>
          <scm:Note>Ensure that document location is provided for parser
            generated SAX exceptions
          </scm:Note>
        </notes>
      </scm:Change>

      <scm:Change>
        <date>2009-04-20
        </date>
        
        <path>/source/spiralcraft/builder/AssemblyLoader.java
        </path>
        
        <notes>
          <scm:Note>Write dataURI builder attribute to PropertySpecifier
          </scm:Note>
        </notes>
      </scm:Change>
    
      <scm:Change>
        <date>2009-04-20
        </date>
        
        <path>/source/spiralcraft/task/TaskRunner.java
        </path>
        
        <notes>
          <scm:Note>Throw better exception when no scenario configured
          </scm:Note>

          <scm:Note>Integrate a Service (or ServiceGroup) to be run
            along with the Scenario.
          </scm:Note>
        </notes>
      </scm:Change>

      <scm:Change>
        <date>2009-04-20
        </date>
        
        <resources>
          <URI>/source/spiralcraft/data/persist/AbstractXmlObject.java
          </URI>
        </resources>
            
        
        <notes>
          <scm:Note>Renamed method create() to activate(). New method
             create() only instantiates object.
          </scm:Note>
        </notes>
        
        <detail>
        
          <resources>
            <URI>/source/spiralcraft/builder/PropertyBinding.java
            </URI>
            <URI>/source/spiralcraft/exec/Executor.java
            </URI>
            <URI>/source/spiralcraft/task/BatchScenario.java
            </URI>
          </resources>
          
          <notes>
            <scm:Note>Refactoring sorted out
            </scm:Note>
          </notes>
        </detail>
      </scm:Change>

      <scm:Change>
        <date>2009-04-20
        </date>
        
        <path>/source/spiralcraft/data/reflect/
        </path>
        
        <resources>
          <URI>ReflectionType.java
          </URI>
          <URI>ReflectioTypeFactory.java
          </URI>
        </resources>
        
        <notes>
          <scm:Note>Remove spiralcraft.data related ClassNotFoundException that
           prints to stderr. Move to using ClassLog instead of stderr
          </scm:Note>
        </notes>
        
      </scm:Change>
      
      <scm:Change>
        <date>2009-04-20
        </date>
        
        <resources>
          <URI>/source/spiralcraft/service/Service.java
          </URI>
          <URI>/source/spiralcraft/service/ThreadService.java
          </URI>
          <URI>/source/spiralcraft/service/ServiceGroup.java
          </URI>
        </resources>
        
        <notes>
          <scm:Note>spiralcraft.service.Service interface now extends
             Registrant, as many components that fit in the Service role
             are also Registrants, and would benefit from top-down
             reachability.
          </scm:Note>
        </notes>
        <detail>

          
          <scm:Change>
            <path>/source/spiralcraft/data/Space
            </path>
            
            <notes>
              <scm:Note>Implements Service
              </scm:Note>
            </notes>
          </scm:Change>
          
          <scm:Change>
            <notes>
              <scm:Note>ServiceAdapter obsoleted
              </scm:Note>
              
            </notes>
            <resources>
              <URI>/source/spiralcraft/service/ServiceAdapter.java
              </URI>
              <URI>/source/spiralcraft/service/ThreadService.java
              </URI>
              <URI>/source/spiralcraft/ui/UiService.java
              </URI>
              
            </resources>
          </scm:Change>

          <scm:Change>
            <path>/source/spiralcraft/service/Daemon.java
            </path>

            <notes>
            
              <scm:Note>Removed old JUL logging code
                 in register(), remove method and defer to super.register()
              </scm:Note>  
            </notes>
          </scm:Change>
                    
        </detail>
        
      </scm:Change>    
    </detail>
  </scm:Change>
  
  <scm:Change>
    <revision>0.3.2
    </revision>
    
    <authorId>miketoth
    </authorId>
    
    <notes>
      <scm:Note>Bug fixes
      </scm:Note>
      <scm:Note>Change management system testing
      </scm:Note>
      <scm:Note>Ongoing spiralcraft-sql module support and integration
      </scm:Note>
    </notes>
    
    <detail>
      <scm:Change>
        <date>2009-04-20
        </date>
        
        <path>/source/spiralcraft/builder
        </path>
        
        <notes>
          <scm:Note>Fix problem using drill-down property specifier - 
            "More than one Assembly in property" introduced
            with latest builder upgrade set. PropertySpecifier now correctly
            uses "replace" mode when computing override for non-aggregate
            properties.
            
          </scm:Note>
        </notes>
      </scm:Change>

      <scm:Change>
        <date>2009-04-19
        </date>
        
        <path>/source/spiralcraft/lang/reflect/BeanPropertyChannel
        </path>
        
        <notes>
          <scm:Note>Fix null exception thrown in WebUI on REQUEST event in
                 Editor. When trying to set a property of a null value, return
                 false from set() instead of throwing an exception. Encountering
                 a null should be a soft failure.
          </scm:Note>
        </notes>
      </scm:Change>
          
      <scm:Change>
        <date>2009-04-19
        </date>
        
        <path>/source/spiralcraft/task/Scenario
        </path>
        
        <notes>
          <scm:Note>Removed bindCommand and associated ThreadLocalChannel for
            command, as it appears that this functionality is no longer used
            and no longer has a purpose.
          </scm:Note>
        </notes>
      </scm:Change>
    
      <scm:Change>
        <date>2009-04-19
        </date>
        
        <path>/source/spiralcraft/task/TaskRunner
        </path>
        
        <notes>
          <scm:Note>Provide bean configuration for the root Focus into
            which the referenced Scenario will be bound. This is anticipated
            as being generally useful, but the specific case that prompted
            it is no longer applicable.
          </scm:Note>
        </notes>
      </scm:Change>
    
      <scm:Change>
        <date>2009-04-19
        </date>
        
        <path>/source/spiralcraft/builder
        </path>
        
        <notes>
          <scm:Note>Functionally transparent refactoring to modularize 
            configuration source scenarios and split up large methods.
          </scm:Note>
        </notes>
      </scm:Change>
    
      <scm:Change>
        <date>2009-04-17
        </date>
        
        <path>/source/spiralcraft/lang/util/Configurator.java
        </path>
        
        <notes>
          <scm:Note>Improved debug message when bean property is not found
          </scm:Note>
                  
        </notes>
      </scm:Change>
          
      <scm:Change>
        <date>2009-04-17
        </date>
        
        <path>/source/spiralcraft/log/
        </path>
        
        <resources>
          <URI>DefaultFormatter.java
          </URI>
        </resources>
        
        <notes>
          <scm:Note>Improved readability of default formatter by putting 
            message up front and
            source data at end of single line, eliminating the previous
            multi-line format.
          </scm:Note>
        
        </notes>
        
      </scm:Change>

      <scm:Change>
        <date>2009-04-16
        </date>
        
        <path>/source/spiralcraft/data/flatfile/
        </path>
        
        <resources>
          <URI>DelimitedRecordFormat.java
          </URI>
          <URI>Writer.java
          </URI>
        </resources>
        
        <notes>
          <scm:Note>Integrated DelimitedRecordFormat into Writer
          </scm:Note>
          
          <scm:Note>Auto-configure DelimitedRecordFormat from supplied Type
            or FieldSet when no  FieldMapping[] is provided.
          </scm:Note>
        
        </notes>
      </scm:Change>
    </detail>
  </scm:Change>
</scm:Change.list>