<scm:Change.list
  xmlns:scm="class:/spiralcraft/scm/meta/"
  >
  <scm:Change>
    <revision>0.3.5
    </revision>
    
    <authorId>miketoth
    </authorId>
    
    <notes>
      <scm:Note>Regression fixes
      </scm:Note>
    </notes>
    
    <detail>
      <scm:Change>
        <date>2009-05-11
        </date>
        
        <notes>
          <scm:Note>Make sure queries with no Scans are solved by the Space
            itself, since no Stores will be consulted. Added unit tests
            for use with ReferenceQuery to verify.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/
        </path>
        
        <resources>
          <URI>data/Space.java
          </URI>
        </resources>
      </scm:Change>
    </detail>
    
  </scm:Change>

        
  <scm:Change>
    <revision>0.3.4
    </revision>
    
    <authorId>miketoth
    </authorId>
    
    <date>2009-05-11
    </date>
    
    <notes>
      <scm:Note>Ongoing spiralcraft-sql module support and integration
      </scm:Note>
    </notes>

        
    <detail>
      <scm:Change>
        <date>2009-05-09
        </date>
        
        <notes>
          <scm:Note>Fix regression issues and issues exposed with new
            functionality.
          </scm:Note>
          <scm:Note>Correct exception in PrimitiveTypeImpl.toString() to
            show the correct target type instead of "String"
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/
        </path>
        
        <resources>
          <URI>data/core/PrimitiveTypeImpl.java
          </URI>
        </resources>
      </scm:Change>

      <scm:Change>
        <date>2009-05-09
        </date>
        
        <notes>
          <scm:Note>Fix regression issues and issues exposed with new
            functionality.
          </scm:Note>
          <scm:Note>Prevent a BufferTuple from being created with a non-buffer
            Type.
          </scm:Note>
          <scm:Note>Fetch updater using archetype of BufferType, which is
            original type, because Space doesn't know about the buffer type.
          </scm:Note>
          <scm:Note>External logging added to DataWriter.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/data/
        </path>
        
        <resources>
          <URI>session/BufferTuple.java
          </URI>
          <URI>sax/DataWriter.java
          </URI>
        </resources>
      </scm:Change>

      <scm:Change>
        <date>2009-05-08
        </date>
        
        <notes>
          <scm:Note>Fixed issue where Tuple.set("field",value) syntax
            did not recognize fields in base-type.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/
        </path>
        
        <resources>
          <URI>data/spi/EditableArrayTuple.java
          </URI>
        </resources>
      </scm:Change>

      <scm:Change>
        <date>2009-05-06
        </date>
        
        <notes>
          <scm:Note>Enhanced builder exceptions to show list of available
            properties when a property is not found.
          </scm:Note>
        </notes>
        
        <path>source/spiralcraft/
        </path>
        
        <resources>
          <URI>beans/MappedBeanInfo.java
          </URI>
          <URI>builder/PropertyBinding.java
          </URI>
          <URI>builder/PropertySpecifier.java
          </URI>
          <URI>data/builder/BuilderField.java
          </URI>
          <URI>data/builder/BuilderType.java
          </URI>
        </resources>
      </scm:Change>
      
      <scm:Change>
        <date>2009-05-04
        </date>

        <notes>
          <scm:Note>Enhancements to flat file data handling and integration
            into task/scenario architecture.
          </scm:Note>
          

          <scm:Note>More informative DataException reporting, as well as
            better reporting for bad record reading.
          </scm:Note>
          
          <scm:Note>FlatFile cursors have an error tolerant mode which skips
            bad records.
          </scm:Note>

          <scm:Note>New IO classes ConsumableFileInputStream and
            FileBufferedInputStream for efficiency when reading huge or
            very granular network input streams.
          </scm:Note>

          <scm:Note>Default formatter does not dump stack trace for
            INFO level exceptions.
          </scm:Note>
          
          <scm:Note>CursorAggregate support for reading subset of records
            in cursor.
          </scm:Note>
          
          <scm:Note>TypeImpl now re-uses its integral FieldSet to preserve
            identity relationship that components depend on.
          </scm:Note>
          
          <scm:Note>TypeImpl now re-uses its integral FieldSet to preserve
            identity relationship that components depend on, and disallows
            call to getFieldSet() before type is linked in order to enforce
            consistency. TupleReflector changed to avoid unnecessary call
            to getFieldSet() before Type is linked.
          </scm:Note>
        </notes>
        
        <resources>
          <URI>source/spiralcraft/log/DefaultFormatter.java
          </URI>
          <URI>source/spiralcraft/data/flatfile/DelimitedRecordFormat.java
          </URI>
          <URI>source/spiralcraft/data/flatfile/FieldMapping.java
          </URI>
          <URI>source/spiralcraft/data/flatfile/Output.java
          </URI>
          <URI>source/spiralcraft/data/flatfile/RecordCursor.java
          </URI>
          <URI>source/spiralcraft/data/flatfile/ScrollableRecordCursor.java
          </URI>
          <URI>source/spiralcraft/data/flatfile/Scan.java
          </URI>
          <URI>source/spiralcraft/data/core/TypeImpl.java
          </URI>
          <URI>source/spiralcraft/data/core/UnifiedFieldSet.java
          </URI>
          <URI>source/spiralcraft/data/lang/TupleReflector.java
          </URI>
          <URI>source/spiralcraft/data/access/CursorAggregate.java
          </URI>
          <URI>source/spiralcraft/data/DataException.java
          </URI>
          <URI>source/spiralcraft/io/ConsumableFileInputStream.java
          </URI>
          <URI>source/spiralcraft/io/FileBufferedInputStream.java
          </URI>
        </resources>
      </scm:Change>

      <scm:Change>
        <date>2009-05-04
        </date>

        <notes>
          <scm:Note>Support Pattern matching rules for data StringType, and
            better exception handling for Rules.
          </scm:Note>
          
          <scm:Note>Added core support for java.util.regex.Pattern as
            a primitive data type.
          </scm:Note>

        </notes>
        
        <resources>
          <URI>source/spiralcraft/util/string/StringConverter.java
          </URI>
          <URI>source/spiralcraft/rules/PatternRule.java
          </URI>
          <URI>source/spiralcraft/rules/RuleException.java
          </URI>
          <URI>source/spiralcraft/rules/Violation.java
          </URI>
          <URI>source/spiralcraft/data/types/standard/PatternType.java
          </URI>
          <URI>source/spiralcraft/data/types/standard/StringType.java
          </URI>
          <URI>source/spiralcraft/data/reflect/ReflectionType.java
          </URI>
        </resources>
      </scm:Change>

      <scm:Change>
        <date>2009-05-04
        </date>

        <notes>
          <scm:Note>Enhancements to TaskRunner to support command line
            utility development
          </scm:Note>
          
          <scm:Note>Added method to retrieve remaining command arguments
            when delegating execute(String ...)
          </scm:Note>

          <scm:Note>Option to dynamically load and chain Scenarios in TaskRunner
            via command line arguments, to allow for Scenario assemblies to
            be re-used in either a command line or embedded context.
          </scm:Note>

          <scm:Note>Suppress redundant exception reporting in TaskCommand
          </scm:Note>
        </notes>
        
        <resources>
          <URI>source/spiralcraft/exec/Arguments.java
          </URI>
          <URI>source/spiralcraft/task/TaskRunner.java
          </URI>
          <URI>source/spiralcraft/task/TaskCommand.java
          </URI>
        </resources>
      </scm:Change>

      <scm:Change>
        <date>2009-05-01
        </date>

        <notes>
          <scm:Note>Added shutdown hook to Scheduler to prevent running
            tasks after shutdown is initiated
          </scm:Note>
        </notes>
        
        <resources>
          <URI>source/spiralcraft/time/Scheduler.java
          </URI>
        </resources>
      </scm:Change>

      <scm:Change>
        <date>2009-05-01
        </date>

        <notes>
          <scm:Note>Automated regression testing facility enhancements
            related to staging data for various stores.
          </scm:Note>
 
          <scm:Note>Scenario model now supports a chain pattern for
            fluent setup.
          </scm:Note>
          
          <scm:Note>Removed excessive generics usage from Scenario model
            and de-emphasized command result path as a data path. Command
            result path is essentially a control path in this model, as
            the data path should be through the FocusChain.
          </scm:Note>

          <scm:Note>VFS supports a copy from classpath function useful for
            using built-in data to stage a test from scratch. This works
            with local classloaders by interpreting the the jar or file URL,
            in conjuction with the pattern search tool.
          </scm:Note>
          
          <scm:Note>vfs now has a JarResource and FileResource
          </scm:Note>
          
          <scm:Note>PathPattern now accepts a prefix, so the pattern
            doesn't need to include it, if the usage only supplies 
            absolute paths.
          </scm:Note>
          
          <scm:Note>Added error handling to vfs and generic task components to 
           deal with secondary cases and more error conditions, and multiple
           Exceptions in multi-task models. 
          </scm:Note>

          <scm:Note>Added spiralcraft.data.task.Collect to manage an
            Aggregate to collect results of batch tasks. 
          </scm:Note>


          <scm:Note>Built ClosureFocus to provide automatic thread-inheritable
            context for tasks which spawn threads.
          </scm:Note>
          
        </notes>
        
        <path>/source/spiralcraft
        </path>
          
        <resources>
          <URI>vfs/task/Copy.java
          </URI>
          <URI>vfs/jar/JarFileResource.java
          </URI>
          <URI>vfs/jar/JarResourceFactory.java
          </URI>
          <URI>vfs/filters/PatternFilter.java
          </URI>
          <URI>vfs/filters/NameGlobFilter.java
          </URI>
          <URI>vfs/file/FileResource.java
          </URI>
          <URI>vfs/classpath/ClasspathResource.java
          </URI>
          <URI>vfs/batch/Search.java
          </URI>
          <URI>vfs/AbstractResource.java
          </URI>
          <URI>vfs/Resolver.java
          </URI>
          <URI>util/Path.java
          </URI>
          <URI>util/PathPattern.java
          </URI>
          <URI>util/MultiException.java
          </URI>
          <URI>task/AbstractTask.java
          </URI>
          <URI>task/Batch.java
          </URI>
          <URI>task/Exec.java
          </URI>
          <URI>task/Reference.java
          </URI>
          <URI>task/MultiTask.java
          </URI>
          <URI>task/ParallelTask.java
          </URI>
          <URI>task/Scenario.java
          </URI>
          <URI>task/Sequence.java
          </URI>
          <URI>task/SerialTask.java
          </URI>
          <URI>task/TaskCommand.java
          </URI>
          <URI>task/TaskListener.java
          </URI>
          <URI>task/TaskRunner.java
          </URI>
          <URI>test/Stub.java
          </URI>
          <URI>test/Test.java
          </URI>
          <URI>test/TestGroup.java
          </URI>
          <URI>test/TestResult.java
          </URI>
          <URI>io/InputStreamWrapper.java
          </URI>
          <URI>data/util/DataBatchProcessor.java
          </URI>
          <URI>data/task/Collector.java
          </URI>
          <URI>data/task/Fetch.java
          </URI>
          <URI>lang/spi/ClosureFocus.java
          </URI>
          <URI>lang/spi/ThreadLocalChannel.java
          </URI>
        </resources>              
      </scm:Change>
      
      <scm:Change>
        <date>2009-04-30
        </date>
        
        <notes>
          <scm:Note>Refactor Space to support multiple Stores, as originally
            intended. class SingleSpace has been removed in favor of a 
            concrete spiralcraft.data.Space.
          </scm:Note>
          <scm:Note>Query supports recursive search for Scan types to 
            better narrow the set of stores to Query. This function was moved
            from AbstractStore.
          </scm:Note>
          <scm:Note>Query resolution should use the Focus chain to obtain the 
            relevant Space in which to recursively solve the query. Implemented
            in AbstractStore.
          </scm:Note>
          <scm:Note>Store interface is now a Service, and provides new method
            isAuthoritative to identify master store when multiple stores 
            support a Type.
          </scm:Note>
          <scm:Note>XmlStore defines authoritative types from the 
            XmlQueryable tables and from base types that have Sequence fields.
          </scm:Note>
        </notes>
        
        <path>/source/spiralcraft/data/
        </path>
        
        <resources>
          <URI>spi/SingleSpace.java
          </URI>
          <URI>Space.java
          </URI>
          <URI>query/Query.java
          </URI>
          <URI>query/Concatenation.java
          </URI>
          <URI>query/ConcatenationBinding.java
          </URI>
          <URI>spi/AbstractStore.java
          </URI>
          <URI>xml/XmlStore.java
          </URI>
          <URI>access/Store.java
          </URI>
        </resources>
        
      </scm:Change>
      
      <scm:Change>
        <date>2009-04-30
        </date>
        
        <notes>
          <scm:Note>Summary- Fix builder regression for persistence mechanism,
            which got tripped up on some other issues.
          </scm:Note>
          <scm:Note>MappedBeaninfo provides a CovariantPropertyType service,
            because java.beans.PropertyDescriptor is not powerful enough
            for Covariants and Generics.
          </scm:Note>
          <scm:Note>We now avoid instantiating and configuring assemblies
            created by default PropertySpecifiers.
          </scm:Note>
          <scm:Note>More intelligent property type resolution in 
            PropertySpecifier via MappedBeanInfo
          </scm:Note>
          <scm:Note>java.lang types are now explicitly dealt with in 
            AssemblyClass, so they do not get in the way of other unqualified 
            declarations for "local" assys.
          </scm:Note>
          <scm:Note>For consistency, PropertySpecifiers will always contain
            a "default" AssemblyClass, which will not be instantiated, but will
            serve as a discovery mechanism for the part of the object subgraph
            it manages. There is no longer a distinction between 
            getProperty() and discoverProperty(), but leaving the method in
            for compatibility.
          </scm:Note>
          <scm:Note>Clarified TypeMismatchException output
          </scm:Note>
          <scm:Note>ClassUtil has tool to determine root type of
            ParameterizedType
          </scm:Note>
          <scm:Note>ObjectType is no longer primitive, and can be assigned
            from anything but Void.
          </scm:Note>
          <scm:Note>data.reflect.ReflectionType now uses type inference 
            mechanism from lang.reflect package to handle java.beans
            issues in an identical fashion.
          </scm:Note>
          <scm:Note>Fields now get log from base class
          </scm:Note>
        </notes>
        
        <path>/source/spiralcraft/
        </path>
        
        <resources>
          <URI>beans/MappedBeanInfo.java
          </URI>
          <URI>builder/Assembly.java
          </URI>
          <URI>builder/AssemblyClass.java
          </URI>
          <URI>builder/PropertyBinding.java
          </URI>
          <URI>builder/PropertySpecifier.java
          </URI>
          <URI>data/TypeMismatchException.java
          </URI>
          <URI>data/types/standard/ObjectType.java
          </URI>
          <URI>data/reflect/ReflectionScheme.java
          </URI>
          <URI>data/reflect/ReflectionField.java
          </URI>
          <URI>util/lang/ClassUtil.java
          </URI>
          <URI>lang/reflect/BeanPropertyTranslator.java
          </URI>
          <URI>lang/reflect/BeanReflector.java
          </URI>
          <URI>data/builder/BuilderField.java
          </URI>
          <URI>data/builder/BuilderScheme.java
          </URI>
          <URI>data/builder/BuilderType.java
          </URI>
          <URI>data/core/CalculatedFieldImpl.java
          </URI>
          <URI>data/core/CalculatedFieldImpl.java
          </URI>
          <URI>data/core/FieldImpl.java
          </URI>
          <URI>data/core/KeyField.java
          </URI>
          <URI>data/core/QueryField.java
          </URI>
        </resources>
        
      </scm:Change>

      <scm:Change>
        <date>2009-04-29
        </date>
        
        <notes>
          <scm:Note>Provide encapsulation of standard Transaction management
            logic in a WorkUnit callback object
          </scm:Note>
        </notes>
        
        <path>/source/spiralcraft/data/transaction/
        </path>
        
        <resources>
          <URI>Transaction.java</URI>
          <URI>WorkUnit.java</URI>
          <URI>WorkException.java</URI>
        </resources>
        
      </scm:Change>

      <scm:Change>
        <date>2009-04-26
        </date>
        
        <notes>
          <scm:Note>Refactor Cursor interface to account for need to use
            close(), and removal of legacy requirement to avoid name 
            clash using the dataXXX method names.
          </scm:Note>
        </notes>
        
        <path>/source/spiralcraft/
        </path>
        
        <resources>
          <URI>data/access/Cursor.java</URI>
          <URI>data/access/SerialCursor.java</URI>
          <URI>data/access/ScrollableCursor.java</URI>
          <URI>data/access/CursorAggregate.java</URI>
          <URI>data/access/DataSynchronizer.java</URI>
          <URI>data/core/KeyField.java</URI>
          <URI>data/core/QueryField.java</URI>
          <URI>data/core/UniqueRule.java</URI>
          <URI>data/flatfile/RecordCursor.java</URI>
          <URI>data/flatfile/ScrollableRecordCursor.java</URI>
          <URI>data/lang/CursorBinding.java</URI>
          <URI>data/lang/TupleFocus.java</URI>
          <URI>data/query/QueryAggregate.java</URI>
          <URI>data/query/BoundQuery.java</URI>
          <URI>data/query/UnaryBoundQuery.java</URI>
          <URI>data/query/Sort.java</URI>
          <URI>data/query/Shuffle.java</URI>
          <URI>data/query/Equijoin.java</URI>
          <URI>data/query/Selection.java</URI>
          <URI>data/query/Distinct.java</URI>
          <URI>data/query/UnionBinding.java</URI>
          <URI>data/query/QueryChannel.java</URI>
          <URI>data/task/Fetch.java</URI>
          <URI>data/spi/AbstractAggregateQueryable.java</URI>
          <URI>data/spi/CursorIterator.java</URI>
          <URI>data/spi/ListCursor.java</URI>
          <URI>data/spi/ManualCursor.java</URI>
          <URI>security/spi/DataAuthenticator.java</URI>
          <URI>data/xml/XmlStore.java</URI>
        </resources>
        
      </scm:Change>
      
      <scm:Change>
        <date>2009-04-26
        </date>
        
        <path>/source/spiralcraft/test/
        </path>
        
        <notes>
          <scm:Note>A package for implementing automated test cases built on 
            the Task/Scenario system, to produce TestResults in a wide variety
            of scenarios. 
          </scm:Note>
        </notes>
      </scm:Change>
      
      <scm:Change>
        <date>2009-04-26
        </date>
        
        <path>/source/spiralcraft/command/BoundCommandFactory.java
        </path>
        
        <notes>
          <scm:Note>Encapsulates the situation where a Command is specified
            by an Expression or other device resolved against the Focus chain.
          </scm:Note>
          <scm:Note>This anticipates
            that Expression driven command resolution will need to support
            just-in time customization of the generated Command objects via
            property injection, for more control in the declarative layer.
          </scm:Note>
        </notes>
        
      </scm:Change>
          
      <scm:Change>
        <date>2009-04-26
        </date>
        
        <path>/source/spiralcraft/builder/PropertyBinding.java
        </path>
        
        <notes>
          <scm:Note>Builder resolves namespaces in Expressions when
            the target is of type Expression, before
            applying the Expression object to the target.
          </scm:Note>
        </notes>
        
      </scm:Change>

      <scm:Change>
        <date>2009-04-26
        </date>
        
        <path>/source/
        </path>
        
        <resources>
          <URI>spiralcraft/vfs/Initializer.java
          </URI>
          <URI>spiralcraft/vfs/Resolver.java
          </URI>
          <URI>META-INF/services/spiralcraft.common.Initializer
          </URI>
        </resources>
        
        <notes>
          <scm:Note>Register a StringConverter for Resource objects
          </scm:Note>
        </notes>
      </scm:Change>
      
      <scm:Change>
        <date>2009-04-26
        </date>
        
        <path>/source/spiralcraft/data/
        </path>
        
        <resources>
          <URI>spi/SingleSpace.java
          </URI>
          <URI>spi/AbstractStore.java
          </URI>
          <URI>xml/XmlStore.java
          </URI>
        </resources>
        
        <notes>
          <scm:Note>Debugging and logging functionality
          </scm:Note>
          <scm:Note>Startup assertion- ensure that Store is started when
             trying to query.
          </scm:Note>
          <scm:Note>XmlStore now calls super Lifecycle interface
          </scm:Note>
          <scm:Note>Space now implements Service, which extends Registrant. 
            Removed redundant implements Registrant declaration from
            SingleSpace.
          </scm:Note>
        </notes>
      </scm:Change>
      
      <scm:Change>
        <date>2009-04-24
        </date>
        
        <path>/source/spiralcraft
        </path>
        
        <resources>
          <URI>task/*
          </URI>
          <URI>data/task/Fetch.java
          </URI>
          <URI>data/util/DataBatchProcessor.java
          </URI>
        </resources>
        
        
        <notes>
          <scm:Note>Scenario is now a CommandFactory, and always creates 
            TaskCommands to allow for interaction between tasks.
          </scm:Note>
          <scm:Note>Created Fetch to run data queries from a Task
          </scm:Note>
          <scm:Note>Added stateless result processing chain to Task
             infrastructure
          </scm:Note>
          <scm:Note>TaskRunner publishes the Service tree into into the
            Focus.
          </scm:Note>
          <scm:Note>Clarified Scenario hierarchical compositional model.
          </scm:Note>
          <scm:Note>Refactored the BatchScenario into multiple components-
            Batch, Reference and Exec.
          </scm:Note>
        </notes>
      </scm:Change>
    </detail>
    
  </scm:Change>
  
  <scm:Change>
    <revision>0.3.3
    </revision>
    
    <date>2009-04-21
    </date>
    
    <authorId>miketoth
    </authorId>
    
    <notes>
      <scm:Note>Ongoing spiralcraft-sql module support and integration
      </scm:Note>
    </notes>
    

    <detail>
      <scm:Change>
        <date>2009-04-21
        </date>
        
        <path>/source/spiralcraft/io/
        </path>
        
        <resources>
          <URI>FileSequence.java</URI>
          <URI>RotatingFileOutputAgent.java</URI>
        </resources>
        
        <notes>
          <scm:Note>Handle situation where log fails to rotate because file
            is opened by something else. Put off rotate for 2 seconds
            default.
          </scm:Note>
        </notes>
      </scm:Change>

      <scm:Change>
        <date>2009-04-20
        </date>
        
        <path>/source/spiralcraft/data/sax/
        </path>
        
        <resources>
          <URI>DataHandler.java</URI>
          <URI>DataHandlerBase.java</URI>
          <URI>DataReader.java</URI>
          <URI>DataSAXException.java</URI>
        </resources>
        
        <notes>
          <scm:Note>Ensure that document location is provided for parser
            generated SAX exceptions
          </scm:Note>
        </notes>
      </scm:Change>

      <scm:Change>
        <date>2009-04-20
        </date>
        
        <path>/source/spiralcraft/builder/AssemblyLoader.java
        </path>
        
        <notes>
          <scm:Note>Write dataURI builder attribute to PropertySpecifier
          </scm:Note>
        </notes>
      </scm:Change>
    
      <scm:Change>
        <date>2009-04-20
        </date>
        
        <path>/source/spiralcraft/task/TaskRunner.java
        </path>
        
        <notes>
          <scm:Note>Throw better exception when no scenario configured
          </scm:Note>

          <scm:Note>Integrate a Service (or ServiceGroup) to be run
            along with the Scenario.
          </scm:Note>
        </notes>
      </scm:Change>

      <scm:Change>
        <date>2009-04-20
        </date>
        
        <resources>
          <URI>/source/spiralcraft/data/persist/AbstractXmlObject.java
          </URI>
        </resources>
            
        
        <notes>
          <scm:Note>Renamed method create() to activate(). New method
             create() only instantiates object.
          </scm:Note>
        </notes>
        
        <detail>
        
          <resources>
            <URI>/source/spiralcraft/builder/PropertyBinding.java
            </URI>
            <URI>/source/spiralcraft/exec/Executor.java
            </URI>
            <URI>/source/spiralcraft/task/BatchScenario.java
            </URI>
          </resources>
          
          <notes>
            <scm:Note>Refactoring sorted out
            </scm:Note>
          </notes>
        </detail>
      </scm:Change>

      <scm:Change>
        <date>2009-04-20
        </date>
        
        <path>/source/spiralcraft/data/reflect/
        </path>
        
        <resources>
          <URI>ReflectionType.java
          </URI>
          <URI>ReflectioTypeFactory.java
          </URI>
        </resources>
        
        <notes>
          <scm:Note>Remove spiralcraft.data related ClassNotFoundException that
           prints to stderr. Move to using ClassLog instead of stderr
          </scm:Note>
        </notes>
        
      </scm:Change>
      
      <scm:Change>
        <date>2009-04-20
        </date>
        
        <resources>
          <URI>/source/spiralcraft/service/Service.java
          </URI>
          <URI>/source/spiralcraft/service/ThreadService.java
          </URI>
          <URI>/source/spiralcraft/service/ServiceGroup.java
          </URI>
        </resources>
        
        <notes>
          <scm:Note>spiralcraft.service.Service interface now extends
             Registrant, as many components that fit in the Service role
             are also Registrants, and would benefit from top-down
             reachability.
          </scm:Note>
        </notes>
        <detail>

          
          <scm:Change>
            <path>/source/spiralcraft/data/Space
            </path>
            
            <notes>
              <scm:Note>Implements Service
              </scm:Note>
            </notes>
          </scm:Change>
          
          <scm:Change>
            <notes>
              <scm:Note>ServiceAdapter obsoleted
              </scm:Note>
              
            </notes>
            <resources>
              <URI>/source/spiralcraft/service/ServiceAdapter.java
              </URI>
              <URI>/source/spiralcraft/service/ThreadService.java
              </URI>
              <URI>/source/spiralcraft/ui/UiService.java
              </URI>
              
            </resources>
          </scm:Change>

          <scm:Change>
            <path>/source/spiralcraft/service/Daemon.java
            </path>

            <notes>
            
              <scm:Note>Removed old JUL logging code
                 in register(), remove method and defer to super.register()
              </scm:Note>  
            </notes>
          </scm:Change>
                    
        </detail>
        
      </scm:Change>    
    </detail>
  </scm:Change>
  
  <scm:Change>
    <revision>0.3.2
    </revision>
    
    <authorId>miketoth
    </authorId>
    
    <notes>
      <scm:Note>Bug fixes
      </scm:Note>
      <scm:Note>Change management system testing
      </scm:Note>
      <scm:Note>Ongoing spiralcraft-sql module support and integration
      </scm:Note>
    </notes>
    
    <detail>
      <scm:Change>
        <date>2009-04-20
        </date>
        
        <path>/source/spiralcraft/builder
        </path>
        
        <notes>
          <scm:Note>Fix problem using drill-down property specifier - 
            "More than one Assembly in property" introduced
            with latest builder upgrade set. PropertySpecifier now correctly
            uses "replace" mode when computing override for non-aggregate
            properties.
            
          </scm:Note>
        </notes>
      </scm:Change>

      <scm:Change>
        <date>2009-04-19
        </date>
        
        <path>/source/spiralcraft/lang/reflect/BeanPropertyChannel
        </path>
        
        <notes>
          <scm:Note>Fix null exception thrown in WebUI on REQUEST event in
                 Editor. When trying to set a property of a null value, return
                 false from set() instead of throwing an exception. Encountering
                 a null should be a soft failure.
          </scm:Note>
        </notes>
      </scm:Change>
          
      <scm:Change>
        <date>2009-04-19
        </date>
        
        <path>/source/spiralcraft/task/Scenario
        </path>
        
        <notes>
          <scm:Note>Removed bindCommand and associated ThreadLocalChannel for
            command, as it appears that this functionality is no longer used
            and no longer has a purpose.
          </scm:Note>
        </notes>
      </scm:Change>
    
      <scm:Change>
        <date>2009-04-19
        </date>
        
        <path>/source/spiralcraft/task/TaskRunner
        </path>
        
        <notes>
          <scm:Note>Provide bean configuration for the root Focus into
            which the referenced Scenario will be bound. This is anticipated
            as being generally useful, but the specific case that prompted
            it is no longer applicable.
          </scm:Note>
        </notes>
      </scm:Change>
    
      <scm:Change>
        <date>2009-04-19
        </date>
        
        <path>/source/spiralcraft/builder
        </path>
        
        <notes>
          <scm:Note>Functionally transparent refactoring to modularize 
            configuration source scenarios and split up large methods.
          </scm:Note>
        </notes>
      </scm:Change>
    
      <scm:Change>
        <date>2009-04-17
        </date>
        
        <path>/source/spiralcraft/lang/util/Configurator.java
        </path>
        
        <notes>
          <scm:Note>Improved debug message when bean property is not found
          </scm:Note>
                  
        </notes>
      </scm:Change>
          
      <scm:Change>
        <date>2009-04-17
        </date>
        
        <path>/source/spiralcraft/log/
        </path>
        
        <resources>
          <URI>DefaultFormatter.java
          </URI>
        </resources>
        
        <notes>
          <scm:Note>Improved readability of default formatter by putting 
            message up front and
            source data at end of single line, eliminating the previous
            multi-line format.
          </scm:Note>
        
        </notes>
        
      </scm:Change>

      <scm:Change>
        <date>2009-04-16
        </date>
        
        <path>/source/spiralcraft/data/flatfile/
        </path>
        
        <resources>
          <URI>DelimitedRecordFormat.java
          </URI>
          <URI>Writer.java
          </URI>
        </resources>
        
        <notes>
          <scm:Note>Integrated DelimitedRecordFormat into Writer
          </scm:Note>
          
          <scm:Note>Auto-configure DelimitedRecordFormat from supplied Type
            or FieldSet when no  FieldMapping[] is provided.
          </scm:Note>
        
        </notes>
      </scm:Change>
    </detail>
  </scm:Change>
</scm:Change.list>