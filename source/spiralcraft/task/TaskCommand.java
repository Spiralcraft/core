//
// Copyright (c) 2009,2009 Michael Toth
// Spiralcraft Inc., All Rights Reserved
//
// This package is part of the Spiralcraft project and is licensed under
// a multiple-license framework.
//
// You may not use this file except in compliance with the terms found in the
// SPIRALCRAFT-LICENSE.txt file at the top of this distribution, or available
// at http://www.spiralcraft.org/licensing/SPIRALCRAFT-LICENSE.txt.
//
// Unless otherwise agreed to in writing, this software is distributed on an
// "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, either express or implied.
//
package spiralcraft.task;

import java.util.ArrayList;
import java.util.List;

import spiralcraft.command.CommandAdapter;


/**
 * <p>A Command that encapsulates the execution of a specific type of Task.
 * </p>
 * 
 * <p>The Command can optionally accumulate Task results in an application
 *   specific manner.
 * </p>
 * @author mike
 *
 */
public class TaskCommand<Ttask extends Task,Tresult>
  extends CommandAdapter<Scenario<Ttask,Tresult>,List<Tresult>>
  implements TaskListener
{
  
  protected final Ttask task;
  protected boolean collectResults=false;
  
  public TaskCommand(Scenario<Ttask,Tresult> scenario,Ttask task)
  { 
    this.task=task;
    this.task.addTaskListener(this);
    setTarget(scenario);
  }
  
  public Ttask getTask()
  { return task;
  }
  
  @Override
  public void run()
  { 
    getTarget().pushCommand(this);
    try
    { 
      if (task==null)
      { throw new IllegalStateException("No task specified");
      }
      else
      { 
        task.run();
        setException(task.getException());
      }
    }
    catch (RuntimeException x)
    { 
      setException(x);
      throw x;
    }
    finally
    { getTarget().popCommand();
    }
  }

  /**
   * Indicate whether the command should collect the results generated by
   *   the running task. Defaults to false. Set to true in situations
   *   where Command.getResult() will be used instead of adding a 
   *   TaskListener to the contained task.
   * 
   * @param collectResults
   */
  public void setCollectResults(boolean collectResults)
  { this.collectResults=collectResults;
  }
  
  @SuppressWarnings("unchecked")
  @Override
  public <T> void taskAddedResult(
    TaskEvent event,
    T result)
  { 
    if (getTarget().getLogTaskResults())
    { getTarget().logTaskResult(event,result);
    }
    
    if (collectResults)
    {
      if (getResult()==null)
      { setResult(new ArrayList<Tresult>());
      }
      getResult().add((Tresult) result);
    }
  }

  @Override
  public void taskCompleted(
    TaskEvent event)
  { 
    
  }

  @Override
  public void taskStarted(
    TaskEvent event)
  {
    
  }

  @Override
  public void taskThrewException(
    TaskEvent event,
    Exception exception)
  { 
//    if (getTarget().getLogTaskResults())
//    {
      getTarget().logTaskException(event,exception);
//    }
    
  }
  
}
