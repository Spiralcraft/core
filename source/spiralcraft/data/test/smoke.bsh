import spiralcraft.data.Type;
import spiralcraft.data.Order;

import spiralcraft.data.query.Scan;

import spiralcraft.data.access.SerialCursor;

import spiralcraft.data.xml.XmlQueryable;

import spiralcraft.lang.Focus;
import spiralcraft.lang.SimpleFocus;

var stdType(String localName)
{ return Type.resolve("class:/spiralcraft/data/types/standard/"+localName);
}

dumpQuery(SerialCursor cursor)
{
  while (cursor.dataNext())
  { print(cursor.dataGetTuple().toText("   "));
  }
}

dumpQueryField(SerialCursor cursor,String fieldName)
{
  while (cursor.dataNext())
  { print(cursor.dataGetTuple().get(fieldName));
  }
}

show();
"";
"";
"/////////////////////////////////////////////////////////////////////";
"//";
"// spiralcraft.data";
"//";
"/////////////////////////////////////////////////////////////////////";
"";
tr=typeResolver=spiralcraft.data.TypeResolver.getTypeResolver();

"";
"/////////////////////////////////////////";
"//";
"// Basic types";
"//";
"";
t=stdType("Boolean");
t.toString(true);
t.fromString("true");
"-------------";
t=stdType("String");
t.toString("test");
t.fromString("test");
"-------------";
t=stdType("Character");
t.toString('a');
t.fromString("a");
"-------------";
t=stdType("Byte");
t.toString(Byte.parseByte("127"));
t.fromString("127");
"-------------";
t=stdType("Short");
t.toString(Short.parseShort("12345"));
t.fromString("12345");
"-------------";
t=stdType("Integer");
t.toString(Integer.parseInt("12345"));
t.fromString("12345");
"-------------";
t=stdType("Long");
t.toString(Long.parseLong("12345"));
t.fromString("12345");
"-------------";
t=stdType("Float");
t.toString(Float.parseFloat("12345.6789"));
t.fromString("12345.6789");
"-------------";
t=stdType("Double");
t.toString(Double.parseDouble("12345.6789"));
t.fromString("12345.6789");
"-------------";
t=stdType("BigDecimal");
t.toString(new java.math.BigDecimal("12345.6789"));
t.fromString("12345.6789");

"";
"/////////////////////////////////////////";
"//";
"// Reflection Type of an Object (so we can parameterize a BigDecimal with a";
"//   specific precision and scale";
"//";
"";
t=stdType("BigDecimalType.type");

"";
"/////////////////////////////////////////";
"//";
"// Subclassed ReflectionType";
"//";
"";
t=typeResolver.resolve(URI.create("class:/java/awt/Rectangle"));
t.getScheme();
t.getArchetype().getScheme();
t.getArchetype().getArchetype().getScheme();

"";
"/////////////////////////////////////////";
"//";
"// Raw XML Reading- String";
"//";
"";
result=new spiralcraft.data.sax.DataReader().readFromURI
  (URI.create("class:/spiralcraft/data/test/1.data.xml")
  ,typeResolver.resolve(URI.create("class:/spiralcraft/data/types/standard/String"))
  );
result.getClass();


"";
"/////////////////////////////////////////";
"//";
"// Raw XML Reading- BigDecimal";
"//";
"";
result=new spiralcraft.data.sax.DataReader().readFromURI
  (URI.create("class:/spiralcraft/data/test/2.data.xml")
  ,typeResolver.resolve(URI.create("class:/spiralcraft/data/types/standard/BigDecimal"))
  );
result.getClass();

"";
"/////////////////////////////////////////";
"//";
"// Object construction using BuilderType";
"//";
"";
type=typeResolver
	.resolve(URI.create("class:/spiralcraft/builder/test/SimpleWidget.assy"));

"";
"/////////////////////////////////////////";
"//";
"// Raw XML Reading- External Bean";
"//";
"";
result=new spiralcraft.data.sax.DataReader().readFromURI
  (URI.create("class:/spiralcraft/data/test/3.data.xml")
  ,type
  );
result.toText("|  ");


"";
"/////////////////////////////////////////";
"//";
"// Convert to Assembly";
"//";
"";

resultAssembly=type.fromData(result,null);
resultObject=resultAssembly.get();
resultObject.getClass();

"";
"/////////////////////////////////////////";
"//";
"// Convert back to data";
"//";
"";

tuple=type.toData(resultAssembly);
tuple.toText("|  ");

"";
"/////////////////////////////////////////";
"//";
"// Write to XML";
"//";
"";

out = new ByteArrayOutputStream();
new spiralcraft.data.sax.DataWriter().writeToOutputStream(out,tuple);

System.out.write(out.toByteArray());

"";
"/////////////////////////////////////////";
"//";
"// Read back in";
"// Raw XML Reading- External Bean";
"//";
"";

result=new spiralcraft.data.sax.DataReader().readFromInputStream
  (new ByteArrayInputStream(out.toByteArray())
  ,type
  ,null
  );
result.toText("|  ");

"";
"/////////////////////////////////////////";
"//";
"// Convert to Assembly";
"//";
"";


resultAssembly=type.fromData(result,null);
resultObject=resultAssembly.get();
resultObject.getClass();

"//";
"// Object construction using builder type complete";
"//";
"/////////////////////////////////////////";


"";
"/////////////////////////////////////////";
"//";
"// Test primitive ProtoType";
"//";
"";
result=new spiralcraft.data.sax.DataReader().readFromURI
  (URI.create("class:/spiralcraft/data/test/4.data.xml")
  ,typeResolver.resolve(URI.create("class:/spiralcraft/data/types/standard/String"))
  );
result.getClass();

"";
"/////////////////////////////////////////";
"//";
"// Test custom Scheme- 'Customer' data";
"//";
"";
customerType=typeResolver.resolve(URI.create("class:/spiralcraft/data/test/example/Customer"));
result=new spiralcraft.data.sax.DataReader().readFromURI
  (URI.create("class:/spiralcraft/data/test/5.data.xml")
  ,customerType
  );
result.toText("|  ");

"";
"/////////////////////////////////////////";
"//";
"// Test custom Scheme- 'Customer' list";
"//";
"";
customerListType=typeResolver.resolve(URI.create("class:/spiralcraft/data/test/example/Customer.list"));
dataReader=new spiralcraft.data.sax.DataReader();
result=dataReader.readFromURI
  (URI.create("class:/spiralcraft/data/test/example/Customer.data.xml")
  ,customerListType
  );
result.toText("|  ");

"";
"/////////////////////////////////////////";
"//";
"// Test DataConsumer XML push";
"//";
"";

dataReader=new spiralcraft.data.sax.DataReader();
dataReader.setDataConsumer(new spiralcraft.data.util.DebugDataConsumer());
dataReader.readFromURI
  (URI.create("class:/spiralcraft/data/test/example/Customer.data.xml")
  ,customerListType
  );

"";
"/////////////////////////////////////////";
"//";
"// Test Queries";
"//";
"";
Focus focus=new SimpleFocus(null);

queryable=new XmlQueryable
        (Type.getAggregateType(customerType)
        ,URI.create("class:/spiralcraft/data/test/example/Customer.data.xml")
        );

"// Scan";
boundQuery = 
        queryable.query(new Scan(customerType),focus);
dumpQuery(boundQuery.execute());

"// Sort by String";
boundQuery = 
  queryable.query
    (new Scan(customerType)
      .sort(new Order(new String[]{"displayName"}))
    ,focus
    );
dumpQueryField(boundQuery.execute(),"displayName");
    
"// Sort by String descending";
boundQuery = 
  queryable.query
    (new Scan(customerType)
      .sort(new Order(new String[]{"-displayName"}))
    ,focus
    );
dumpQueryField(boundQuery.execute(),"displayName");

"// Sort by Integer";
boundQuery = 
  queryable.query
    (new Scan(customerType)
      .sort(new Order(new String[]{"id"}))
    ,focus
    );
dumpQueryField(boundQuery.execute(),"id");

"// Sort by Integer descending";
boundQuery = 
  queryable.query
    (new Scan(customerType)
      .sort(new Order(new String[]{"-id"}))
    ,focus
    );
dumpQueryField(boundQuery.execute(),"id");

"";
"// Sort by Float";
boundQuery = 
  queryable.query
    (new Scan(customerType)
      .sort(new Order(new String[]{"score"}))
    ,focus
    );
dumpQueryField(boundQuery.execute(),"score");

"";
"// Sort by Float descending";
boundQuery = 
  queryable.query
    (new Scan(customerType)
      .sort(new Order(new String[]{"-score"}))
    ,focus
    );
dumpQueryField(boundQuery.execute(),"score");

"";
"/////////////////////////////////////////";
"//";
"// Test DataSession buffering- simple mode";
"//";
"";

rootFocus
  =new spiralcraft.lang.reflect.BeanFocus
    (spiralcraft.data.session.DataSession.class,null);

focus=new spiralcraft.data.session.DataSessionFocus
	(rootFocus,rootFocus.getSubject(),null);
	
rootFocus.getSubject().set(focus.newDataSession());
focus.initializeDataSession();


queryable=new XmlQueryable
	(Type.getAggregateType(customerType)
	,URI.create("class:/spiralcraft/data/test/example/Customer.data.xml")
	);

boundQuery = 
	queryable.query(new Scan(customerType),focus);

bAchannel=boundQuery.bind().buffer(focus);
bAchannel.get();



cursor
	=boundQuery.execute();
cursor.getResultType();
cursor;
	
tChannel=cursor.bind();
bTchannel=cursor.bind().buffer(focus);

	
cursor.dataNext();
tChannel.get();
bTchannel.get();

cursor.dataNext();
tChannel.get();
bTchannel.get();

cursor.dataNext();
tChannel.get();
bTchannel.get();

cursor.dataPrevious();
tChannel.get();
bTchannel.get();

cursor.dataPrevious();
tChannel.get();
bTchannel.get();

"";
"/////////////////////////////////////////";
"//";
"// Self referential";
"//";
"";

nodeType=spiralcraft.data.Type.resolve
	("class:/spiralcraft/data/test/example/Node");



"";
"//";
"// END spiralcraft.data";
"//";
"/////////////////////////////////////////";
"";
