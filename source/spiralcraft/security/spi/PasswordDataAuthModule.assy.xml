<sspi:DataAuthModule
  xmlns:auth="class:/spiralcraft/security/auth/"
  xmlns:sspi="class:/spiralcraft/security/spi/"
  xmlns:j="class:/java/lang/"
  xmlns:query="class:/spiralcraft/data/query/"
  xmlns:codec="class:/spiralcraft/codec/text/"
  >
  
  <acceptedCredentials>
    <j:Class>spiralcraft.security.auth.UsernameCredential
    </j:Class>
    <j:Class>spiralcraft.security.auth.PasswordCleartextCredential
    </j:Class>
    <j:Class>spiralcraft.security.auth.DigestCredential
    </j:Class>
    <j:Class>spiralcraft.security.auth.ChallengeCredential
    </j:Class>
  </acceptedCredentials>
  
  <accountQuery 
    x="[*query:Selection
         {[*query:Scan{accountDataType}]
         ,`.searchname==UsernameCredential.toLowerCase()`
         }
       ]
      "
  />
  
  <credentialValidators>
    <!-- Standard validator for challenge-hashed salt-hashed password -->
    <sspi:BasicCredentialValidator>
      <whenX>
        ChallengeCredential!=null &amp;&amp; ChallengeCredential.length() &gt; 0
        &amp;&amp; DigestCredential!=null 
        &amp;&amp; .digestpass!=null 
      </whenX>

      <validationX>
        [auth:AuthSession].digest
          (ChallengeCredential+[@codec:HexCodec].@decodeHex(.digestpass))
          .equals(DigestCredential)
      </validationX>    
    </sspi:BasicCredentialValidator>

    <!-- For test and internal use -->
    <sspi:BasicCredentialValidator>
      <whenX>
        ( ChallengeCredential==null || ChallengeCredential.length()==0 )
        &amp;&amp; DigestCredential!=null 
        &amp;&amp; .digestpass!=null 
      </whenX>

      <validationX>
        [@codec:HexCodec].@decodeHex(.digestpass)
          .equals(DigestCredential)
      </validationX>
    </sspi:BasicCredentialValidator>
    
    <!-- For test use : cleartext login against cleartext data -->
    <sspi:BasicCredentialValidator>
      <whenX>
        PasswordCleartextCredential!=null 
        &amp;&amp; .clearpass!=null
        &amp;&amp; .digestpass==null 
      </whenX>

      <validationX>
        .clearpass==PasswordCleartextCredential      
      </validationX>    
    </sspi:BasicCredentialValidator>
  
    <!-- For test use : digest login against dev data with challenge -->
    <sspi:BasicCredentialValidator>
      <whenX>
        DigestCredential!=null 
        &amp;&amp; ChallengeCredential!=null &amp;&amp; ChallengeCredential.length() &gt; 0
        &amp;&amp; .clearpass!=null
        &amp;&amp; .digestpass==null 
      </whenX>

      <validationX>
        DigestCredential.equals
        ([auth:AuthSession].digest
           (ChallengeCredential
           +[@codec:HexCodec].@encodeHex
              ([auth:AuthSession].saltedDigest(.searchname+.clearpass))
           )
        )
      </validationX>    
    </sspi:BasicCredentialValidator>

    <!-- For test use : digest login against dev data without challenge -->
    <sspi:BasicCredentialValidator>
      <whenX>
        DigestCredential!=null 
        &amp;&amp; ( ChallengeCredential==null || ChallengeCredential.length()==0 )
        &amp;&amp; .clearpass!=null
        &amp;&amp; .digestpass==null 
      </whenX>

      <validationX>
        DigestCredential.equals
        ([auth:AuthSession].saltedDigest(.searchname+.clearpass)
        )
      </validationX>    
    </sspi:BasicCredentialValidator>

    <!-- For test use : cleartext login against digest data -->
    <sspi:BasicCredentialValidator>
      <whenX>
        PasswordCleartextCredential!=null 
        &amp;&amp; .digestpass!=null 
      </whenX>

      <validationX>
        [@codec:HexCodec].@decodeHex(.digestpass)
          .equals
            ([auth:AuthSession].saltedDigest
              (.searchname+PasswordCleartextCredential)
            )
      </validationX>    
    </sspi:BasicCredentialValidator>



  
  </credentialValidators>

</sspi:DataAuthModule>