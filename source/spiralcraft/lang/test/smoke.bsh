show();
import spiralcraft.lang.test.Evaluator;
"Basic Ops";
"--Get class from an Object";
Evaluator.parseAndEvaluateObject("class",new Object());
Evaluator.parseAndEvaluateObject("\"XXX\".getClass().toString().length()",new Object());
"--Get hashCode from an Object";
Evaluator.parseAndEvaluateObject(".hashCode()",new Object());
"Boolean Ops (alternating pattern)";
Evaluator.parseAndEvaluateObject(".equals(true)",Boolean.FALSE);
Evaluator.parseAndEvaluateObject(".equals(false)",Boolean.FALSE);
Evaluator.parseAndEvaluateObject(".equals(false) && .equals(true)",Boolean.FALSE);
Evaluator.parseAndEvaluateObject(".equals(false) && .equals(false)",Boolean.FALSE);
Evaluator.parseAndEvaluateObject(".equals(true) || .equals(true)",Boolean.FALSE);
Evaluator.parseAndEvaluateObject(".equals(true) || .equals(false)",Boolean.FALSE);
Evaluator.parseAndEvaluateObject(".equals(false) ^ .equals(false)",Boolean.FALSE);
Evaluator.parseAndEvaluateObject(".equals(true) ^ .equals(false)",Boolean.FALSE);
Evaluator.parseAndEvaluateObject(".equals(\"test\")","not test");
Evaluator.parseAndEvaluateObject(".equals(\"test\")","test");
Evaluator.parseAndEvaluateObject("!.equals(\"test\")","test");
"String ops";
Evaluator.parseAndEvaluateObject(".length()","initial");
Evaluator.parseAndEvaluateObject("\"[\"+.toString()+\"]\"","bracketed");
Evaluator.parseAndEvaluateObject(".substring(1,.length()-1)","[unbracketed]");
"Array ops";
array=new String[] {"zero","one","two"};
Evaluator.parseAndEvaluateObject(".[0]",array);
Evaluator.parseAndEvaluateObject(".[1]",array);
Evaluator.parseAndEvaluateObject(".[2]",array);
Evaluator.parseAndEvaluateObject(".[3-1]",array);
Evaluator.parseAndEvaluateObject(".[0+1]",array);
Evaluator.parseAndEvaluateObject(".[5*0]",array);
array=new String[][] {{"zero","one","two"},{"three","four","five"},{"six","seven","eight"}};
Evaluator.parseAndEvaluateObject(".[0].length",array);
Evaluator.parseAndEvaluateObject(".[1].length",array);
Evaluator.parseAndEvaluateObject(".[2].length",array);
Evaluator.parseAndEvaluateObject(".[0][0]",array);
Evaluator.parseAndEvaluateObject(".[1][1]",array);
Evaluator.parseAndEvaluateObject(".[2][2]",array);
Evaluator.parseAndEvaluateObject(".[0][0].length()",array);
Evaluator.parseAndEvaluateObject(".[1][1].length()",array);
Evaluator.parseAndEvaluateObject(".[2][2].length()",array);

"==";
Evaluator.parseAndEvaluateObject("1==1",new Object());
Evaluator.parseAndEvaluateObject("1==2",new Object());
Evaluator.parseAndEvaluateObject(".hashCode()==.hashCode()",new Object());
Evaluator.parseAndEvaluateObject(".hashCode()==1",new Object());
Evaluator.parseAndEvaluateObject("-.hashCode()==-.hashCode()",new Object());

"// Meta operator";
//Evaluator.parseAndEvaluateObject(".!",new Object());
//Evaluator.parseAndEvaluateObject(".class.name!",new Object());
//Evaluator.parseAndEvaluateObject(".hashCode()!",new Object());

"// Self operator";
Evaluator.parseAndEvaluateObject(".concat(.)","test");


"// ExpressionResolverTest";
import spiralcraft.lang.test.ExpressionResolverTest;
"//// Perf 1: retrieval";
ExpressionResolverTest.main
	(new String[] 
		{"-expression","test"
		,"-bindRepeats","1000000"
		,"-getRepeats","1000000"
		}
  );
"//// Perf 2: reflect";
ExpressionResolverTest.main
	(new String[] 
		{"-expression","test.length()"
		,"-bindRepeats","1000"
		,"-getRepeats","1000000"
		}
  );
"//// Perf 3: reflect+compare";
ExpressionResolverTest.main
	(new String[] 
		{"-expression","test.length()>2"
		,"-bindRepeats","1000"
		,"-getRepeats","1000000"
		}
  );
"//// Perf 4: reflect+compare+add";
ExpressionResolverTest.main
	(new String[] 
		{"-expression","test.length()>(2+2)"
		,"-bindRepeats","1000"
		,"-getRepeats","1000000"
		}
  );








