<test:TestGroup
  xmlns:task="class:/spiralcraft/task/"
  xmlns:test="class:/spiralcraft/test/"
  xmlns:j="class:/java/lang/"
  xmlns:jnet="class:/java/net/"
  xmlns:ju="class:/java/util/"
  xmlns:lang="class:/spiralcraft/lang"
  xmlns:fn="class:/spiralcraft/lang/functions/"
  xmlns:util="class:/spiralcraft/util/"
  xmlns:sutil="class:/spiralcraft/util/string/"
  xmlns:vfs="class:/spiralcraft/vfs/"
  xmlns:vfsm="class:/spiralcraft/vfs/meta/"
  xmlns:vfsc="class:/spiralcraft/vfs/context/"
  xmlns:vfst="class:/spiralcraft/vfs/test/"
  xmlns:vfstask="class:/spiralcraft/vfs/task/"
  xmlns:vfilt="class:/spiralcraft/vfs/filters/"  
  xmlns:vfsfn="class:/spiralcraft/vfs/functions/"  
  xmlns:io="class:/java/io/"
  xmlns="dynamic:/"
  >
  <name>spiralcraft.vfs.test
  </name>
  
  <sequence>
 

    <test:Assertion>
    
      <name>resource entry
      </name>
      
      <subjectX>
        [*vfsm:ResourceToEntry]
          .(root:=[@vfs:Resolver].@getInstance().resolve([*jnet:URI{"."}]).URI
            ,resource:=[@vfs:Resolver].@getInstance().resolve([*jnet:URI{"in/io"}])
          )
      </subjectX>
      
      <testX>.container 
        &amp;&amp; 
          !.path.absolute  
        &amp;&amp; 
          .path.path=="in/io"
        
      </testX>
      
    </test:Assertion>
    
    <test:Assertion>
    
      <name>resource snapshot
      </name>
      
      <subjectX>
        [@vfs:Resolver].@getInstance().resolve(".")
          .[*vfsm:TreeSnapshot].(excludes:=[@j:String][{"CVS",".svn","log"}])
          #{.path}
      </subjectX>
      
      <testX>@size>10 &amp;&amp; @[.path=="out/data/store/Customer.data.xml"].@size==1
      </testX>
      
    </test:Assertion>

    <test:Assertion>
    
      <name>mirror
      </name>
      
      <subjectX>
        [*vfst:TestMirror]
        {[@vfs:Resolver].@getInstance().resolve("out/mirror").ensureContainer()
          ,.start()
          ,.stop()
          ,.
        }
        
      </subjectX>
      
      <testX>
      [@vfs:Resolver].@getInstance()
        { .resolve("out/mirror/data/store/Customer.data.xml").lastModified
            ==.resolve("out/data/store/Customer.data.xml").lastModified
          &amp;&amp;
          .resolve("out/mirror/data/store/Customer.data.xml").lastModified
             &gt; [@ju:Date].().time-10000
        }
        
      </testX>
      
    </test:Assertion>

    <test:Assertion>
    
      <name>last modified
      </name>
      
      <subjectX>
        [@vfs:Resolver].@getInstance().resolve(".")
          .[*vfsm:TreeSnapshot].(excludes:=[@j:String][{"CVS",".svn","log"}])
          $[.lastModified.[*fn:Max]]
      </subjectX>
      
      <testX>.>[@ju:Date].().time-1000
      </testX>
      
    </test:Assertion>
    
    <test:Assertion>
    
      <name>pattern1
      </name>
      
      <subjectX>
        [*vfilt:PatternFilter{"**/CVS/*"}]
          .accept([@vfs:Resolver].@getInstance().resolve("./x/CVS/Entries"))
      </subjectX>
      
      <testX>.
      </testX>
      
    </test:Assertion>
    
    <test:Assertion>
    
      <name>pattern2
      </name>
      
      <subjectX>
        [*vfilt:PatternFilter{"**/CVS/*"}]
          .accept([@vfs:Resolver].@getInstance().resolve("./x/y/CVS/Entries"))
      </subjectX>
      
      <testX>.
      </testX>
      
    </test:Assertion>
    
    <test:Assertion>
    
      <name>pattern3
      </name>
      
      <subjectX>
        [*vfilt:PatternFilter{"**/CVS/*"}]
          .accept([@vfs:Resolver].@getInstance().resolve("/x/y/CVS/Entries"))
      </subjectX>
      
      <testX>.
      </testX>
      
    </test:Assertion>     
       
    <test:Assertion>
    
      <name>pattern4
      </name>
      
      <subjectX>
        [*vfilt:PatternFilter{"**/CVS/*"}]
          .accept([@vfs:Resolver].@getInstance().resolve("CVS/Entries"))
      </subjectX>
      
      <testX>.
      </testX>
      
    </test:Assertion>    
    
    <test:Assertion>
    
      <name>pattern5
      </name>
      
      <subjectX>
        [*vfilt:PatternFilter{"**/.cvsignore"}]
          .accept([@vfs:Resolver].@getInstance().resolve("logs/.cvsignore"))
      </subjectX>
      
      <testX>.
      </testX>
      
    </test:Assertion> 
    
    <test:Assertion>
      <name>Winpath drive letter
      </name>
    
      <subjectX>
        [*jnet:URI{"file:/C:/a/b/c/"}].resolve([*jnet:URI{"file:/D:/e/f/g/"}])
      </subjectX>
      <testX>true
      </testX>
    </test:Assertion>   

    <test:Assertion>
      <name>Builder dir
      </name>
    
      <subjectX>
        [*jnet:URI{"${spiralcraft.builder.dir}"}]
      </subjectX>
      <testX>.==[*jnet:URI{"/spiralcraft/vfs/test/"}]
      </testX>
    </test:Assertion>   

    <test:Assertion>
      <name>Builder uri
      </name>
    
      <subjectX>
        [*jnet:URI{"${spiralcraft.builder.dir.URI}"}]
      </subjectX>
      <testX>.==[*jnet:URI{"class:/spiralcraft/vfs/test/"}]
      </testX>
    </test:Assertion>   

    <test:Assertion>
      <name>Scan
      </name>
    
      <subjectX>
        [*vfstask:Scan
          {rootURI:=[*jnet:URI{"."}]
          }
        ].()
      </subjectX>
      <testX>true
      </testX>
    </test:Assertion>   

    <test:Assertion>
      <name>Escape URI to file
      </name>
    
      <subjectX>
        [*jnet:URI{"file:/c/tmp/file%20name.txt"}].[*vfsfn:Resolve]
      </subjectX>
      <testX>.URI.path=="/c/tmp/file name.txt"
      </testX>
    </test:Assertion>   
 
    <test:Assertion>
      <name>Escape context URI
      </name>
    
      <subjectX>
        [*jnet:URI{"context:/file%20name.txt"}].[*vfsfn:Resolve]
      </subjectX>
      <testX>.URI.path.endsWith("file name.txt")
      </testX>
    </test:Assertion>   

  </sequence>
</test:TestGroup>
