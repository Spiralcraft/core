<test:TestGroup
  xmlns:task="class:/spiralcraft/task/"
  xmlns:test="class:/spiralcraft/test/"
  xmlns:j="class:/java/lang/"
  xmlns:ju="class:/java/util/"
  xmlns:lang="class:/spiralcraft/lang"
  >
  <name>spiralcraft.lang.test
  </name>
  
  <chain>
 
    <task:Sequence>
      <scenarios>
    
        <test:Assertion>
        
          <name>add
          </name>
          
          <subjectX>1+1
          </subjectX>
          
          <testX>.==2
          </testX>
          
        </test:Assertion>
          
        <test:Assertion>
        
          <name>Number method
          </name>
          
          <subjectX>(1+1).floatValue()
          </subjectX>
          
          <testX>.==2.0.floatValue()
          </testX>
          
        </test:Assertion>

        <test:Assertion>
        
          <name>array construct- Integer
          </name>
          
          <subjectX>[@j:Integer][{1,2,3}]
          </subjectX>
          
          <testX>.length==3 &amp;&amp; 
                .[0]==1 &amp;&amp; 
                .[1]==2 &amp;&amp; 
                .[2]==3
          </testX>
          
        </test:Assertion>
        
        <test:Assertion>
        
          <name>array equals- Integer
          </name>
          
          <subjectX>[@j:Integer][{1,2,3}] == [@j:Integer][{1,2,3}]
          </subjectX>
          
          <testX>.
          </testX>
          
        </test:Assertion>

        <test:Assertion>
        
          <name>array equals- Integer- negative
          </name>
          
          <subjectX>[@j:Integer][{1,2,3}] == [@j:Integer][{1,2,4}]
          </subjectX>
          
          <testX>!.
          </testX>
          
        </test:Assertion>
        
        <test:Assertion>
        
          <name>array not equals- Integer
          </name>
          
          <subjectX>[@j:Integer][{1,2,3}] != [@j:Integer][{1,2,4}]
          </subjectX>
          
          <testX>.
          </testX>
          
        </test:Assertion>

        <test:Assertion>
        
          <name>array not equals- Integer- negative
          </name>
          
          <subjectX>[@j:Integer][{1,2,3}] != [@j:Integer][{1,2,3}]
          </subjectX>
          
          <testX>!.
          </testX>
          
        </test:Assertion>

        <test:Assertion>
        
          <name>contains
          </name>
          
          <subjectX>[@j:Integer][{1,2,3}] ?= 2
          </subjectX>
          
          <testX>.
          </testX>
          
        </test:Assertion>
          

        <test:Assertion>
        
          <name>contains (neg)
          </name>
          
          <subjectX>[@j:Integer][{1,2,3}] ?= 4
          </subjectX>
          
          <testX>!.
          </testX>
          
        </test:Assertion>


        <test:Assertion>
        
          <name>array @top
          </name>
          
          <subjectX>[@j:Integer][{1,2,3}].@top
          </subjectX>
          
          <testX>.==1
          </testX>
          
        </test:Assertion>
        
        <test:Assertion>
        
          <name>array @top null
          </name>
          
          <subjectX>[@j:Integer][{}].@top
          </subjectX>
          
          <testX>.==null
          </testX>
          
        </test:Assertion>

        <test:Assertion>
        
          <name>array aggregate projection
          </name>
          
          <subjectX>
               [@j:String][{"one","two","three"}]#{.length()}
                  .equals( [@:class:/java/lang/Integer][{3,3,5}] )
          </subjectX>
          
          <testX>true
          </testX>
          
        </test:Assertion>
   
        <test:Assertion>
        
          <name>array aggregate tuple projection 1
          </name>
          
          <subjectX>
            [@j:String][{"one","two","three"}]
                #{{x:=..length(),y:=..hashCode()}}.@top.x
          </subjectX>
          
          <testX>.==3
          </testX>
          
        </test:Assertion>

        <test:Assertion>
        
          <name>array aggregate tuple projection 2
          </name>
          
          <subjectX>
            [@j:String][{"one","two","three"}]
                #{{x:=..length(),y:=..hashCode()}}[2].x
          </subjectX>
          
          <testX>.==5
          </testX>
          
        </test:Assertion>
        
        <test:Assertion>
        
          <name>Index in aggregate projection
          </name>
          
          <subjectX>
            [@j:String][{"one","two","three"}]
                #{[lang:IterationCursor].index}
          </subjectX>
          
          <testX>.==[@j:Integer][{0,1,2}]
          </testX>
          
        </test:Assertion>           
        
        <test:Assertion>
        
          <name>array inclusive range 1
          </name>
          
          <subjectX>[@j:String][{"one","two","three","four","five"}][1..3]
          </subjectX>
          
          <testX>
                         .[0]=="two" 
             &amp;&amp; .[1]=="three"
             &amp;&amp; .[2]=="four"
             &amp;&amp; .length==3
          </testX>
          
        </test:Assertion>

        <test:Assertion>
        
          <name>array inclusive range 2
          </name>
          
          <subjectX>[@j:String][{"one","two","three","four","five"}][1..10]
          </subjectX>
          
          <testX>
                         .[0]=="two" 
             &amp;&amp; .[1]=="three"
             &amp;&amp; .[2]=="four"
             &amp;&amp; .[3]=="five"
             &amp;&amp; .length==4
          </testX>
          
        </test:Assertion>

        <test:Assertion>
        
          <name>array exclusive range 1
          </name>
          
          <subjectX>[@j:String][{"one","two","three","four","five"}][1..3]
          </subjectX>
          
          <testX>
                        .[0]=="two" 
             &amp;&amp; .[1]=="three"
             &amp;&amp; .[2]=="four"
             &amp;&amp; .length==3
          </testX>
          
        </test:Assertion>

        <test:Assertion>
        
          <name>array exclusive range 2
          </name>
          
          <subjectX>[@j:String][{"one","two","three","four","five"}][1.!4]
          </subjectX>
          
          <testX>
                        .[0]=="two" 
             &amp;&amp; .[1]=="three"
             &amp;&amp; .[2]=="four"
             &amp;&amp; .length==3
          </testX>
          
        </test:Assertion>

<!-- 
-->
        <test:Assertion>
        
          <name>tuple projection 1
          </name>
          
          <subjectX>
            "one"
              {{x:=..length(),y:=..hashCode(),z:[@j:Integer],r:=.z=.x*3}}
                {{m:=..r,n:=..z}}
                  {{x:=..m*..n}}.x
          </subjectX>
          
          <testX>.==81
          </testX>
          
        </test:Assertion>
<!--
-->
        <test:Assertion>
        
          <name>Identity projection
          </name>
          
          <subjectX>
            "one"{.}
          </subjectX>
          
          <testX>.=="one"
          </testX>
          
        </test:Assertion>

        <test:Assertion>
        
          <name>Extended identity projection
          </name>
          
          <subjectX>
            "one"{{x:=.., y:=.x.length()}}
          </subjectX>
          
          <testX>.x=="one" &amp;&amp; .y==3
          </testX>
          
        </test:Assertion>

        <test:Assertion>
        
          <name>Tuple and assignments
          </name>
          
          <subjectX>
            "hello"
              {{[#test:MyTuple]
                  x:[@j:String]
                  , y:[@j:Integer]
                  ,.x=..
                  ,.y=.x.length() 
              }}
          </subjectX>
          
          <testX>x=="hello" &amp;&amp; y==5
          </testX>
          
        </test:Assertion>                
        
        <test:Assertion>
        
          <name>Log channel
          </name>
          
          <subjectX>
            "one".@log("Testing LogChannel- result is ["+.+"]")
          </subjectX>
          
          <testX>.=="one"
          </testX>
          
        </test:Assertion>        

        <test:Assertion>
        
          <name>Tune channel
          </name>
          
          <subjectX>
            "one".@tune("Testing TuneChannel- result is ["+.+"]")
          </subjectX>
          
          <testX>.=="one"
          </testX>
          
        </test:Assertion>        

        <test:Assertion>
        
          <name>New date
          </name>
          
          <subjectX>
            [@ju:Date].()
          </subjectX>
          
          <testX>.!=null
          </testX>
          
        </test:Assertion>        

        <test:Assertion>
        
          <name>New dates
          </name>
          
          <subjectX>
            [@ju:Date]{ [@ju:Date][{.(10000000000L),.(10000000001L)}] }
          </subjectX>
          
          <testX>.[0].getTime() &lt; .[1].getTime()
          </testX>
          
        </test:Assertion>        

        <test:Assertion>
        
          <name>Same dates
          </name>
          
          <subjectX>
            [*ju:Date]{ [@ju:Date][{.,.}] }
          </subjectX>
          
          <testX>.[0].getTime() == .[1].getTime() &amp;&amp; .[0].getTime() > 0L
          </testX>
          
        </test:Assertion>        

        <test:Assertion>
        
          <name>Debug task in expression
          </name>
          
          <subjectX>
            [*ju:Date]
            { 
              [*task:Debug
                {messageX:=[ju:Date].class.name
                ,debug:=true
                }
              ].()
            }
          </subjectX>
          
          <testX>.=="java.util.Date"
          </testX>
          
        </test:Assertion>        

      </scenarios>
      
    </task:Sequence>
  </chain>
        
</test:TestGroup>
