<test:TestGroup
  xmlns:task="class:/spiralcraft/task/"
  xmlns:test="class:/spiralcraft/test/"
  xmlns:j="class:/java/lang/"
  xmlns:ju="class:/java/util/"
  xmlns:jn="class:/java/net/"
  xmlns:jt="class:/java/text/"
  xmlns:jio="class:/java/io/"
  xmlns:lang="class:/spiralcraft/lang"
  xmlns:fn="class:/spiralcraft/lang/functions/"
  xmlns:util="class:/spiralcraft/util/"
  xmlns:sutil="class:/spiralcraft/util/string/"
  xmlns:text="class:/spiralcraft/text/"
  xmlns:html="class:/spiralcraft/text/html/"
  xmlns="dynamic:/"
  >
  <name>spiralcraft.text.test
  </name>
  
  <sequence>

    <test:Assertion>
    
      <name>MessageFormat
      </name>
      
      <subjectX>
        [@jio:StringWriter].()
           { [*text:MessageFormat{"One plus one is {|1+1|}."}].render(.)
           , .
           }
           .toString()
        
      </subjectX>
      
      <testX>
        .=="One plus one is 2."
      </testX>
      
    </test:Assertion>

    <test:Assertion>
    
      <name>Stock URLEncoder.encode
      </name>
      
      <subjectX>
        [@jn:URLEncoder].@encode("This is an encoder test &#x00A9;&#x2211;","UTF-8")
      </subjectX>
      
      <testX>
        .=="This+is+an+encoder+test+%C2%A9%E2%88%91"
      </testX>
      
    </test:Assertion>

    <test:Assertion>
    
      <name>URLDataEncoder.encode
      </name>
      
      <subjectX>
        [@html:URLDataEncoder].@encode("This is an encoder test &#x00A9;&#x2211;")
      </subjectX>
      
      <testX>
        .=="This+is+an+encoder+test+%C2%A9%E2%88%91"
      </testX>
      
    </test:Assertion>

    <test:Assertion>
    
      <name>Stock URLDecoder.decode
      </name>
      
      <subjectX>
        [@jn:URLDecoder].@decode("This+is+an+encoder+test+%C2%A9%E2%88%91","UTF-8")
      </subjectX>
      
      <testX>
        .=="This is an encoder test &#x00A9;&#x2211;"
      </testX>
      
    </test:Assertion>

    <test:Assertion>
    
      <name>URLDataEncoder.encode
      </name>
      
      <subjectX>
        [@html:URLDataEncoder].@decode("This+is+an+encoder+test+%C2%A9%E2%88%91")
      </subjectX>
      
      <testX>
        .=="This is an encoder test &#x00A9;&#x2211;"
      </testX>
      
    </test:Assertion>             
    
    <test:Assertion>
    
      <name>Word tokenizer 1
      </name>
      
      <subjectX>
        [*text:WordTokenizer].tokenize("This is a \"dumb\" word-tokenizer 4u- that's not (*)#&amp;$&amp;!-up.")
      </subjectX>
      
      <testX>
        .==[{"This","is","a","dumb","word","tokenizer","4u","that","s","not","up"}]
      </testX>
      
    </test:Assertion>             
    
    <test:Assertion>
    
      <name>Word tokenizer 2
      </name>
      
      <subjectX>
        [*text:WordTokenizer{ignoreQuotes:=true,includeQuotes:=true}]
          .tokenize("This is a \"dumb\" word-tokenizer 4u- that's not (*)#&amp;$&amp;!-up.")
      </subjectX>
      
      <testX>
        .==[{"This","is","a","\"dumb\"","word","tokenizer","4u","that's","not","up"}]
      </testX>
      
    </test:Assertion>             

    <test:Assertion>
    
      <name>Word tokenizer 3
      </name>
      
      <subjectX>
        [*text:WordTokenizer
          {ignoreQuotes:=true
          ,includeQuotes:=true
          ,includeWhitespace:=true
          ,includePunctuation:=true
          }
        ].tokenize("This is a \"dumb\" word-tokenizer 4u- that's not (*)#&amp;$&amp;!-up.")
      </subjectX>
      
      <testX>
        .==[{"This"," ","is"," ","a"," ","\"dumb\""," ","word","-","tokenizer"," ","4u","-"," ","that's"," ","not"," "
            ,"(","*",")","#","&amp;","$","&amp;","!","-","up","."}]
      </testX>
      
    </test:Assertion>             
  </sequence>
        
</test:TestGroup>
