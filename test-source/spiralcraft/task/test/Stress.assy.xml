<task:Chain
  xmlns:task="class:/spiralcraft/task/"
  xmlns:query="class:/spiralcraft/data/query/"
  xmlns:data="class:/spiralcraft/data/"
  xmlns:sax="class:/spiralcraft/data/sax"
  xmlns:dtask="class:/spiralcraft/data/task/"
  xmlns:dutil="class:/spiralcraft/data/util/"
  xmlns:test="class:/spiralcraft/test/"
  xmlns:dtest="class:/spiralcraft/data/test/"  
  xmlns:example="class:/spiralcraft/data/test/example/"
  xmlns:j="class:/java/lang/"
  xmlns:jnet="class:/java/net/"
  xmlns:sec="class:/spiralcraft/security/"
  xmlns:fn="class:/spiralcraft/lang/functions/"
  >
  <chain>
    <task:Sequence>
      <contextX>
        { [#context] 
          count:=0
          ,increment:~[*task:Eval{`.count=.count+1`}] 
        }
      </contextX>
      
      <scenarios>
        <task:Fork>
          
          <multiplier x="[test:LoadGroup].forkFactor"/>
          
          <scenarios>
          
            <task:Cycle>
            
              <maxCycles x="[test:LoadGroup].cycleFactor"/>
              
              <chain>
                <task:Eval>
                  <x>[context].increment()
                  </x>
                </task:Eval>
              </chain>
            
            </task:Cycle>

            <task:Cycle>
            
              <maxCycles x="[test:LoadGroup].cycleFactor"/>
              
              <chain>
                <task:Eval>
                  <x>[context].increment()
                  </x>
                </task:Eval>
              </chain>
            
            </task:Cycle>                
          </scenarios>
        
        </task:Fork>
        
        <test:Assertion>
          <name>Big race
          </name>
          
          <subjectX>[context].count
          </subjectX>
          <testX>
            .==[test:LoadGroup].forkFactor*[test:LoadGroup].cycleFactor*2
          </testX>
        </test:Assertion>
        
      
      </scenarios>
    
    </task:Sequence>
    
  </chain>
        
</task:Chain>
