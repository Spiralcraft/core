<task:Chain
  xmlns:task="class:/spiralcraft/task/"
  xmlns:query="class:/spiralcraft/data/query/"
  xmlns:dtask="class:/spiralcraft/data/task/"
  xmlns:test="class:/spiralcraft/test/"
  xmlns:example="class:/spiralcraft/data/test/example/"
  xmlns:j="class:/java/lang/"
  xmlns:sec="class:/spiralcraft/security/"
  >
  <chain>
 
    <task:Sequence>
      <scenarios>
    
        <dtask:Fetch>
          
          <query>
            <query:Scan>
              <type x="[@example:Customer].type"/>
            </query:Scan>
          </query>
          
          <chain>
            <test:Stub>
              <name>Scan
              </name>
              <messageX>""+[example:Customer.list].@size()+" results"
              </messageX>
              <conditionX>[example:Customer.list].@size()==3
              </conditionX>
            </test:Stub>
          </chain>
        </dtask:Fetch>

        <dtask:Fetch>
          
          <query>
            <query:Scan>
              <type x="[@example:Customer].type"/>
            </query:Scan>
          </query>
          
          <chain>
            <dtask:Fetch>
              <query>
                <query:ReferenceQuery>
                  <reference>[example:Customer.list]
                  </reference>
                </query:ReferenceQuery>
              </query>
            </dtask:Fetch>
            
            <test:Stub>
              <name>ReferenceQuery
              </name>
              <messageX>""+[example:Customer.list].@size()+" results"
              </messageX>
              <conditionX>[example:Customer.list].@size()==3
              </conditionX>
            </test:Stub>
            
          </chain>
        </dtask:Fetch>

        <dtask:Fetch>
          
          <query>
            <query:SetFilter>
              <filterSetX>[@j:String][{"Nomatch One","Mary Second","Nomatch Two"}]
              </filterSetX>
              
              <searchX>.displayName
              </searchX>
              
              <excludeMatch>false
              </excludeMatch>
              
              <source>
                <query:Scan>
                  <type x="[@example:Customer].type"/>
                </query:Scan>
              </source>
              
            </query:SetFilter>
          </query>
          
          <chain>
            <test:Stub>
              <name>SetFilter
              </name>
              <messageX>""+[example:Customer.list].@size()+" results"
              </messageX>
              <conditionX>[example:Customer.list].@size()==1
              </conditionX>
            </test:Stub>
          </chain>
        </dtask:Fetch>

        <dtask:Fetch>
          
          <query>
            <query:SetFilter>
              <filterSetX>[@j:String][{"Nomatch One","Mary Second","Nomatch Two"}]
              </filterSetX>
              
              <searchX>.displayName
              </searchX>
              
              <excludeMatch>true
              </excludeMatch>
              
              <source>
                <query:Scan>
                  <type x="[@example:Customer].type"/>
                </query:Scan>
              </source>
              
            </query:SetFilter>
          </query>
          
          <chain>
            <test:Stub>
              <name>SetFilter (neg)
              </name>
              <messageX>""+[example:Customer.list].@size()+" results"
              </messageX>
              <conditionX>[example:Customer.list].@size()==2
              </conditionX>
            </test:Stub>
          </chain>
        </dtask:Fetch>
        
        <dtask:Fetch>
          
          <query>
            <query:Join>
              
              <parentQuery>
                <query:Scan>
                  <type x="[@example:Customer].type"/>
                </query:Scan>
              </parentQuery>
              
              <childQuery>
              
                <query:Selection>
                  <constraints>.principalId==id.toString()
                  </constraints>
                  
                  <source>
                    <query:Scan>
                      <type x="[@sec:Login].type"/>
                    </query:Scan>
                  </source>
                  
                </query:Selection>
                
              </childQuery>

            </query:Join>
          </query>
          
          <chain>
            <test:Stub>
              <name>Join
              </name>
              <messageX>""+[sec:Login.list].@size()+" results"
              </messageX>
              <conditionX>[sec:Login.list].@log(.).@size()==2
              </conditionX>
            </test:Stub>
          </chain>
        </dtask:Fetch>
        
        <dtask:Fetch>
          
          <query>
            <query:Projection>
              
              <source>
                <query:Scan>
                  <type x="[@example:Customer].type"/>
                </query:Scan>
              </source>
              
              <x>.address
              </x>

            </query:Projection>
          </query>
          
          <chain>
            <test:Stub>
              <name>Project
              </name>
              <messageX>""+[example:Address.list].@size()+" results"
              </messageX>
              <conditionX>[example:Address.list].@log(.).@size().@log(.)==3
              </conditionX>
            </test:Stub>
          </chain>
        </dtask:Fetch>

        <test:Stub>
          <name>Expression Fetch
          </name>
          <messageX>[*dtask:Fetch
                      {query:=
                        [*query:Scan
                          {[@example:Customer].type
                          }
                        ]
                      }
                    ].().@log("Expression fetch: "+.)
          </messageX>
          <conditionX>true
          </conditionX>
        </test:Stub>

      </scenarios>
      
    </task:Sequence>
  </chain>
        
</task:Chain>
