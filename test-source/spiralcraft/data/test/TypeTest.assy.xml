<task:Sequence
  xmlns:task="class:/spiralcraft/task/"
  xmlns:query="class:/spiralcraft/data/query/"
  xmlns:dtask="class:/spiralcraft/data/task/"
  xmlns:test="class:/spiralcraft/test/"
  xmlns:example="class:/spiralcraft/data/test/example/"
  xmlns:std="class:/spiralcraft/data/types/standard/"
  xmlns:meta="class:/spiralcraft/data/types/meta/"
  xmlns:fn="class:/spiralcraft/lang/functions/"
  xmlns:st="class:/spiralcraft/time/"
  >
 

  <scenarios>

    <test:Stub>
      <name>shortDate
      </name>
      <messageX>[@example:USDate].type.@cast([@std:DateType]).fromString("12/28/2010")
      </messageX>
      <conditionX>[@example:USDate].type.@cast([@std:DateType])
                    .fromString("12/28/2010").toString()
                    { .startsWith("Tue Dec 28 00:00:00")
                      &amp;&amp; .endsWith("2010")
                    }
      </conditionX>
    </test:Stub>

    <task:Eval>
      <x>[@example:Customer].(score:=20.216F)
      </x>
      
      <sequence>
      
        
        <test:Assertion>
          <name>scenario method pre-test
          </name>
          <subjectX>[example:Customer].score
          </subjectX>
          <testX>.==20.216F
          </testX>
        </test:Assertion>

        <task:Eval>
          <x>[example:Customer].score1().@tune("TaskMethod 1")
          </x>
        </task:Eval>

        <test:Assertion>
          <name>scenario method post-test
          </name>
          <subjectX>[example:Customer].score
          </subjectX>
          <testX>.==21.216F
          </testX>
        </test:Assertion>
        
        <task:Eval>
          <x>[example:Customer].score1().@tune("TaskMethod 2")
          </x>
        </task:Eval>

        <test:Assertion>
          <name>scenario method post-test
          </name>
          <subjectX>[example:Customer].score
          </subjectX>
          <testX>.==22.216F
          </testX>
        </test:Assertion>
        
        <task:Eval>
          <x>[example:Customer].score(10).@tune("TaskMethod 3")
          </x>
        </task:Eval>
                    
        <test:Assertion>
          <name>parameterized scenario method post-test
          </name>
          <subjectX>[example:Customer].score
          </subjectX>
          <testX>.==32.216F
          </testX>
        </test:Assertion>


        <test:Assertion>
          <name>calculated field
          </name>
          <subjectX>[example:Customer].computedScore
          </subjectX>
          <testX>.==322.16F
          </testX>
        </test:Assertion>
                    
        <test:Assertion>
          <name>parameterized expression method
          </name>
          <subjectX>[example:Customer].score2(10).@tune("TaskMethod 4")
          </subjectX>
          <testX>.==42.216F
          </testX>
        </test:Assertion>
        
        <test:Assertion>
          <name>Tuple instantiation
          </name>
          
          <subjectX>
            [@example:Customer].(id:=12345){{cust:=.., .cust.score(10) }}.cust
          </subjectX>
        
          <testX>.score==10
          </testX>
        </test:Assertion>
        
        
        <test:Assertion>
          <name>Static fetch
          </name>
          
          <subjectX>
            [@example:Customer].@fetch(2)
          </subjectX>
        
          <testX>.displayName.startsWith("Mary Second")
          </testX>
        </test:Assertion>           
        
        <test:Assertion>
          <name>Field medatadata 1
          </name>
          
          <subjectX>
            [example:Customer].score.[meta:Field].name
          </subjectX>
        
          <testX>.=="score"
          </testX>
        </test:Assertion>   
        
        <test:Assertion>
          <name>Data modification method with return
          </name>
          
          <subjectX>
            [example:Customer].addFact("This is a new fact")
          </subjectX>
        
          <testX>.description=="This is a new fact"
          </testX>
        </test:Assertion>       
 
        <test:Assertion>
          <name>Method call: Two parameters
          </name>
          
          <subjectX>
            [@example:Customer].@testMethod("first","second")
          </subjectX>
        
          <testX>.=="firstsecond"
          </testX>
        </test:Assertion>                  

        <test:Assertion>
          <name>Method call: Null parameter
          </name>
          
          <subjectX>
            [@example:Customer].@testMethod("first",null)
          </subjectX>
        
          <testX>.=="first"
          </testX>
        </test:Assertion>                  

        <test:Assertion>
          <name>Array concat test
          </name>
          
          <subjectX>
            ([*dtask:Fetch{[@example:IntegerNode.list]}].()#{.}
            +[*dtask:Fetch{[@example:StringNode.list]}].()#{.}
            )#{.nodeId}
          </subjectX>
        
          <testX>.==[{"1","2","3","4","5","6"}]
          </testX>
        </test:Assertion>               

        <test:Assertion>
          <name>Array concat in struct
          </name>
          
          <subjectX>
            { combined:=
              [*dtask:Fetch{[@example:IntegerNode.list]}].()#{.}
              +[*dtask:Fetch{[@example:StringNode.list]}].()#{.}
              +[*dtask:Fetch{[@example:IntegerNode.list]}].()#{.}
            }.combined#{.nodeId}
          </subjectX>
        
          <testX>.==[{"1","2","3","4","5","6","1","2","3"}]
          </testX>
        </test:Assertion>               

        <test:Assertion>
          <name>Conditional Array concat
          </name>
          
          <subjectX>
            true
              ?([*dtask:Fetch{[@example:IntegerNode.list]}].()
                 +[*dtask:Fetch{[@example:StringNode.list]}].()
               )#{.}
              :[*dtask:Fetch{[@example:Node.list]}].()#{.}
          </subjectX>
        
          <testX>.#{.nodeId}==[{"1","2","3","4","5","6"}]
          </testX>
        </test:Assertion>    
        
        <test:Assertion>
          <name>Task Method resultX
          </name>
        
          <subjectX>[@example:Customer].().testResultX("the result")
          </subjectX>
        
          <testX>.=="the result"
          </testX>
        </test:Assertion>           

        <test:Assertion>
          <name>Base type method call
          </name>
        
          <subjectX>[@example:IntegerNode].().baseMethod()
          </subjectX>
        
          <testX>.=="base"
          </testX>
        </test:Assertion>           
          
        <test:Assertion>
          <name>TransactionMethod
          </name>
        
          <subjectX>
            [*dtask:Fetch{ [@example:Customer], `.id==1` }].()
            { 
              .updateLastContact([@st:Instant].())
              ,[*dtask:Fetch{ [@example:Customer], `.id==1` }].()
            }
          </subjectX>
        
          <testX>[@st:Instant].().offsetMillis
            -.lastContact.offsetMillis
            &lt;1000
          </testX>
        </test:Assertion>           
            
        <test:Assertion>
          <name>TransactionMethodWithReturn
          </name>
        
          <subjectX>
            [*dtask:Fetch{ [@example:Customer], `.id==1` }].()
              .updateLastContactWithReturn([@st:Instant].())
          </subjectX>
        
          <testX>[@st:Instant].().offsetMillis
            -.offsetMillis &lt; 1000
          </testX>
        </test:Assertion> 
<!--
        <task:Eval>
        
          <x>[@example:Customer].()
          </x>
          
          <sequence>
            <test:Assertion>
              <name>Odd name
              </name>
              
              <subjectX xmlns:ugly="s:/blah/blah/WEB-INF/">
                [ugly:Dummy].[*fn:Try]
              </subjectX>
            
              <testX>true
              </testX>
            </test:Assertion>   
          </sequence>
        
        </task:Eval>
-->            
        <test:Assertion>
          <name>parametric relation type
          </name>
          <subjectX>[@example:GenericList].type
          </subjectX>
          <testX>true
          </testX>
        
        </test:Assertion>
        <test:Assertion>
          <name>parametric relation type
          </name>
          <subjectX>[@example:ToDoList].type.archetype
          </subjectX>
          <testX>true
          </testX>
        
        </test:Assertion>
        <test:Assertion>
          <name>parametric relation type
          </name>
          <subjectX>[@example:ToDoList].().@type.type
          </subjectX>
          <testX>true
          </testX>
        
        </test:Assertion>
        <test:Assertion>
          <name>parametric relation type
          </name>
          <subjectX>[@example:ToDoList].().items.@type
          </subjectX>
          <testX>.==[@example:ToDoListItem.list]
          </testX>
        
        </test:Assertion>
        <test:Assertion>
          <name>parametric relation type
          </name>
          <subjectX>[*dtask:Edit{[@example:ToDoList]}].()
          </subjectX>
          <testX>true
          </testX>
        </test:Assertion>
        <test:Assertion>
          <name>parametric relation type
          </name>
          <subjectX>[*dtask:Edit{[@example:ToDoListItem.list]}].()
          </subjectX>
          <testX>true
          </testX>
        </test:Assertion>
      </sequence>
    </task:Eval>
            
    <test:Assertion>
      <name>Static field
      </name>
      <subjectX>[@example:Customer].@staticContactType
      </subjectX>
      <testX>.=="customer"
      </testX>
    </test:Assertion>     
  </scenarios>
  
</task:Sequence>
