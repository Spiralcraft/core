<task:TaskRunner
  xmlns:task="class:/spiralcraft/task/"
  xmlns:io="class:/spiralcraft/io/"
  xmlns:iotest="class:/spiralcraft/io/test/"
  xmlns:service="class:/spiralcraft/service/"
  xmlns:example="class:/spiralcraft/data/test/example/"
  xmlns:dxml="class:/spiralcraft/data/xml/"
  xmlns:data="class:/spiralcraft/data/"
  xmlns:da="class:/spiralcraft/data/access/"
  xmlns:query="class:/spiralcraft/data/query/"
  xmlns:dtest="class:/spiralcraft/data/test/"
  xmlns:test="class:/spiralcraft/test/"
  xmlns:vfs="class:/spiralcraft/vfs/task/"
  xmlns:fn="class:/spiralcraft/lang/functions/"
  >
  
  <service>
    <data:Space>
      <stores>
        <dxml:XmlStore>
          <name>local
          </name>
          
          <subscriber>
            <dxml:Subscriber>
              <debug>true
              </debug>
            </dxml:Subscriber>
          </subscriber>
          
          <masterURI>class:/spiralcraft/data/test/example/Snapshot.xml
          </masterURI>
          
          <masterRefreshSeconds>30
          </masterRefreshSeconds>
          
          <historyCleanSeconds>5
          </historyCleanSeconds>
                    
          <baseResourceURI>out/data/store/
          </baseResourceURI>
          
          <schema 
            dataURI="example:Example.schema.xml"
          />
          
          <debugLevel>INFO
          </debugLevel>
        </dxml:XmlStore>
        
        <dxml:XmlStore>
          <name>slave
          </name>
          
          <public>false
          </public>          
          
          <historyCleanSeconds>5
          </historyCleanSeconds>
                    
          <baseResourceURI>out/data/store2/
          </baseResourceURI>
          
          <schema 
            dataURI="example:Example.schema.xml"
          />
          
          <debugLevel>INFO
          </debugLevel>
        </dxml:XmlStore>        
      </stores>
    </data:Space>
  </service>
  
  <chain>
    <test:TestGroup>
      <name>spiralcraft-core:smoke
      </name>
      
      <sequence>
            
        <langtest:LangTest
          xmlns:langtest="class:/spiralcraft/lang/test/"
        />
        
        <utiltest:UtilTest
          xmlns:utiltest="class:/spiralcraft/util/test/"
        />
        
        <iotest:RecordIteratorTest>

          <fileURI>in/io/RecordFile.small.log
          </fileURI>
      
        </iotest:RecordIteratorTest>
        
        <vfs:Copy>
          
          <verbose>false
          </verbose>
          
          <sourceResource>class:/spiralcraft/data/test/example
          </sourceResource>
          
          <targetResource>out/copy/
          </targetResource>
        </vfs:Copy>
        
        <vfs:Copy>
          
          <verbose>false
          </verbose>
          
          <sourceResource>in
          </sourceResource>
          
          <targetResource>out/copy/
          </targetResource>
        </vfs:Copy>
                    
        <vfs:Copy>
          
          <verbose>false
          </verbose>
          
          <sourceResource>../test-source
          </sourceResource>
          
          <preserveTime>true
          </preserveTime>
          
          <targetResource>out/copy/test/
          </targetResource>
          
          <pattern>**
          </pattern>
          

        </vfs:Copy>

        <dtest:DataTest/>

        <sectest:AuthTest
          xmlns:sectest="class:/spiralcraft/security/test/"
        />
        
        <tasktest:Smoke
          xmlns:tasktest="class:/spiralcraft/task/test/"
        />

        <vfstest:VfsTest
          xmlns:vfstest="class:/spiralcraft/vfs/test/"
        />

        <timetest:TimeTest
          xmlns:timetest="class:/spiralcraft/time/test/"
        />

        <saxtest:SaxTest
          xmlns:saxtest="class:/spiralcraft/sax/test/"
        />
        <texttest:TextTest
          xmlns:texttest="class:/spiralcraft/text/test/"
        />
        <buildertest:SmokeTest
          xmlns:buildertest="class:/spiralcraft/builder/test/"
        />

        
        <task:Eval>
        
          <x>[@data:TypeResolver]
               .@getTypeResolver().getLoadedTypes()[!.linked].@log("Unlinked type count: "+.@size)#{.@log("Unlinked type: "+.URI.toString())}
          </x>
        </task:Eval>
      </sequence>
            
      <throwFailure>true
      </throwFailure>
    </test:TestGroup>
  </chain>
    
</task:TaskRunner>